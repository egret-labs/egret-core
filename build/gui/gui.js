//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var __define = this.__define || function (o, p, g, s) { 
  Object.defineProperty(o, p, { configurable:true, enumerable:true, get:g,set:s }) };
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ArrayCollection
         * @classdesc
         * 数组的集合类数据结构包装器
         * 通常作为列表组件的数据源，使用这种数据结构包装普通数组，
         * 能在数据源发生改变的时候主动通知视图刷新变更的数据项
         * @extends egret.EventDispatcher
         * @implements egret.gui.ICollection
         */
        var ArrayCollection = (function (_super) {
            __extends(ArrayCollection, _super);
            /**
             * 构造函数
             * @method egret.gui.ArrayCollection#constructor
             * @param source {Array<any>} 数据源
             */
            function ArrayCollection(source) {
                if (source === void 0) { source = null; }
                _super.call(this);
                if (source) {
                    this._source = source;
                }
                else {
                    this._source = [];
                }
            }
            var d = __define,c=ArrayCollection;p=c.prototype;
            d(p, "source"
                /**
                 * 数据源
                 * 通常情况下请不要直接调用Array的方法操作数据源，否则对应的视图无法收到数据改变的通知。
                 * 若对数据源进行了排序或过滤等操作，请手动调用refresh()方法刷新数据。<br/>
                 * @member egret.gui.ArrayCollection#source
                 */
                ,function () {
                    return this._source;
                }
                ,function (value) {
                    if (!value)
                        value = [];
                    this._source = value;
                    this.dispatchCoEvent(gui.CollectionEventKind.RESET);
                }
            );
            /**
             * 在对数据源进行排序或过滤操作后可以手动调用此方法刷新所有数据,以更新视图。
             * @method egret.gui.ArrayCollection#refresh
             */
            p.refresh = function () {
                this.dispatchCoEvent(gui.CollectionEventKind.REFRESH);
            };
            /**
             * 是否包含某项数据
             * @method egret.gui.ArrayCollection#contains
             * @param item {any}
             * @returns {boolean}
             */
            p.contains = function (item) {
                return this.getItemIndex(item) != -1;
            };
            /**
             * 检测索引是否超出范围
             */
            p.checkIndex = function (index) {
                if (index < 0 || index >= this._source.length) {
                    egret.$error(3002, index);
                }
            };
            d(p, "length"
                //--------------------------------------------------------------------------
                //
                // ICollection接口实现方法
                //
                //--------------------------------------------------------------------------
                /**
                 * @member egret.gui.ArrayCollection#length
                 */
                ,function () {
                    return this._source.length;
                }
            );
            /**
             * 向列表末尾添加指定项目。等效于 addItemAt(item, length)。
             * @method egret.gui.ArrayCollection#addItem
             * @param item {any}
             */
            p.addItem = function (item) {
                this._source.push(item);
                this.dispatchCoEvent(gui.CollectionEventKind.ADD, this._source.length - 1, -1, [item]);
            };
            /**
             * 在指定的索引处添加项目。
             * 任何大于已添加项目的索引的项目索引都会增加 1。
             * @method egret.gui.ArrayCollection#addItemAt
             * @param item {any}
             * @param index {number}
             */
            p.addItemAt = function (item, index) {
                if (index < 0 || index > this._source.length) {
                    egret.$error(3002, index);
                }
                this._source.splice(index, 0, item);
                this.dispatchCoEvent(gui.CollectionEventKind.ADD, index, -1, [item]);
            };
            /**
             * 获取指定索引处的项目
             * @method egret.gui.ArrayCollection#getItemAt
             * @param index {number}
             * @returns {any}
             */
            p.getItemAt = function (index) {
                return this._source[index];
            };
            /**
             * 如果项目位于列表中,返回该项目的索引。否则返回-1。
             * @method egret.gui.ArrayCollection#getItemIndex
             * @param item {any}
             * @returns {number}
             */
            p.getItemIndex = function (item) {
                var length = this._source.length;
                for (var i = 0; i < length; i++) {
                    if (this._source[i] === item) {
                        return i;
                    }
                }
                return -1;
            };
            /**
             * 通知视图，某个项目的属性已更新。
             * @method egret.gui.ArrayCollection#itemUpdated
             * @param item {any}
             */
            p.itemUpdated = function (item) {
                var index = this.getItemIndex(item);
                if (index != -1) {
                    this.dispatchCoEvent(gui.CollectionEventKind.UPDATE, index, -1, [item]);
                }
            };
            /**
             * 删除列表中的所有项目。
             * @method egret.gui.ArrayCollection#removeAll
             */
            p.removeAll = function () {
                var items = this._source.concat();
                this._source.length = 0;
                this.dispatchCoEvent(gui.CollectionEventKind.REMOVE, 0, -1, items);
            };
            /**
             * 删除指定索引处的项目并返回该项目。原先位于此索引之后的所有项目的索引现在都向前移动一个位置。
             * @method egret.gui.ArrayCollection#removeItemAt
             * @param index {number}
             * @returns {any}
             */
            p.removeItemAt = function (index) {
                this.checkIndex(index);
                var item = this._source.splice(index, 1)[0];
                this.dispatchCoEvent(gui.CollectionEventKind.REMOVE, index, -1, [item]);
                return item;
            };
            /**
             * 替换在指定索引处的项目，并返回该项目。
             * @method egret.gui.ArrayCollection#replaceItemAt
             * @param item {any}
             * @param index {number}
             * @returns {any}
             */
            p.replaceItemAt = function (item, index) {
                this.checkIndex(index);
                var oldItem = this._source.splice(index, 1, item)[0];
                this.dispatchCoEvent(gui.CollectionEventKind.REPLACE, index, -1, [item], [oldItem]);
                return oldItem;
            };
            /**
             * 用新数据源替换原始数据源，此方法与直接设置source不同，它不会导致目标视图重置滚动位置。
             * @method egret.gui.ArrayCollection#replaceAll
             * @param newSource {Array<any>} 新的数据源
             */
            p.replaceAll = function (newSource) {
                if (!newSource)
                    newSource = [];
                var newLength = newSource.length;
                var oldLenght = this._source.length;
                for (var i = newLength; i < oldLenght; i++) {
                    this.removeItemAt(newLength);
                }
                for (i = 0; i < newLength; i++) {
                    if (i >= oldLenght)
                        this.addItemAt(newSource[i], i);
                    else
                        this.replaceItemAt(newSource[i], i);
                }
                this._source = newSource;
            };
            /**
             * 移动一个项目
             * 在oldIndex和newIndex之间的项目，
             * 若oldIndex小于newIndex,索引会减1
             * 若oldIndex大于newIndex,索引会加1
             * @method egret.gui.ArrayCollection#moveItemAt
             * @param oldIndex {number}
             * @param newIndex {number}
             * @returns {any}
             */
            p.moveItemAt = function (oldIndex, newIndex) {
                this.checkIndex(oldIndex);
                this.checkIndex(newIndex);
                var item = this._source.splice(oldIndex, 1)[0];
                this._source.splice(newIndex, 0, item);
                this.dispatchCoEvent(gui.CollectionEventKind.MOVE, newIndex, oldIndex, [item]);
                return item;
            };
            /**
             * 抛出事件
             */
            p.dispatchCoEvent = function (kind, location, oldLocation, items, oldItems) {
                if (kind === void 0) { kind = null; }
                if (location === void 0) { location = -1; }
                if (oldLocation === void 0) { oldLocation = -1; }
                if (items === void 0) { items = null; }
                if (oldItems === void 0) { oldItems = null; }
                gui.CollectionEvent.dispatchCollectionEvent(this, gui.CollectionEvent.COLLECTION_CHANGE, kind, location, oldLocation, items, oldItems);
            };
            return ArrayCollection;
        })(egret.EventDispatcher);
        gui.ArrayCollection = ArrayCollection;
        egret.registerClass(ArrayCollection,"egret.gui.ArrayCollection",["egret.gui.ICollection","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ObjectCollection
         * @classdesc
         * Object的集合类数据结构包装器,通常作为Tree组件的数据源。
         * @extends egret.EventDispatcher
         * @implements egret.gui.ICollection
         * @implements egret.gui.ITreeCollection
         */
        var ObjectCollection = (function (_super) {
            __extends(ObjectCollection, _super);
            /**
             * 构造函数
             * @method egret.gui.ObjectCollection#constructor
             * @param childrenKey {string} 要从item中获取子项列表的属性名,属性值为一个数组或Vector。
             * @param parentKey {string} 要从item中获取父级项的属性名
             */
            function ObjectCollection(childrenKey, parentKey) {
                if (childrenKey === void 0) { childrenKey = "children"; }
                if (parentKey === void 0) { parentKey = "parent"; }
                _super.call(this);
                /**
                 * 要从item中获取子项列表的属性名
                 */
                this.childrenKey = "children";
                /**
                 * 要从item中获取父级项的属性名
                 */
                this.parentKey = "parent";
                this._source = null;
                /**
                 * 要显示的节点列表
                 */
                this.nodeList = [];
                this._openNodes = [];
                this._showRoot = false;
                this.childrenKey = childrenKey;
                this.parentKey = parentKey;
            }
            var d = __define,c=ObjectCollection;p=c.prototype;
            d(p, "source"
                /**
                 * 数据源。注意：设置source会同时清空openNodes。
                 * @member egret.gui.ObjectCollection#source
                 */
                ,function () {
                    return this._source;
                }
                ,function (value) {
                    this._source = value;
                    this._openNodes = [];
                    this.nodeList = [];
                    if (this._source) {
                        if (this._showRoot) {
                            this.nodeList.push(this._source);
                        }
                        else {
                            this._openNodes = [this._source];
                            this.addChildren(this._source, this.nodeList);
                        }
                    }
                    this.dispatchCoEvent(gui.CollectionEventKind.RESET);
                }
            );
            d(p, "openNodes"
                /**
                 * 处于展开状态的节点列表
                 * @member egret.gui.ObjectCollection#openNodes
                 */
                ,function () {
                    return this._openNodes.concat();
                }
                ,function (value) {
                    this._openNodes = value ? value.concat() : [];
                    this.refresh();
                }
            );
            d(p, "length"
                /**
                 * @member egret.gui.ObjectCollection#length
                 */
                ,function () {
                    return this.nodeList.length;
                }
            );
            /**
             * @method egret.gui.ObjectCollection#getItemAt
             * @param index {number}
             * @returns {any}
             */
            p.getItemAt = function (index) {
                return this.nodeList[index];
            };
            /**
             * @method egret.gui.ObjectCollection#getItemIndex
             * @param item {any}
             * @returns {number}
             */
            p.getItemIndex = function (item) {
                var length = this.nodeList.length;
                for (var i = 0; i < length; i++) {
                    if (this.nodeList[i] === item) {
                        return i;
                    }
                }
                return -1;
            };
            /**
             * 通知视图，某个项目的属性已更新。
             * @method egret.gui.ObjectCollection#itemUpdated
             * @param item {any}
             */
            p.itemUpdated = function (item) {
                var index = this.getItemIndex(item);
                if (index != -1) {
                    this.dispatchCoEvent(gui.CollectionEventKind.UPDATE, index, -1, [item]);
                }
            };
            /**
             * 删除指定节点
             * @method egret.gui.ObjectCollection#removeItem
             * @param item {any}
             */
            p.removeItem = function (item) {
                if (this.isItemOpen(item))
                    this.closeNode(item);
                if (!item)
                    return;
                var parent = item[this.parentKey];
                if (!parent)
                    return;
                var list = parent[this.childrenKey];
                if (!list)
                    return;
                var index = list.indexOf(item);
                if (index != -1)
                    list.splice(index, 1);
                item[this.parentKey] = null;
                index = this.nodeList.indexOf(item);
                if (index != -1) {
                    this.nodeList.splice(index, 1);
                    this.dispatchCoEvent(gui.CollectionEventKind.REMOVE, index, -1, [item]);
                }
            };
            d(p, "showRoot"
                /**
                 * 是否显示根节点,默认false。
                 * @member egret.gui.ObjectCollection#showRoot
                 */
                ,function () {
                    return this._showRoot;
                }
                ,function (value) {
                    if (this._showRoot == value)
                        return;
                    this._showRoot = value;
                    if (this._source) {
                        if (this._showRoot) {
                            this.nodeList.splice(0, 0, this._source);
                        }
                        else {
                            this.nodeList.shift();
                            if (this.openNodes.indexOf(this._source) == -1)
                                this.openNodes.push(this._source);
                        }
                        this.refresh();
                    }
                }
            );
            /**
             * 添加打开的节点到列表
             */
            p.addChildren = function (parent, list) {
                if (!parent.hasOwnProperty(this.childrenKey) || this._openNodes.indexOf(parent) == -1)
                    return;
                var children = parent[this.childrenKey];
                var length = children.length;
                for (var i = 0; i < length; i++) {
                    var child = children[i];
                    list.push(child);
                    this.addChildren(child, list);
                }
            };
            /**
             * @method egret.gui.ObjectCollection#hasChildren
             * @param item {any}
             * @returns {boolean}
             */
            p.hasChildren = function (item) {
                if (item.hasOwnProperty(this.childrenKey))
                    return item[this.childrenKey].length > 0;
                return false;
            };
            /**
             * @method egret.gui.ObjectCollection#isItemOpen
             * @param item {any}
             * @returns {boolean}
             */
            p.isItemOpen = function (item) {
                return this._openNodes.indexOf(item) != -1;
            };
            /**
             * @method egret.gui.ObjectCollection#expandItem
             * @param item {any}
             * @param open {boolean}
             */
            p.expandItem = function (item, open) {
                if (open === void 0) { open = true; }
                if (open)
                    this.openNode(item);
                else
                    this.closeNode(item);
            };
            /**
             * 打开一个节点
             */
            p.openNode = function (item) {
                if (this._openNodes.indexOf(item) == -1) {
                    this._openNodes.push(item);
                    var index = this.nodeList.indexOf(item);
                    if (index != -1) {
                        var list = [];
                        this.addChildren(item, list);
                        var i = index;
                        while (list.length) {
                            i++;
                            var node = list.shift();
                            this.nodeList.splice(i, 0, node);
                            this.dispatchCoEvent(gui.CollectionEventKind.ADD, i, -1, [node]);
                        }
                        this.dispatchCoEvent("open", index, index, [item]);
                    }
                }
            };
            /**
             * 关闭一个节点
             */
            p.closeNode = function (item) {
                var index = this._openNodes.indexOf(item);
                if (index == -1)
                    return;
                var list = [];
                this.addChildren(item, list);
                this._openNodes.splice(index, 1);
                index = this.nodeList.indexOf(item);
                if (index != -1) {
                    index++;
                    while (list.length) {
                        var node = this.nodeList.splice(index, 1)[0];
                        this.dispatchCoEvent(gui.CollectionEventKind.REMOVE, index, -1, [node]);
                        list.shift();
                    }
                    index--;
                    this.dispatchCoEvent(gui.CollectionEventKind.CLOSE, index, index, [item]);
                }
            };
            /**
             * @method egret.gui.ObjectCollection#getDepth
             * @param item {any}
             * @returns {number}
             */
            p.getDepth = function (item) {
                var depth = 0;
                var parent = item[this.parentKey];
                while (parent) {
                    depth++;
                    parent = parent[this.parentKey];
                }
                if (depth > 0 && !this._showRoot)
                    depth--;
                return depth;
            };
            /**
             * 刷新数据源。
             * @method egret.gui.ObjectCollection#refresh
             */
            p.refresh = function () {
                this.nodeList = [];
                if (this._source) {
                    if (this._showRoot) {
                        this.nodeList.push(this._source);
                    }
                    this.addChildren(this._source, this.nodeList);
                }
                this.dispatchCoEvent(gui.CollectionEventKind.REFRESH);
            };
            /**
             * 抛出事件
             */
            p.dispatchCoEvent = function (kind, location, oldLocation, items, oldItems) {
                if (kind === void 0) { kind = null; }
                if (location === void 0) { location = -1; }
                if (oldLocation === void 0) { oldLocation = -1; }
                if (items === void 0) { items = null; }
                if (oldItems === void 0) { oldItems = null; }
                gui.CollectionEvent.dispatchCollectionEvent(this, gui.CollectionEvent.COLLECTION_CHANGE, kind, location, oldLocation, items, oldItems);
            };
            /**
             * 一个工具方法，给parent的子项以及子孙项赋值父级引用。
             * @method egret.gui.ObjectCollection.assignParent
             * @param parent {any} 要遍历子项的parent对象。
             * @param childrenKey {string} 要从parent中获取子项列表的属性名,属性值为一个数组或Vector。
             * @param parentKey {string} 要给子项赋值父级引用的属性名。
             */
            ObjectCollection.assignParent = function (parent, childrenKey, parentKey) {
                if (childrenKey === void 0) { childrenKey = "children"; }
                if (parentKey === void 0) { parentKey = "parent"; }
                if (!parent.hasOwnProperty(childrenKey))
                    return;
                var children = parent[childrenKey];
                var length = children.length;
                for (var i = 0; i < length; i++) {
                    var child = children[i];
                    try {
                        child[parentKey] = parent;
                    }
                    catch (e) {
                    }
                    ObjectCollection.assignParent(child, childrenKey, parentKey);
                }
            };
            return ObjectCollection;
        })(egret.EventDispatcher);
        gui.ObjectCollection = ObjectCollection;
        egret.registerClass(ObjectCollection,"egret.gui.ObjectCollection",["egret.gui.ICollection","egret.IEventDispatcher","egret.gui.ITreeCollection"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.DepthQueue
         * @classdesc
         * 显示列表嵌套深度排序队列
         */
        var DepthQueue = (function () {
            /**
             * @method egret.gui.DepthQueue#constructor
             */
            function DepthQueue() {
                /**
                 * 深度队列
                 */
                this.depthBins = [];
                /**
                 * 最小深度
                 */
                this.minDepth = 0;
                /**
                 * 最大深度
                 */
                this.maxDepth = -1;
            }
            var d = __define,c=DepthQueue;p=c.prototype;
            /**
             * 插入一个元素
             * @method egret.gui.DepthQueue#insert
             * @param client {ILayoutManagerClient}
             */
            p.insert = function (client) {
                var depth = client.nestLevel;
                var hashCode = client.hashCode;
                if (this.maxDepth < this.minDepth) {
                    this.minDepth = this.maxDepth = depth;
                }
                else {
                    if (depth < this.minDepth)
                        this.minDepth = depth;
                    if (depth > this.maxDepth)
                        this.maxDepth = depth;
                }
                var bin = this.depthBins[depth];
                if (!bin) {
                    bin = new DepthBin();
                    this.depthBins[depth] = bin;
                    bin.items[hashCode] = client;
                    bin.length++;
                }
                else {
                    if (bin.items[hashCode] == null) {
                        bin.items[hashCode] = client;
                        bin.length++;
                    }
                }
            };
            /**
             * 从队列尾弹出深度最大的一个对象
             * @method egret.gui.DepthQueue#pop
             * @returns {ILayoutManagerClient}
             */
            p.pop = function () {
                var client = null;
                if (this.minDepth <= this.maxDepth) {
                    var bin = this.depthBins[this.maxDepth];
                    while (!bin || bin.length == 0) {
                        this.maxDepth--;
                        if (this.maxDepth < this.minDepth)
                            return null;
                        bin = this.depthBins[this.maxDepth];
                    }
                    var items = bin.items;
                    for (var key in items) {
                        client = items[key];
                        this.remove(client, this.maxDepth);
                        break;
                    }
                    while (!bin || bin.length == 0) {
                        this.maxDepth--;
                        if (this.maxDepth < this.minDepth)
                            break;
                        bin = this.depthBins[this.maxDepth];
                    }
                }
                return client;
            };
            /**
             * 从队列首弹出深度最小的一个对象
             * @method egret.gui.DepthQueue#shift
             * @returns {ILayoutManagerClient}
             */
            p.shift = function () {
                var client = null;
                if (this.minDepth <= this.maxDepth) {
                    var bin = this.depthBins[this.minDepth];
                    while (!bin || bin.length == 0) {
                        this.minDepth++;
                        if (this.minDepth > this.maxDepth)
                            return null;
                        bin = this.depthBins[this.minDepth];
                    }
                    var items = bin.items;
                    for (var key in items) {
                        client = items[key];
                        this.remove(client, this.minDepth);
                        break;
                    }
                    while (!bin || bin.length == 0) {
                        this.minDepth++;
                        if (this.minDepth > this.maxDepth)
                            break;
                        bin = this.depthBins[this.minDepth];
                    }
                }
                return client;
            };
            /**
             * 移除大于等于指定组件层级的元素中最大的元素
             * @method egret.gui.DepthQueue#removeLargestChild
             * @param client {ILayoutManagerClient}
             * @returns {any}
             */
            p.removeLargestChild = function (client) {
                var max = this.maxDepth;
                var min = client.nestLevel;
                var hashCode = client.hashCode;
                while (min <= max) {
                    var bin = this.depthBins[max];
                    if (bin && bin.length > 0) {
                        if (max == client.nestLevel) {
                            if (bin.items[hashCode]) {
                                this.remove(client, max);
                                return client;
                            }
                        }
                        else {
                            var items = bin.items;
                            for (var key in items) {
                                var value = items[key];
                                if ((value instanceof egret.DisplayObject) && (client instanceof egret.DisplayObjectContainer) && client.contains(value)) {
                                    this.remove(value, max);
                                    return value;
                                }
                            }
                        }
                        max--;
                    }
                    else {
                        if (max == this.maxDepth)
                            this.maxDepth--;
                        max--;
                        if (max < min)
                            break;
                    }
                }
                return null;
            };
            /**
             * 移除大于等于指定组件层级的元素中最小的元素
             * @method egret.gui.DepthQueue#removeSmallestChild
             * @param client {ILayoutManagerClient}
             * @returns {any}
             */
            p.removeSmallestChild = function (client) {
                var min = client.nestLevel;
                var hashCode = client.hashCode;
                while (min <= this.maxDepth) {
                    var bin = this.depthBins[min];
                    if (bin && bin.length > 0) {
                        if (min == client.nestLevel) {
                            if (bin.items[hashCode]) {
                                this.remove(client, min);
                                return client;
                            }
                        }
                        else {
                            var items = bin.items;
                            for (var key in items) {
                                var value = items[key];
                                if ((value instanceof egret.DisplayObject) && (client instanceof egret.DisplayObjectContainer) && client.contains(value)) {
                                    this.remove(value, min);
                                    return value;
                                }
                            }
                        }
                        min++;
                    }
                    else {
                        if (min == this.minDepth)
                            this.minDepth++;
                        min++;
                        if (min > this.maxDepth)
                            break;
                    }
                }
                return null;
            };
            /**
             * 移除一个元素
             * @method egret.gui.DepthQueue#remove
             * @param client {ILayoutManagerClient}
             * @param level {number}
             * @returns {ILayoutManagerClient}
             */
            p.remove = function (client, level) {
                if (level === void 0) { level = -1; }
                var depth = (level >= 0) ? level : client.nestLevel;
                var hashCode = client.hashCode;
                var bin = this.depthBins[depth];
                if (bin && bin.items[hashCode] != null) {
                    delete bin.items[hashCode];
                    bin.length--;
                    return client;
                }
                return null;
            };
            /**
             * 清空队列
             * @method egret.gui.DepthQueue#removeAll
             */
            p.removeAll = function () {
                this.depthBins.length = 0;
                this.minDepth = 0;
                this.maxDepth = -1;
            };
            /**
             * 队列是否为空
             * @method egret.gui.DepthQueue#isEmpty
             * @returns {boolean}
             */
            p.isEmpty = function () {
                return this.minDepth > this.maxDepth;
            };
            return DepthQueue;
        })();
        gui.DepthQueue = DepthQueue;
        egret.registerClass(DepthQueue,"egret.gui.DepthQueue");
        /**
         * 列表项
         */
        var DepthBin = (function () {
            function DepthBin() {
                this.length = 0;
                this.items = [];
            }
            var d = __define,c=DepthBin;p=c.prototype;
            return DepthBin;
        })();
        gui.DepthBin = DepthBin;
        egret.registerClass(DepthBin,"egret.gui.DepthBin");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.UIComponent
         * @classdesc
         * 显示对象基类
         * @extends egret.DisplayObjectContainer
         * @implements egret.gui.IUIComponent
         * @implements egret.gui.ILayoutManagerClient
         * @implements egret.gui.ILayoutElement
         * @implements egret.gui.IInvalidating
         * @implements egret.gui.IVisualElement
         */
        var UIComponent = (function (_super) {
            __extends(UIComponent, _super);
            /**
             * 构造函数
             * @method egret.gui.UIComponent#constructor
             */
            function UIComponent() {
                _super.call(this);
                this._UIC_Props_ = new egret.gui.UIComponentProperties();
                this.touchEnabled = true;
                this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddedToStage, this);
                this.addEventListener(egret.Event.ADDED_TO_STAGE, this.checkInvalidateFlag, this);
                if (UIComponent.prototypeCanSet === undefined) {
                    var chain = {};
                    UIComponent.prototypeCanSet = (chain.__proto__ !== undefined);
                }
                //this.$renderRegion = new sys.Region();
            }
            var d = __define,c=UIComponent;p=c.prototype;
            /**
             * 添加到舞台
             */
            p.onAddedToStage = function (e) {
                this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAddedToStage, this);
                this._initialize();
                gui.UIGlobals._initlize(this.stage);
                if (this._UIC_Props_._nestLevel > 0)
                    this.checkInvalidateFlag();
            };
            d(p, "id"
                /**
                 * 组件 ID。此值将作为对象的实例名称，因此不应包含任何空格或特殊字符。应用程序中的每个组件都应具有唯一的 ID。
                 * @constant egret.gui.UIComponent#id
                 */
                ,function () {
                    return this._UIC_Props_._id;
                }
                ,function (value) {
                    this._UIC_Props_._id = value;
                }
            );
            d(p, "isPopUp"
                /**
                 * @member egret.gui.UIComponent#isPopUp
                 */
                ,function () {
                    return this._UIC_Props_._isPopUp;
                }
                ,function (value) {
                    this._UIC_Props_._isPopUp = value;
                }
            );
            d(p, "owner"
                /**
                 * @member egret.gui.UIComponent#owner
                 */
                ,function () {
                    return this._UIC_Props_._owner ? this._UIC_Props_._owner : this.parent;
                }
            );
            /**
             * @method egret.gui.UIComponent#ownerChanged
             * @param value {any}
             */
            p.ownerChanged = function (value) {
                this._UIC_Props_._owner = value;
            };
            d(p, "updateCompletePendingFlag"
                /**
                 * @member egret.gui.UIComponent#updateCompletePendingFlag
                 */
                ,function () {
                    return this._UIC_Props_._updateCompletePendingFlag;
                }
                ,function (value) {
                    this._UIC_Props_._updateCompletePendingFlag = value;
                }
            );
            d(p, "initialized"
                /**
                 * @member egret.gui.UIComponent#initialized
                 */
                ,function () {
                    return this._UIC_Props_._initialized;
                }
                ,function (value) {
                    if (this._UIC_Props_._initialized == value)
                        return;
                    this._UIC_Props_._initialized = value;
                    if (value) {
                        this.childrenCreated();
                        gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CREATION_COMPLETE);
                    }
                }
            );
            /**
             * 初始化组件
             * @method egret.gui.UIComponent#_initialize
             */
            p._initialize = function () {
                if (this._UIC_Props_._initializeCalled)
                    return;
                if (gui.UIGlobals.stage) {
                    this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAddedToStage, this);
                }
                this._UIC_Props_._initializeCalled = true;
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.INITIALIZE);
                this.createChildren();
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            /**
             * 创建子项,子类覆盖此方法以完成组件子项的初始化操作，
             * 请务必调用super.createChildren()以完成父类组件的初始化
             * @method egret.gui.UIComponent#createChildren
             */
            p.createChildren = function () {
            };
            /**
             * 子项创建完成
             * @method egret.gui.UIComponent#childrenCreated
             */
            p.childrenCreated = function () {
            };
            d(p, "nestLevel"
                /**
                 * @member egret.gui.UIComponent#nestLevel
                 */
                ,function () {
                    return this._UIC_Props_._nestLevel;
                }
                ,function (value) {
                    if (this._UIC_Props_._nestLevel == value)
                        return;
                    this._UIC_Props_._nestLevel = value;
                    if (this._UIC_Props_._nestLevel == 0)
                        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.checkInvalidateFlag, this);
                    else
                        this.removeEventListener(egret.Event.ADDED_TO_STAGE, this.checkInvalidateFlag, this);
                    this._updateChildrenNestLevel();
                }
            );
            /**
             * 更新子项的nestLevel属性
             */
            p._updateChildrenNestLevel = function () {
                for (var i = this.numChildren - 1; i >= 0; i--) {
                    var child = (this.getChildAt(i));
                    if (child && "nestLevel" in child) {
                        child.nestLevel = this._UIC_Props_._nestLevel + 1;
                    }
                }
            };
            /**
             * 获取指定的名称的样式属性值
             */
            p.getStyle = function (styleProp) {
                var chain = this._UIC_Props_._styleProtoChain;
                if (!chain) {
                    return undefined;
                }
                return chain[styleProp];
            };
            /**
             * 对此组件实例设置样式属性。在此组件上设置的样式会覆盖父级容器的同名样式。推荐在子项较少的组件上使用，尽量避免在全局调用此方法，有可能造成性能问题。
             */
            p.setStyle = function (styleProp, newValue) {
                var chain = this._UIC_Props_._styleProtoChain;
                if (!this._UIC_Props_._hasOwnStyleChain) {
                    chain = this._createOwnStyleProtoChain(chain);
                }
                chain[styleProp] = newValue;
                this.styleChanged(styleProp);
                this.notifyStyleChangeInChildren(styleProp);
            };
            p.styleChanged = function (styleProp) {
            };
            /**
             * 通知子项列表样式发生改变
             */
            p.notifyStyleChangeInChildren = function (styleProp) {
                if (this._UIC_Props_._hasNoStyleChild) {
                    return;
                }
                for (var i = this.numChildren - 1; i >= 0; i--) {
                    var child = (this.getChildAt(i));
                    if (!child) {
                        continue;
                    }
                    if ("styleChanged" in child) {
                        child.styleChanged(styleProp);
                        child.notifyStyleChangeInChildren(styleProp);
                    }
                }
            };
            p._createOwnStyleProtoChain = function (chain) {
                this._UIC_Props_._hasOwnStyleChain = true;
                if (UIComponent.prototypeCanSet) {
                    this._UIC_Props_._styleProtoChain = {};
                    this._UIC_Props_._styleProtoChain.__proto__ = chain ? chain : UIComponent.emptyStyleChain;
                }
                else {
                    this._UIC_Props_._styleProtoChain = this.createProtoChain(chain);
                }
                chain = this._UIC_Props_._styleProtoChain;
                if (!this._UIC_Props_._hasNoStyleChild) {
                    for (var i = this.numChildren - 1; i >= 0; i--) {
                        var child = (this.getChildAt(i));
                        if (child && "regenerateStyleCache" in child) {
                            child["regenerateStyleCache"](chain);
                        }
                    }
                }
                return chain;
            };
            /**
             * 创建一个原型链节点
             */
            p.createProtoChain = function (parentChain) {
                function factory() {
                }
                ;
                factory.prototype = parentChain;
                var childChain = new factory();
                factory.prototype = null;
                return childChain;
            };
            /**
             * 清除在此组件实例上设置过的指定样式名。
             */
            p.clearStyle = function (styleProp) {
                if (!this._UIC_Props_._hasOwnStyleChain) {
                    return;
                }
                var chain = this._UIC_Props_._styleProtoChain;
                delete chain[styleProp];
                this.styleChanged(styleProp);
                this.notifyStyleChangeInChildren(styleProp);
            };
            /**
             * 重新生成自身以及所有子项的原型链
             */
            p.regenerateStyleCache = function (parentChain) {
                if (!UIComponent.prototypeCanSet) {
                    this.regenerateStyleCacheForIE(parentChain);
                    return;
                }
                if (this._UIC_Props_._hasOwnStyleChain) {
                    this._UIC_Props_._styleProtoChain.__proto__ = parentChain ? parentChain : UIComponent.emptyStyleChain;
                }
                else if (this._UIC_Props_._styleProtoChain != parentChain) {
                    this._UIC_Props_._styleProtoChain = parentChain;
                    for (var i = this.numChildren - 1; i >= 0; i--) {
                        var child = (this.getChildAt(i));
                        if (child && "regenerateStyleCache" in child) {
                            child.regenerateStyleCache(parentChain);
                        }
                    }
                }
            };
            /**
             * 兼容IE9，10的写法。
             */
            p.regenerateStyleCacheForIE = function (parentChain) {
                if (this._UIC_Props_._hasOwnStyleChain) {
                    var chain = this._UIC_Props_._styleProtoChain;
                    var childChain = this.createProtoChain(parentChain);
                    for (var key in chain) {
                        if (chain.hasOwnProperty(key)) {
                            childChain[key] = chain[key];
                        }
                    }
                    this._UIC_Props_._styleProtoChain = childChain;
                    parentChain = childChain;
                }
                else {
                    this._UIC_Props_._styleProtoChain = parentChain;
                }
                if (!this._UIC_Props_._hasNoStyleChild) {
                    for (var i = this.numChildren - 1; i >= 0; i--) {
                        var child = this.getChildAt(i);
                        if (child && "regenerateStyleCacheForIE" in child) {
                            child["regenerateStyleCacheForIE"](parentChain);
                        }
                    }
                }
            };
            /**
             * 添加对象到显示列表,此接口仅预留给框架内部使用
             * 如果需要管理子项，若有，请使用容器的addElement()方法，非法使用有可能造成无法自动布局。
             */
            p._addToDisplayList = function (child, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                var index = this.numChildren;
                if (child.parent == this)
                    index--;
                this._addingChild(child);
                this.$doAddChild(child, index, notifyListeners);
                this._childAdded(child);
                return child;
            };
            /**
             * 添加对象到显示列表,此接口仅预留给框架内部使用
             * 如果需要管理子项，若有，请使用容器的addElementAt()方法，非法使用有可能造成无法自动布局。
             */
            p._addToDisplayListAt = function (child, index, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                this._addingChild(child);
                this.$doAddChild(child, index, notifyListeners);
                this._childAdded(child);
                return child;
            };
            /**
             * 添加对象到显示列表,此接口仅预留给框架内部使用
             * 如果需要管理子项，若有，请使用容器的removeElement()方法,非法使用有可能造成无法自动布局。
             */
            p._removeFromDisplayList = function (child, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                var index = this.$children.indexOf(child);
                if (index >= 0) {
                    this.$doRemoveChild(index, notifyListeners);
                    this._childRemoved(child);
                    return child;
                }
                else {
                    egret.$error(1008);
                    return null;
                }
            };
            /**
             * 从显示列表移除指定索引的子项,此接口仅预留给框架内部使用
             * 如果需要管理子项，若有，请使用容器的removeElementAt()方法,非法使用有可能造成无法自动布局。
             */
            p._removeFromDisplayListAt = function (index, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                if (index >= 0 && index < this.$children.length) {
                    var child = this.$doRemoveChild(index, notifyListeners);
                    this._childRemoved(child);
                    return child;
                }
                else {
                    egret.$error(1007);
                    return null;
                }
            };
            /**
             * GUI范围内，请不要调用任何addChild方法，若是容器，请用addElement,若需要包装普通显示对象，请把显示对象赋值给UIAsset.source。
             * @deprecated
             * @method egret.gui.UIComponent#addChild
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.addChild = function (child) {
                this._addingChild(child);
                _super.prototype.addChild.call(this, child);
                this._childAdded(child);
                return child;
            };
            /**
             * GUI范围内，请不要调用任何addChildAt方法，若是容器，请用addElementAt,若需要包装普通显示对象，请把显示对象赋值给UIAsset.source。
             * @deprecated
             * @method egret.gui.UIComponent#addChildAt
             * @param child {DisplayObject}
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.addChildAt = function (child, index) {
                this._addingChild(child);
                _super.prototype.addChildAt.call(this, child, index);
                this._childAdded(child);
                return child;
            };
            /**
             * 即将添加一个子项
             */
            p._addingChild = function (child) {
                if (!child) {
                    return;
                }
                if ("nestLevel" in child) {
                    child.nestLevel = this._UIC_Props_._nestLevel + 1;
                }
                if ("styleChanged" in child) {
                    var chain = this._UIC_Props_._styleProtoChain;
                    if (chain || (child._UIC_Props_ && child._UIC_Props_._styleProtoChain)) {
                        child["regenerateStyleCache"](chain);
                        child["styleChanged"](null);
                        child["notifyStyleChangeInChildren"](null);
                    }
                }
            };
            /**
             * 已经添加一个子项
             */
            p._childAdded = function (child) {
                if (child instanceof UIComponent) {
                    child._initialize();
                    child.checkInvalidateFlag();
                }
            };
            /**
             * GUI范围内，请不要调用任何removeChild方法，若是容器，请用removeElement
             * @deprecated
             * @method egret.gui.UIComponent#removeChild
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.removeChild = function (child) {
                _super.prototype.removeChild.call(this, child);
                this._childRemoved(child);
                return child;
            };
            /**
             * GUI范围内，请不要调用任何removeChildAt方法，若是容器，请用removeElementAt
             * @deprecated
             * @method egret.gui.UIComponent#removeChildAt
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.removeChildAt = function (index) {
                var child = _super.prototype.removeChildAt.call(this, index);
                this._childRemoved(child);
                return child;
            };
            /**
             * 已经移除一个子项
             */
            p._childRemoved = function (child) {
                if (!child) {
                    return;
                }
                if ("nestLevel" in child) {
                    child.nestLevel = 0;
                }
            };
            /**
             * 检查属性失效标记并应用
             */
            p.checkInvalidateFlag = function (event) {
                if (event === void 0) { event = null; }
                if (!gui.UIGlobals._layoutManager)
                    return;
                if (this._UIC_Props_._invalidatePropertiesFlag) {
                    gui.UIGlobals._layoutManager.invalidateProperties(this);
                }
                if (this._UIC_Props_._invalidateSizeFlag) {
                    gui.UIGlobals._layoutManager.invalidateSize(this);
                }
                if (this._UIC_Props_._invalidateDisplayListFlag) {
                    gui.UIGlobals._layoutManager.invalidateDisplayList(this);
                }
                if (this._UIC_Props_._validateNowFlag) {
                    gui.UIGlobals._layoutManager.validateClient(this);
                    this._UIC_Props_._validateNowFlag = false;
                }
            };
            d(p, "enabled"
                /**
                 * @member egret.gui.UIComponent#enabled
                 */
                ,function () {
                    return this._UIC_Props_._enabled;
                }
                ,function (value) {
                    this._UIC_Props_._enabled = value;
                }
            );
            d(p, "width"
                /**
                 * @member egret.gui.UIComponent#width
                 */
                ,function () {
                    return this._UIC_Props_._uiWidth;
                    //return isNaN(this.$getExplicitWidth()) ? super.$getWidth() : this._UIC_Props_._uiWidth;
                }
                /**
                 * 组件宽度,默认值为NaN,设置为NaN将使用组件的measure()方法自动计算尺寸
                 */
                ,function (value) {
                    this.$setWidth(value);
                }
            );
            p.$setWidth = function (value) {
                if (this._UIC_Props_._uiWidth == value && this.$getExplicitWidth() == value)
                    return false;
                var result = _super.prototype.$setWidth.call(this, value);
                if (isNaN(value))
                    this.invalidateSize();
                else
                    this._UIC_Props_._uiWidth = value;
                this.invalidateProperties();
                this.invalidateDisplayList();
                this.invalidateParentSizeAndDisplayList();
                return result;
            };
            d(p, "height"
                /**
                 * @member egret.gui.UIComponent#height
                 */
                ,function () {
                    return this._UIC_Props_._uiHeight;
                    //return isNaN(this.$getExplicitHeight()) ? super.$getHeight() : this._UIC_Props_._uiHeight;
                }
                /**
                 * 组件高度,默认值为NaN,设置为NaN将使用组件的measure()方法自动计算尺寸
                 */
                ,function (value) {
                    this.$setHeight(value);
                }
            );
            p.$setHeight = function (value) {
                if (this._UIC_Props_._uiHeight == value && this.$getExplicitHeight() == value)
                    return false;
                var result = _super.prototype.$setHeight.call(this, value);
                if (isNaN(value))
                    this.invalidateSize();
                else
                    this._UIC_Props_._uiHeight = value;
                this.invalidateProperties();
                this.invalidateDisplayList();
                this.invalidateParentSizeAndDisplayList();
                return result;
            };
            p.$setScaleX = function (value) {
                if (_super.prototype.$setScaleX.call(this, value)) {
                    this.invalidateParentSizeAndDisplayList();
                    return true;
                }
                return false;
            };
            p.$setScaleY = function (value) {
                if (_super.prototype.$setScaleY.call(this, value)) {
                    this.invalidateParentSizeAndDisplayList();
                    return true;
                }
                return false;
            };
            d(p, "minWidth"
                /**
                 * @member egret.gui.UIComponent#minWidth
                 */
                ,function () {
                    return this._UIC_Props_._minWidth;
                }
                ,function (value) {
                    if (this._UIC_Props_._minWidth == value)
                        return;
                    this._UIC_Props_._minWidth = value;
                    this.invalidateSize();
                }
            );
            d(p, "maxWidth"
                /**
                 * @member egret.gui.UIComponent#maxWidth
                 */
                ,function () {
                    return this._UIC_Props_._maxWidth;
                }
                ,function (value) {
                    if (this._UIC_Props_._maxWidth == value)
                        return;
                    this._UIC_Props_._maxWidth = value;
                    this.invalidateSize();
                }
            );
            p._getMaxWidth = function () {
                return this._UIC_Props_._maxWidth;
            };
            d(p, "minHeight"
                /**
                 * @member egret.gui.UIComponent#minHeight
                 */
                ,function () {
                    return this._UIC_Props_._minHeight;
                }
                ,function (value) {
                    if (this._UIC_Props_._minHeight == value)
                        return;
                    this._UIC_Props_._minHeight = value;
                    this.invalidateSize();
                }
            );
            d(p, "maxHeight"
                /**
                 * @member egret.gui.UIComponent#maxHeight
                 */
                ,function () {
                    return this._UIC_Props_._maxHeight;
                }
                ,function (value) {
                    if (this._UIC_Props_._maxHeight == value)
                        return;
                    this._UIC_Props_._maxHeight = value;
                    this.invalidateSize();
                }
            );
            d(p, "measuredWidth"
                /**
                 * 组件的默认宽度（以像素为单位）。此值由 measure() 方法设置。
                 * @member egret.gui.UIComponent#measuredWidth
                 */
                ,function () {
                    return this._UIC_Props_._measuredWidth;
                }
                ,function (value) {
                    this._UIC_Props_._measuredWidth = value;
                }
            );
            d(p, "measuredHeight"
                /**
                 * 组件的默认高度（以像素为单位）。此值由 measure() 方法设置。
                 * @member egret.gui.UIComponent#measuredHeight
                 */
                ,function () {
                    return this._UIC_Props_._measuredHeight;
                }
                ,function (value) {
                    this._UIC_Props_._measuredHeight = value;
                }
            );
            /**
             * @method egret.gui.UIComponent#setActualSize
             * @param w {number}
             * @param h {number}
             */
            p.setActualSize = function (w, h) {
                var change = false;
                if (this._UIC_Props_._uiWidth != w) {
                    this._UIC_Props_._uiWidth = w;
                    change = true;
                }
                if (this._UIC_Props_._uiHeight != h) {
                    this._UIC_Props_._uiHeight = h;
                    change = true;
                }
                if (change) {
                    this.invalidateDisplayList();
                    this.dispatchResizeEvent();
                }
            };
            p.$setX = function (value) {
                if (_super.prototype.$setX.call(this, value)) {
                    this.invalidateProperties();
                    if (this._UIC_Props_._includeInLayout && this.parent && this.parent instanceof UIComponent)
                        (this.parent)._childXYChanged();
                    return true;
                }
                return false;
            };
            p.$setY = function (value) {
                if (_super.prototype.$setY.call(this, value)) {
                    this.invalidateProperties();
                    if (this._UIC_Props_._includeInLayout && this.parent && this.parent instanceof UIComponent)
                        (this.parent)._childXYChanged();
                    return true;
                }
                return false;
            };
            /**
             * @method egret.gui.UIComponent#invalidateProperties
             */
            p.invalidateProperties = function () {
                if (!this._UIC_Props_._invalidatePropertiesFlag) {
                    this._UIC_Props_._invalidatePropertiesFlag = true;
                    if (this.parent && gui.UIGlobals._layoutManager)
                        gui.UIGlobals._layoutManager.invalidateProperties(this);
                }
            };
            /**
             * @method egret.gui.UIComponent#validateProperties
             */
            p.validateProperties = function () {
                if (this._UIC_Props_._invalidatePropertiesFlag) {
                    this.commitProperties();
                    this._UIC_Props_._invalidatePropertiesFlag = false;
                }
            };
            /**
             * @method egret.gui.UIComponent#invalidateSize
             */
            p.invalidateSize = function () {
                if (!this._UIC_Props_._invalidateSizeFlag) {
                    this._UIC_Props_._invalidateSizeFlag = true;
                    if (this.parent && gui.UIGlobals._layoutManager)
                        gui.UIGlobals._layoutManager.invalidateSize(this);
                }
            };
            /**
             * @method egret.gui.UIComponent#validateSize
             * @param recursive {boolean}
             */
            p.validateSize = function (recursive) {
                if (recursive === void 0) { recursive = false; }
                if (recursive) {
                    for (var i = 0; i < this.numChildren; i++) {
                        var child = this.getChildAt(i);
                        if ("validateSize" in child)
                            child.validateSize(true);
                    }
                }
                if (this._UIC_Props_._invalidateSizeFlag) {
                    var changed = this.measureSizes();
                    if (changed) {
                        this.invalidateDisplayList();
                        this.invalidateParentSizeAndDisplayList();
                    }
                    this._UIC_Props_._invalidateSizeFlag = false;
                }
            };
            /**
             * 测量组件尺寸，返回尺寸是否发生变化
             */
            p.measureSizes = function () {
                var changed = false;
                if (!this._UIC_Props_._invalidateSizeFlag)
                    return changed;
                if (!this.canSkipMeasurement()) {
                    this.measure();
                    if (this.measuredWidth < this.minWidth) {
                        this.measuredWidth = this.minWidth;
                    }
                    if (this.measuredWidth > this.maxWidth) {
                        this.measuredWidth = this.maxWidth;
                    }
                    if (this.measuredHeight < this.minHeight) {
                        this.measuredHeight = this.minHeight;
                    }
                    if (this.measuredHeight > this.maxHeight) {
                        this.measuredHeight = this.maxHeight;
                    }
                }
                if (isNaN(this._UIC_Props_._oldPreferWidth)) {
                    this._UIC_Props_._oldPreferWidth = this.preferredWidth;
                    this._UIC_Props_._oldPreferHeight = this.preferredHeight;
                    changed = true;
                }
                else {
                    if (this.preferredWidth != this._UIC_Props_._oldPreferWidth || this.preferredHeight != this._UIC_Props_._oldPreferHeight)
                        changed = true;
                    this._UIC_Props_._oldPreferWidth = this.preferredWidth;
                    this._UIC_Props_._oldPreferHeight = this.preferredHeight;
                }
                return changed;
            };
            /**
             * @method egret.gui.UIComponent#invalidateDisplayList
             */
            p.invalidateDisplayList = function () {
                if (!this._UIC_Props_._invalidateDisplayListFlag) {
                    this._UIC_Props_._invalidateDisplayListFlag = true;
                    if (this.parent && gui.UIGlobals._layoutManager)
                        gui.UIGlobals._layoutManager.invalidateDisplayList(this);
                    this.$invalidateContentBounds();
                }
            };
            /**
             * @method egret.gui.UIComponent#validateDisplayList
             */
            p.validateDisplayList = function () {
                if (this._UIC_Props_._invalidateDisplayListFlag) {
                    var unscaledWidth = 0;
                    var unscaledHeight = 0;
                    if (this._UIC_Props_._layoutWidthExplicitlySet) {
                        unscaledWidth = this._UIC_Props_._uiWidth;
                    }
                    else if (!isNaN(this.$getExplicitWidth())) {
                        unscaledWidth = this.$getExplicitWidth();
                    }
                    else {
                        unscaledWidth = this.measuredWidth;
                    }
                    if (this._UIC_Props_._layoutHeightExplicitlySet) {
                        unscaledHeight = this._UIC_Props_._uiHeight;
                    }
                    else if (!isNaN(this.$getExplicitHeight())) {
                        unscaledHeight = this.$getExplicitHeight();
                    }
                    else {
                        unscaledHeight = this.measuredHeight;
                    }
                    if (isNaN(unscaledWidth))
                        unscaledWidth = 0;
                    if (isNaN(unscaledHeight))
                        unscaledHeight = 0;
                    this.setActualSize(unscaledWidth, unscaledHeight);
                    this.updateDisplayList(unscaledWidth, unscaledHeight);
                    this._UIC_Props_._invalidateDisplayListFlag = false;
                }
            };
            /**
             * @method egret.gui.UIComponent#validateNow
             * @param skipDisplayList {boolean}
             */
            p.validateNow = function (skipDisplayList) {
                if (skipDisplayList === void 0) { skipDisplayList = false; }
                if (!this._UIC_Props_._validateNowFlag && gui.UIGlobals._layoutManager != null)
                    gui.UIGlobals._layoutManager.validateClient(this, skipDisplayList);
                else
                    this._UIC_Props_._validateNowFlag = true;
            };
            /**
             * 标记父级容器的尺寸和显示列表为失效
             * @method egret.gui.UIComponent#invalidateParentSizeAndDisplayList
             */
            p.invalidateParentSizeAndDisplayList = function () {
                if (!this.parent || !this._UIC_Props_._includeInLayout || !("invalidateSize" in this.parent))
                    return;
                var p = (this.parent);
                p.invalidateSize();
                p.invalidateDisplayList();
            };
            /**
             * 更新显示列表
             * @method egret.gui.UIComponent#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            };
            /**
             * 是否可以跳过测量尺寸阶段,返回true则不执行measure()方法
             */
            p.canSkipMeasurement = function () {
                return !isNaN(this.$getExplicitWidth()) && !isNaN(this.$getExplicitHeight());
            };
            /**
             * 提交属性，子类在调用完invalidateProperties()方法后，应覆盖此方法以应用属性
             */
            p.commitProperties = function () {
                if (this._UIC_Props_._oldWidth != this._UIC_Props_._uiWidth || this._UIC_Props_._oldHeight != this._UIC_Props_._uiHeight) {
                    this.dispatchResizeEvent();
                }
                if (this._UIC_Props_._oldX != this.x || this._UIC_Props_._oldY != this.y) {
                    this.dispatchMoveEvent();
                }
            };
            /**
             * 测量组件尺寸
             * @method egret.gui.UIComponent#measure
             */
            p.measure = function () {
                this._UIC_Props_._measuredHeight = 0;
                this._UIC_Props_._measuredWidth = 0;
            };
            /**
             *  抛出移动事件
             */
            p.dispatchMoveEvent = function () {
                if (this.hasEventListener(gui.MoveEvent.MOVE)) {
                    gui.MoveEvent.dispatchMoveEvent(this, this._UIC_Props_._oldX, this._UIC_Props_._oldY);
                }
                this._UIC_Props_._oldX = this.x;
                this._UIC_Props_._oldY = this.y;
            };
            /**
             * 子项的xy位置发生改变
             */
            p._childXYChanged = function () {
            };
            /**
             *  抛出尺寸改变事件
             */
            p.dispatchResizeEvent = function () {
                if (this.hasEventListener(gui.ResizeEvent.RESIZE)) {
                    gui.ResizeEvent.dispatchResizeEvent(this, this._UIC_Props_._oldWidth, this._UIC_Props_._oldHeight);
                }
                this._UIC_Props_._oldWidth = this._UIC_Props_._uiWidth;
                this._UIC_Props_._oldHeight = this._UIC_Props_._uiHeight;
            };
            d(p, "includeInLayout"
                /**
                 * @member egret.gui.UIComponent#includeInLayout
                 */
                ,function () {
                    return this._UIC_Props_._includeInLayout;
                }
                ,function (value) {
                    if (this._UIC_Props_._includeInLayout == value)
                        return;
                    this._UIC_Props_._includeInLayout = true;
                    this.invalidateParentSizeAndDisplayList();
                    this._UIC_Props_._includeInLayout = value;
                }
            );
            d(p, "left"
                /**
                 * @member egret.gui.UIComponent#left
                 */
                ,function () {
                    return this._UIC_Props_._left;
                }
                ,function (value) {
                    if (this._UIC_Props_._left == value)
                        return;
                    this._UIC_Props_._left = value;
                    this.invalidateParentSizeAndDisplayList();
                }
            );
            d(p, "right"
                /**
                 * @member egret.gui.UIComponent#right
                 */
                ,function () {
                    return this._UIC_Props_._right;
                }
                ,function (value) {
                    if (this._UIC_Props_._right == value)
                        return;
                    this._UIC_Props_._right = value;
                    this.invalidateParentSizeAndDisplayList();
                }
            );
            d(p, "top"
                /**
                 * @member egret.gui.UIComponent#top
                 */
                ,function () {
                    return this._UIC_Props_._top;
                }
                ,function (value) {
                    if (this._UIC_Props_._top == value)
                        return;
                    this._UIC_Props_._top = value;
                    this.invalidateParentSizeAndDisplayList();
                }
            );
            d(p, "bottom"
                /**
                 * @member egret.gui.UIComponent#bottom
                 */
                ,function () {
                    return this._UIC_Props_._bottom;
                }
                ,function (value) {
                    if (this._UIC_Props_._bottom == value)
                        return;
                    this._UIC_Props_._bottom = value;
                    this.invalidateParentSizeAndDisplayList();
                }
            );
            d(p, "horizontalCenter"
                /**
                 * @member egret.gui.UIComponent#horizontalCenter
                 */
                ,function () {
                    return this._UIC_Props_._horizontalCenter;
                }
                ,function (value) {
                    if (this._UIC_Props_._horizontalCenter == value)
                        return;
                    this._UIC_Props_._horizontalCenter = value;
                    this.invalidateParentSizeAndDisplayList();
                }
            );
            d(p, "verticalCenter"
                /**
                 * @member egret.gui.UIComponent#verticalCenter
                 */
                ,function () {
                    return this._UIC_Props_._verticalCenter;
                }
                ,function (value) {
                    if (this._UIC_Props_._verticalCenter == value)
                        return;
                    this._UIC_Props_._verticalCenter = value;
                    this.invalidateParentSizeAndDisplayList();
                }
            );
            d(p, "percentWidth"
                /**
                 * @member egret.gui.UIComponent#percentWidth
                 */
                ,function () {
                    return this._UIC_Props_._percentWidth;
                }
                ,function (value) {
                    if (this._UIC_Props_._percentWidth == value)
                        return;
                    this._UIC_Props_._percentWidth = value;
                    this.invalidateParentSizeAndDisplayList();
                }
            );
            d(p, "percentHeight"
                /**
                 * @member egret.gui.UIComponent#percentHeight
                 */
                ,function () {
                    return this._UIC_Props_._percentHeight;
                }
                ,function (value) {
                    if (this._UIC_Props_._percentHeight == value)
                        return;
                    this._UIC_Props_._percentHeight = value;
                    this.invalidateParentSizeAndDisplayList();
                }
            );
            /**
             * @method egret.gui.UIComponent#setLayoutBoundsSize
             * @param layoutWidth {number}
             * @param layoutHeight {number}
             */
            p.setLayoutBoundsSize = function (layoutWidth, layoutHeight) {
                if (isNaN(layoutWidth)) {
                    this._UIC_Props_._layoutWidthExplicitlySet = false;
                    layoutWidth = this.preferredWidth;
                }
                else {
                    this._UIC_Props_._layoutWidthExplicitlySet = true;
                }
                if (isNaN(layoutHeight)) {
                    this._UIC_Props_._layoutHeightExplicitlySet = false;
                    layoutHeight = this.preferredHeight;
                }
                else {
                    this._UIC_Props_._layoutHeightExplicitlySet = true;
                }
                this.setActualSize(layoutWidth / this.$getScaleX(), layoutHeight / this.$getScaleY());
            };
            /**
             * @method egret.gui.UIComponent#setLayoutBoundsPosition
             * @param x {number}
             * @param y {number}
             */
            p.setLayoutBoundsPosition = function (x, y) {
                if (this.$getScaleX() < 0) {
                    x += this.layoutBoundsWidth;
                }
                if (this.$getScaleY() < 0) {
                    y += this.layoutBoundsHeight;
                }
                var changed = false;
                if (this.$getX() != x) {
                    this.$setX(x);
                    changed = true;
                }
                if (this.$getY() != y) {
                    this.$setY(y);
                    changed = true;
                }
                if (changed) {
                    this.dispatchMoveEvent();
                }
            };
            d(p, "preferredWidth"
                /**
                 * @member egret.gui.UIComponent#preferredWidth
                 */
                ,function () {
                    var w = !isNaN(this.$getExplicitWidth()) ? this.$getExplicitWidth() : this._UIC_Props_._measuredWidth;
                    var scaleX = this.$getScaleX();
                    if (scaleX < 0) {
                        scaleX = -scaleX;
                    }
                    return w * scaleX;
                }
            );
            d(p, "preferredHeight"
                /**
                 * @member egret.gui.UIComponent#preferredHeight
                 */
                ,function () {
                    var h = !isNaN(this.$getExplicitHeight()) ? this.$getExplicitHeight() : this._UIC_Props_._measuredHeight;
                    var scaleY = this.$getScaleY();
                    if (scaleY < 0) {
                        scaleY = -scaleY;
                    }
                    return h * scaleY;
                }
            );
            d(p, "preferredX"
                /**
                 * @member egret.gui.UIComponent#preferredX
                 */
                ,function () {
                    if (this.$getScaleX() >= 0) {
                        return this.$getX();
                    }
                    var w = this.preferredWidth;
                    return this.$getX() - w;
                }
            );
            d(p, "preferredY"
                /**
                 * @member egret.gui.UIComponent#preferredY
                 */
                ,function () {
                    if (this.$getScaleY() >= 0) {
                        return this.$getY();
                    }
                    var h = this.preferredHeight;
                    return this.$getY() - h;
                }
            );
            d(p, "layoutBoundsX"
                /**
                 * @member egret.gui.UIComponent#layoutBoundsX
                 */
                ,function () {
                    if (this.$getScaleX() >= 0) {
                        return this.$getX();
                    }
                    var w = this.layoutBoundsWidth;
                    return this.$getX() - w;
                }
            );
            d(p, "layoutBoundsY"
                /**
                 * @member egret.gui.UIComponent#layoutBoundsY
                 */
                ,function () {
                    if (this.$getScaleY() >= 0) {
                        return this.$getY();
                    }
                    var h = this.layoutBoundsHeight;
                    return this.$getY() - h;
                }
            );
            d(p, "layoutBoundsWidth"
                /**
                 * @member egret.gui.UIComponent#layoutBoundsWidth
                 */
                ,function () {
                    var w = 0;
                    if (this._UIC_Props_._layoutWidthExplicitlySet) {
                        w = this._UIC_Props_._uiWidth;
                    }
                    else if (!isNaN(w = this.$getExplicitWidth())) {
                    }
                    else {
                        w = this._UIC_Props_._measuredWidth;
                    }
                    var scaleX = this.$getScaleX();
                    if (scaleX < 0) {
                        scaleX = -scaleX;
                    }
                    return w * scaleX;
                }
            );
            d(p, "layoutBoundsHeight"
                /**
                 * 组件的布局高度,常用于父级的updateDisplayList()方法中
                 * 按照：布局高度>外部显式设置高度>测量高度 的优先级顺序返回高度
                 * @member egret.gui.UIComponent#layoutBoundsHeight
                 */
                ,function () {
                    var h = 0;
                    if (this._UIC_Props_._layoutHeightExplicitlySet) {
                        h = this._UIC_Props_._uiHeight;
                    }
                    else if (!isNaN(h = this.$getExplicitHeight())) {
                    }
                    else {
                        h = this._UIC_Props_._measuredHeight;
                    }
                    var scaleY = this.$getScaleY();
                    if (scaleY < 0) {
                        scaleY = -scaleY;
                    }
                    return h * scaleY;
                }
            );
            /**
             * __proto__属性是否可以设置的标志，兼容IE9，IE10。
             */
            UIComponent.prototypeCanSet = undefined;
            UIComponent.emptyStyleChain = {};
            return UIComponent;
        })(egret.DisplayObjectContainer);
        gui.UIComponent = UIComponent;
        egret.registerClass(UIComponent,"egret.gui.UIComponent",["egret.gui.IUIComponent","egret.gui.IVisualElement","egret.gui.ILayoutElement","egret.IEventDispatcher","egret.gui.ILayoutManagerClient","egret.gui.IInvalidating","egret.gui.IStyleClient"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SkinnableComponent
         * @classdesc
         * 复杂可设置外观组件的基类，接受ISkin类或任何显示对象作为皮肤。
         * 当皮肤为ISkin时，将自动匹配两个实例内同名的公开属性(显示对象)，
         * 并将皮肤的属性引用赋值到此类定义的同名属性(必须没有默认值)上,
         * 如果要对公共属性添加事件监听或其他操作，
         * 请覆盖partAdded()和partRemoved()方法
         * @extends egret.gui.UIComponent
         */
        var SkinnableComponent = (function (_super) {
            __extends(SkinnableComponent, _super);
            /**
             * 构造函数
             * @method egret.gui.SkinnableComponent#constructor
             */
            function SkinnableComponent() {
                _super.call(this);
                /**
                 * 主机组件标识符。用于唯一确定一个组件的名称。
                 * 用户自定义的组件若不对此属性赋值，将会继承父级的标识符定义。
                 * @member {string} egret.gui.SkinnableComponent#hostComponentKey
                 */
                this.hostComponentKey = null;
                /**
                 * 外部显式设置了皮肤名
                 */
                this._skinNameExplicitlySet = false;
                this._skinName = null;
                this._createChildrenCalled = false;
                this._skin = null;
                this.skinLayoutEnabled = false;
                //========================皮肤视图状态=====================start=======================
                this.stateIsDirty = false;
                this._autoMouseEnabled = true;
                /**
                 * 外部显式设置的mouseChildren属性值
                 */
                this.explicitMouseChildren = true;
                /**
                 * 外部显式设置的mouseEnabled属性值
                 */
                this.explicitMouseEnabled = true;
            }
            var d = __define,c=SkinnableComponent;p=c.prototype;
            d(p, "skinName"
                /**
                 * 皮肤标识符。可以为Class,String,或DisplayObject实例等任意类型，具体规则由项目注入的素材适配器决定，
                 * 适配器根据此属性值解析获取对应的显示对象，并赋值给skin属性。
                 * @member {string} egret.gui.SkinnableComponent#skinName
                 */
                ,function () {
                    return this._skinName;
                }
                ,function (value) {
                    if (this._skinName == value)
                        return;
                    this._skinName = value;
                    this._skinNameExplicitlySet = true;
                    if (this._createChildrenCalled) {
                        this.parseSkinName();
                    }
                }
            );
            /**
             * 创建该容器的子元素对象
             * @method egret.gui.SkinnableComponent#createChildren
             */
            p.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.parseSkinName();
                this._createChildrenCalled = true;
            };
            /**
             * 解析skinName
             */
            p.parseSkinName = function () {
                var adapter = SkinnableComponent.skinAdapter;
                if (!adapter) {
                    adapter = this.getSkinAdapter();
                }
                var key = this.hostComponentKey || egret.getQualifiedClassName(this);
                var skin = adapter.getSkin(this._skinName, key);
                if (!skin) {
                    var theme = SkinnableComponent._defaultTheme;
                    if (theme) {
                        skin = theme.getDefaultSkin(this);
                    }
                }
                this._setSkin(skin);
            };
            /**
             * 获取皮肤适配器
             */
            p.getSkinAdapter = function () {
                var adapter;
                adapter = new gui.DefaultSkinAdapter();
                SkinnableComponent.skinAdapter = adapter;
                return adapter;
            };
            d(p, "skin"
                /**
                 * 皮肤对象实例。
                 * @member egret.gui.SkinnableComponent#skin
                 */
                ,function () {
                    return this._skin;
                }
            );
            /**
             * 设置皮肤
             */
            p._setSkin = function (skin) {
                var oldSkin = this._skin;
                this.detachSkin(oldSkin);
                if (oldSkin instanceof egret.DisplayObject) {
                    this._removeFromDisplayList(oldSkin);
                }
                this._skin = skin;
                if (skin instanceof egret.DisplayObject) {
                    this._addToDisplayListAt(this._skin, 0);
                }
                this.attachSkin(skin);
                this.invalidateSkinState();
                this.invalidateSize();
                this.invalidateDisplayList();
                if (this.hasEventListener(gui.UIEvent.SKIN_CHANGED)) {
                    gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.SKIN_CHANGED);
                }
            };
            /**
             * 附加皮肤
             * @method egret.gui.SkinnableComponent#attachSkin
             * @param skin {any}
             */
            p.attachSkin = function (skin) {
                if (skin && !(skin instanceof egret.DisplayObject))
                    this.skinLayoutEnabled = true;
                else
                    this.skinLayoutEnabled = false;
                if (skin && "hostComponent" in skin) {
                    var newSkin = skin;
                    newSkin.hostComponent = this;
                    this.findSkinParts();
                }
            };
            /**
             * 匹配皮肤和主机组件的公共变量，并完成实例的注入。此方法在附加皮肤时会自动执行一次。
             * 若皮肤中含有延迟实例化的子部件，在子部件实例化完成时需要从外部再次调用此方法,完成注入。
             * @method egret.gui.SkinnableComponent#findSkinParts
             */
            p.findSkinParts = function () {
                var skin = this._skin;
                if (skin && "skinParts" in skin) {
                    var skinParts = skin.skinParts;
                    var length = skinParts.length;
                    for (var i = 0; i < length; i++) {
                        var partName = skinParts[i];
                        if ((partName in skin)) {
                            try {
                                this[partName] = skin[partName];
                                this.partAdded(partName, skin[partName]);
                            }
                            catch (e) {
                            }
                        }
                    }
                }
            };
            /**
             * 卸载皮肤
             * @method egret.gui.SkinnableComponent#detachSkin
             * @param skin {any}
             */
            p.detachSkin = function (skin) {
                if (skin) {
                    if ("skinParts" in skin) {
                        var skinParts = skin.skinParts;
                        var length = skinParts.length;
                        for (var i = 0; i < length; i++) {
                            var partName = skinParts[i];
                            if (!(partName in this))
                                continue;
                            if (this[partName] != null) {
                                this.partRemoved(partName, this[partName]);
                            }
                            this[partName] = null;
                        }
                    }
                    skin.hostComponent = null;
                }
            };
            /**
             * 若皮肤是ISkin,则调用此方法附加皮肤中的公共部件
             * @method egret.gui.SkinnableComponent#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                gui.SkinPartEvent.dispatchSkinPartEvent(this, gui.SkinPartEvent.PART_ADDED, partName, instance);
            };
            /**
             * 若皮肤是ISkin，则调用此方法卸载皮肤之前注入的公共部件
             * @method egret.gui.SkinnableComponent#partRemoved
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                gui.SkinPartEvent.dispatchSkinPartEvent(this, gui.SkinPartEvent.PART_REMOVED, partName, instance);
            };
            /**
             * 标记当前需要重新验证皮肤状态
             * @method egret.gui.SkinnableComponent#invalidateSkinState
             */
            p.invalidateSkinState = function () {
                if (this.stateIsDirty)
                    return;
                this.stateIsDirty = true;
                this.invalidateProperties();
            };
            /**
             * 子类覆盖此方法,应用当前的皮肤状态
             * @method egret.gui.SkinnableComponent#validateSkinState
             */
            p.validateSkinState = function () {
                var curState = this.getCurrentSkinState();
                var skin = this._skin;
                if (skin && "currentState" in skin) {
                    skin.currentState = curState;
                }
                if (this.hasEventListener("stateChanged"))
                    this.dispatchEventWith("stateChanged");
            };
            d(p, "autoTouchEnabled"
                /**
                 * 在enabled属性发生改变时是否自动开启或禁用鼠标事件的响应。默认值为true。
                 * @member egret.gui.SkinnableComponent#autoTouchEnabled
                 */
                ,function () {
                    return this._autoMouseEnabled;
                }
                ,function (value) {
                    if (this._autoMouseEnabled == value)
                        return;
                    this._autoMouseEnabled = value;
                    if (this._autoMouseEnabled) {
                        this.touchChildren = this.enabled ? this.explicitMouseChildren : false;
                        this.touchEnabled = this.enabled ? this.explicitMouseEnabled : false;
                    }
                    else {
                        this.touchChildren = this.explicitMouseChildren;
                        this.touchEnabled = this.explicitMouseEnabled;
                    }
                }
            );
            d(p, "touchChildren"
                /**
                 * @member egret.gui.SkinnableComponent#touchChildren
                 */
                ,function () {
                    return this.$getTouchChildren();
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (this.enabled) {
                        this.$setTouchChildren(value);
                    }
                    this.explicitMouseChildren = value;
                }
            );
            d(p, "touchEnabled"
                /**
                 * @member egret.gui.SkinnableComponent#touchEnabled
                 */
                ,function () {
                    return this.$getTouchEnabled();
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (this.enabled) {
                        this.$setTouchEnabled(value);
                    }
                    this.explicitMouseEnabled = value;
                }
            );
            d(p, "enabled"
                /**
                 * @member egret.gui.SkinnableComponent#enabled
                 */
                ,function () {
                    return this._UIC_Props_._enabled;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    this.$setEnabled(value);
                }
            );
            p.$setEnabled = function (value) {
                if (this._UIC_Props_._enabled == value)
                    return false;
                this._UIC_Props_._enabled = value;
                if (this._autoMouseEnabled) {
                    this.touchChildren = value ? this.explicitMouseChildren : false;
                    this.touchEnabled = value ? this.explicitMouseEnabled : false;
                }
                this.invalidateSkinState();
                return true;
            };
            /**
             * 返回组件当前的皮肤状态名称,子类覆盖此方法定义各种状态名
             * @method egret.gui.SkinnableComponent#getCurrentSkinState
             * @returns {string}
             */
            p.getCurrentSkinState = function () {
                return this.enabled ? "normal" : "disabled";
            };
            //========================皮肤视图状态===================end========================
            /**
             * 处理对组件设置的属性
             * @method egret.gui.SkinnableComponent#commitProperties
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.stateIsDirty) {
                    this.stateIsDirty = false;
                    this.validateSkinState();
                }
            };
            /**
             *
             * @private
             */
            p._childXYChanged = function () {
                if (this.skinLayoutEnabled) {
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            };
            /**
             * 计算组件的默认大小和（可选）默认最小大小
             */
            p.measure = function () {
                _super.prototype.measure.call(this);
                var skin = this._skin;
                if (!skin)
                    return;
                if (this.skinLayoutEnabled) {
                    skin.measure();
                    this.measuredWidth = skin.preferredWidth;
                    this.measuredHeight = skin.preferredHeight;
                }
                else {
                    if ("preferredWidth" in skin) {
                        this.measuredWidth = skin.preferredWidth;
                        this.measuredHeight = skin.preferredHeight;
                    }
                    else {
                        this.measuredWidth = skin.width;
                        this.measuredHeight = skin.height;
                    }
                }
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @method egret.gui.SkinnableComponent#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                var skin = this._skin;
                if (skin) {
                    if (this.skinLayoutEnabled) {
                        skin.updateDisplayList(unscaledWidth, unscaledHeight);
                    }
                    else if ("setLayoutBoundsSize" in skin) {
                        (skin).setLayoutBoundsSize(unscaledWidth, unscaledHeight);
                    }
                    else if (skin instanceof egret.DisplayObject) {
                        skin.scaleX = skin.width == 0 ? 1 : unscaledWidth / skin.width;
                        skin.scaleY = skin.height == 0 ? 1 : unscaledHeight / skin.height;
                    }
                }
            };
            /**
             * 不支持此方法
             * @method egret.gui.SkinnableComponent#addChild
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.addChild = function (child) {
                egret.$error(3004, egret.sys.tr(3003));
                return null;
            };
            /**
             *  不支持此方法
             * @method egret.gui.SkinnableComponent#addChildAt
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.addChildAt = function (child, index) {
                egret.$error(3005, egret.sys.tr(3003));
                return null;
            };
            /**
             *  不支持此方法
             * @method egret.gui.SkinnableComponent#removeChild
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.removeChild = function (child) {
                egret.$error(3006, egret.sys.tr(3003));
                return null;
            };
            /**
             *  不支持此方法
             * @method egret.gui.SkinnableComponent#removeChildAt
             * @deprecated
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.removeChildAt = function (index) {
                egret.$error(3007, egret.sys.tr(3003));
                return null;
            };
            /**
             *  不支持此方法
             * @method egret.gui.SkinnableComponent#setChildIndex
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             */
            p.setChildIndex = function (child, index) {
                egret.$error(3008, egret.sys.tr(3003));
            };
            /**
             *  不支持此方法
             * @method egret.gui.SkinnableComponent#swapChildren
             * @deprecated
             * @param child1 {DisplayObject}
             * @param child2 {DisplayObject}
             */
            p.swapChildren = function (child1, child2) {
                egret.$error(3009, egret.sys.tr(3003));
            };
            /**
             *  不支持此方法
             * @method egret.gui.SkinnableComponent#swapChildrenAt
             * @deprecated
             * @param index1 {number}
             * @param index2 {number}
             */
            p.swapChildrenAt = function (index1, index2) {
                egret.$error(3010, egret.sys.tr(3003));
            };
            /**
             * 皮肤解析适配器
             */
            SkinnableComponent.skinAdapter = null;
            /**
             * 默认皮肤主题解析器
             */
            SkinnableComponent._defaultTheme = null;
            return SkinnableComponent;
        })(gui.UIComponent);
        gui.SkinnableComponent = SkinnableComponent;
        egret.registerClass(SkinnableComponent,"egret.gui.SkinnableComponent",["egret.gui.ISkinnableClient","egret.gui.IVisualElement","egret.gui.ILayoutElement","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SkinnableContainer
         * @classdesc
         * 可设置外观的容器的基类
         * @extends egret.gui.SkinnableComponent
         * @implements egret.gui.IVisualElementContainer
         */
        var SkinnableContainer = (function (_super) {
            __extends(SkinnableContainer, _super);
            /**
             * @method egret.gui.SkinnableContainer#constructor
             */
            function SkinnableContainer() {
                _super.call(this);
                /**
                 * [SkinPart]实体容器
                 * @member egret.gui.SkinnableContainer#contentGroup
                 */
                this.contentGroup = null;
                /**
                 * 实体容器实例化之前缓存子对象的容器
                 */
                this._placeHolderGroup = null;
                /**
                 * contentGroup发生改变时传递的参数
                 */
                this.contentGroupProperties = {};
            }
            var d = __define,c=SkinnableContainer;p=c.prototype;
            /**
             * 获取当前的实体容器
             */
            p._getCurrentContentGroup = function () {
                if (this.contentGroup == null) {
                    if (this._placeHolderGroup == null) {
                        this._placeHolderGroup = new gui.Group();
                        this._placeHolderGroup.visible = false;
                        this._addToDisplayList(this._placeHolderGroup);
                    }
                    this._placeHolderGroup.addEventListener(gui.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this);
                    this._placeHolderGroup.addEventListener(gui.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this);
                    return this._placeHolderGroup;
                }
                else {
                    return this.contentGroup;
                }
            };
            d(p, "elementsContent",undefined
                /**
                 * 设置容器子对象数组 。数组包含要添加到容器的子项列表，之前的已存在于容器中的子项列表被全部移除后添加列表里的每一项到容器。
                 * 设置该属性时会对您输入的数组进行一次浅复制操作，所以您之后对该数组的操作不会影响到添加到容器的子项列表数量。
                 */
                ,function (value) {
                    this._getCurrentContentGroup().elementsContent = value;
                }
            );
            d(p, "numElements"
                /**
                 */
                ,function () {
                    return this._getCurrentContentGroup().numElements;
                }
            );
            /**
             * 返回指定索引处的可视元素
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.getElementAt = function (index) {
                return this._getCurrentContentGroup().getElementAt(index);
            };
            /**
             * 将可视元素添加到此容器中
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.addElement = function (element) {
                return this._getCurrentContentGroup().addElement(element);
            };
            /**
             * 将可视元素添加到此容器中
             * @param element {IVisualElement}
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.addElementAt = function (element, index) {
                return this._getCurrentContentGroup().addElementAt(element, index);
            };
            /**
             * 从此容器的子列表中删除指定的可视元素
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.removeElement = function (element) {
                return this._getCurrentContentGroup().removeElement(element);
            };
            /**
             * 从容器中的指定索引位置删除可视元素
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.removeElementAt = function (index) {
                return this._getCurrentContentGroup().removeElementAt(index);
            };
            /**
             * 删除容器中的所有子元素
             */
            p.removeAllElements = function () {
                this._getCurrentContentGroup().removeAllElements();
            };
            /**
             * 获取子元素对象在容器中的索引值
             * @param element {IVisualElement}
             * @returns {number}
             */
            p.getElementIndex = function (element) {
                return this._getCurrentContentGroup().getElementIndex(element);
            };
            /**
             * 根据索引设置子元素的显示
             * @param element {IVisualElement}
             * @param index {number}
             */
            p.setElementIndex = function (element, index) {
                this._getCurrentContentGroup().setElementIndex(element, index);
            };
            /**
             * 交换两个指定可视元素的索引
             * @param element1 {IVisualElement}
             * @param element2 {IVisualElement}
             */
            p.swapElements = function (element1, element2) {
                this._getCurrentContentGroup().swapElements(element1, element2);
            };
            /**
             * 交换容器中位于两个指定索引位置的可视元素
             * @param index1 {number}
             * @param index2 {number}
             */
            p.swapElementsAt = function (index1, index2) {
                this._getCurrentContentGroup().swapElementsAt(index1, index2);
            };
            d(p, "layout"
                /**
                 * 此容器的布局对象
                 * @member egret.gui.SkinnableContainer#layout
                 */
                ,function () {
                    return this.contentGroup != null ? this.contentGroup.layout : this.contentGroupProperties.layout;
                }
                ,function (value) {
                    if (this.contentGroup != null) {
                        this.contentGroup.layout = value;
                    }
                    else {
                        this.contentGroupProperties.layout = value;
                    }
                }
            );
            /**
             * [覆盖] 添加外观部件时调用
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.contentGroup) {
                    if (this.contentGroupProperties.layout !== undefined) {
                        this.contentGroup.layout = this.contentGroupProperties.layout;
                        this.contentGroupProperties = {};
                    }
                    if (this._placeHolderGroup) {
                        this._placeHolderGroup.removeEventListener(gui.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this);
                        this._placeHolderGroup.removeEventListener(gui.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this);
                        var sourceContent = this._placeHolderGroup._getElementsContent().concat();
                        for (var i = this._placeHolderGroup.numElements; i > 0; i--) {
                            var element = this._placeHolderGroup.removeElementAt(0);
                            element.ownerChanged(null);
                        }
                        this._removeFromDisplayList(this._placeHolderGroup);
                        this.contentGroup.elementsContent = sourceContent;
                        for (i = sourceContent.length - 1; i >= 0; i--) {
                            element = sourceContent[i];
                            element.ownerChanged(this);
                        }
                        this._placeHolderGroup = null;
                    }
                    this.contentGroup.addEventListener(gui.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this);
                    this.contentGroup.addEventListener(gui.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this);
                }
            };
            /**
             * [覆盖] 正删除外观部件的实例时调用
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                _super.prototype.partRemoved.call(this, partName, instance);
                if (instance == this.contentGroup) {
                    this.contentGroup.removeEventListener(gui.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this);
                    this.contentGroup.removeEventListener(gui.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this);
                    this.contentGroupProperties.layout = this.contentGroup.layout;
                    this.contentGroup.layout = null;
                    if (this.contentGroup.numElements > 0) {
                        this._placeHolderGroup = new gui.Group;
                        while (this.contentGroup.numElements > 0) {
                            this._placeHolderGroup.addElement(this.contentGroup.getElementAt(0));
                        }
                        this._placeHolderGroup.addEventListener(gui.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this);
                        this._placeHolderGroup.addEventListener(gui.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this);
                    }
                }
            };
            /**
             * 容器添加元素事件
             */
            p._contentGroup_elementAddedHandler = function (event) {
                event.element.ownerChanged(this);
                this.dispatchEvent(event);
            };
            /**
             * 容器移除元素事件
             */
            p._contentGroup_elementRemovedHandler = function (event) {
                event.element.ownerChanged(null);
                this.dispatchEvent(event);
            };
            return SkinnableContainer;
        })(gui.SkinnableComponent);
        gui.SkinnableContainer = SkinnableContainer;
        egret.registerClass(SkinnableContainer,"egret.gui.SkinnableContainer",["egret.gui.IVisualElementContainer","egret.gui.IVisualElement","egret.gui.ILayoutElement","egret.IEventDispatcher","egret.gui.IContainer"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Panel
         * @classdesc
         * 带有标题，内容区域的面板组件
         * @extends egret.gui.SkinnableContainer
         */
        var Panel = (function (_super) {
            __extends(Panel, _super);
            /**
             * 构造函数
             * @method egret.gui.Panel#constructor
             */
            function Panel() {
                _super.call(this);
                /**
                 * [SkinPart]标题显示对象
                 * @member egret.gui.Panel#titleDisplay
                 */
                this.titleDisplay = null;
                this._title = "";
                /**
                 * 标题内容改变
                 */
                this.titleChanged = false;
                this.touchEnabled = false;
            }
            var d = __define,c=Panel;p=c.prototype;
            d(p, "title"
                /**
                 * 标题文本内容
                 * @member egret.gui.Panel#title
                 */
                ,function () {
                    return this._title;
                }
                ,function (value) {
                    this._title = value;
                    if (this.titleDisplay)
                        this.titleDisplay.text = this.title;
                }
            );
            /**
             * [覆盖] 添加外观部件时调用
             * @param partName
             * @param instance
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.titleDisplay) {
                    this.titleDisplay.text = this.title;
                }
            };
            return Panel;
        })(gui.SkinnableContainer);
        gui.Panel = Panel;
        egret.registerClass(Panel,"egret.gui.Panel");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TitleWindow
         * @classdesc
         * 可移动窗口组件。注意，此窗口必须使用PopUpManager.addPopUp()弹出之后才能移动。
         * @extends egret.gui.Panel
         */
        var TitleWindow = (function (_super) {
            __extends(TitleWindow, _super);
            /**
             * @method egret.gui.TitleWindow#constructor
             */
            function TitleWindow() {
                _super.call(this);
                /**
                 * [SkinPart]关闭按钮
                 * @member egret.gui.TitleWindow#closeButton
                 */
                this.closeButton = null;
                /**
                 * [SkinPart]可移动区域
                 * @member egret.gui.TitleWindow#moveArea
                 */
                this.moveArea = null;
                this._showCloseButton = true;
                this._autoBackToStage = true;
                /**
                 * 鼠标按下时的偏移量
                 */
                this._offsetPointX = NaN;
                this._offsetPointY = NaN;
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onWindowMouseDown, this, true, 100);
            }
            var d = __define,c=TitleWindow;p=c.prototype;
            /**
             * 在窗体上按下时前置窗口
             */
            p.onWindowMouseDown = function (event) {
                if (this.enabled && this.isPopUp && event.target != this.closeButton) {
                    gui.PopUpManager.bringToFront(this);
                }
            };
            d(p, "showCloseButton"
                /**
                 * 是否显示关闭按钮,默认true。
                 * @member egret.gui.TitleWindow#showCloseButton
                 */
                ,function () {
                    return this._showCloseButton;
                }
                ,function (value) {
                    if (this._showCloseButton == value)
                        return;
                    this._showCloseButton = value;
                    if (this.closeButton)
                        this.closeButton.visible = this._showCloseButton;
                }
            );
            d(p, "autoBackToStage"
                /**
                 * 在拖拽窗口时，有可能把窗口完全拖出屏幕外，导致无法点中moveArea而不能拖回屏幕。
                 * 此属性为true时，将会在拖拽结束时，自动调整窗口位置，使moveArea可以被再次点中。
                 * 反之不调整。默认值为true。
                 * @member egret.gui.TitleWindow#autoBackToStage
                 */
                ,function () {
                    return this._autoBackToStage;
                }
                ,function (value) {
                    this._autoBackToStage = value;
                }
            );
            /**
             * [覆盖] 添加外观部件时调用
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.moveArea) {
                    this.moveArea.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.moveArea_mouseDownHandler, this);
                }
                else if (instance == this.closeButton) {
                    this.closeButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeButton_clickHandler, this);
                    this.closeButton.visible = this._showCloseButton;
                }
            };
            /**
             * [覆盖] 正删除外观部件的实例时调用
             * @method egret.gui.TitleWindow#partRemoved
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                _super.prototype.partRemoved.call(this, partName, instance);
                if (instance == this.moveArea)
                    this.moveArea.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.moveArea_mouseDownHandler, this);
                else if (instance == this.closeButton)
                    this.closeButton.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.closeButton_clickHandler, this);
            };
            /**
             * @method egret.gui.TitleWindow#closeButton_clickHandler
             * @param event {TouchEvent}
             */
            p.closeButton_clickHandler = function (event) {
                gui.CloseEvent.dispatchCloseEvent(this, gui.CloseEvent.CLOSE);
            };
            /**
             * 鼠标在可移动区域按下
             * @method egret.gui.TitleWindow#moveArea_mouseDownHandler
             * @param event {TouchEvent}
             */
            p.moveArea_mouseDownHandler = function (event) {
                if (this.enabled && this.isPopUp) {
                    var offsetPoint = this.globalToLocal(event.stageX, event.stageY, egret.$TempPoint);
                    this._offsetPointX = offsetPoint.x;
                    this._offsetPointY = offsetPoint.y;
                    this._UIC_Props_._includeInLayout = false;
                    gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.moveArea_mouseMoveHandler, this);
                    gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.moveArea_mouseUpHandler, this);
                    gui.UIGlobals.stage.addEventListener(egret.Event.LEAVE_STAGE, this.moveArea_mouseUpHandler, this);
                }
            };
            /**
             * 鼠标拖拽时的移动事件
             * @method egret.gui.TitleWindow#moveArea_mouseMoveHandler
             * @param event {TouchEvent}
             */
            p.moveArea_mouseMoveHandler = function (event) {
                var pos = this.globalToLocal(event.stageX, event.stageY, egret.$TempPoint);
                this.x += pos.x - this._offsetPointX;
                this.y += pos.y - this._offsetPointY;
            };
            /**
             * 鼠标在舞台上弹起事件
             * @method egret.gui.TitleWindow#moveArea_mouseUpHandler
             * @param event {Event}
             */
            p.moveArea_mouseUpHandler = function (event) {
                gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.moveArea_mouseMoveHandler, this);
                gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.moveArea_mouseUpHandler, this);
                gui.UIGlobals.stage.removeEventListener(egret.Event.LEAVE_STAGE, this.moveArea_mouseUpHandler, this);
                if (this._autoBackToStage) {
                    this.adjustPosForStage();
                }
                gui.LayoutUtil.adjustRelativeByXY(this);
                this.includeInLayout = true;
            };
            /**
             * 调整窗口位置，使其可以在舞台中被点中
             */
            p.adjustPosForStage = function () {
                if (!this.moveArea || !this.stage)
                    return;
                var pos = this.moveArea.localToGlobal(0, 0);
                var stageX = pos.x;
                var stageY = pos.y;
                if (pos.x + this.moveArea.width < 35) {
                    stageX = 35 - this.moveArea.width;
                }
                if (pos.x > this.stage.stageWidth - 20) {
                    stageX = this.stage.stageWidth - 20;
                }
                if (pos.y + this.moveArea.height < 20) {
                    stageY = 20 - this.moveArea.height;
                }
                if (pos.y > this.stage.stageHeight - 20) {
                    stageY = this.stage.stageHeight - 20;
                }
                this.x += stageX - pos.x;
                this.y += stageY - pos.y;
            };
            return TitleWindow;
        })(gui.Panel);
        gui.TitleWindow = TitleWindow;
        egret.registerClass(TitleWindow,"egret.gui.TitleWindow");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Alert
         * @classdesc
         * 弹出对话框，可能包含消息、标题、按钮（“确定”、“取消”、“是”和“否”的任意组合)。
         * @extends egret.gui.TitleWindow
         */
        var Alert = (function (_super) {
            __extends(Alert, _super);
            /**
             * 构造函数，请通过静态方法Alert.show()来创建对象实例。
             * @method egret.gui.Alert#constructor
             */
            function Alert() {
                _super.call(this);
                this._firstButtonLabel = "";
                /**
                 *
                 * @type {string}
                 * @private
                 */
                this._secondButtonLabel = "";
                /**
                 *
                 * @type {string}
                 * @private
                 */
                this._contentText = "";
                /**
                 * 对话框关闭回调函数
                 */
                this.closeHandler = null;
                /**
                 * [SkinPart]文本内容显示对象
                 * @member egret.gui.Alert#contentDisplay
                 */
                this.contentDisplay = null;
                /**
                 * [SkinPart]第一个按钮，通常是"确定"。
                 * @member egret.gui.Alert#firstButton
                 */
                this.firstButton = null;
                /**
                 * [SkinPart]第二个按钮，通常是"取消"。
                 * @member egret.gui.Alert#secondButton
                 */
                this.secondButton = null;
            }
            var d = __define,c=Alert;p=c.prototype;
            /**
             * 弹出Alert控件的静态方法。在Alert控件中选择一个按钮，将关闭该控件。
             * @method egret.gui.Alert.show
             * @param text {string} 要显示的文本内容字符串。
             * @param title {string} 对话框标题
             * @param closeHandler {Function} 按下Alert控件上的任意按钮时的回调函数。示例:closeHandler(event:CloseEvent);
             * event的detail属性包含 Alert.FIRST_BUTTON、Alert.SECOND_BUTTON和Alert.CLOSE_BUTTON。
             * @param firstButtonLabel {string} 第一个按钮上显示的文本。
             * @param secondButtonLabel {string} 第二个按钮上显示的文本，若为null，则不显示第二个按钮。
             * @param modal {boolean} 是否启用模态。即禁用弹出框以下的鼠标事件。默认true。
             * @param center {boolean} 是否居中。默认true。
             * @param thisObject {any} 回掉函数绑定的this对象
             * @returns {Alert}
             */
            Alert.show = function (text, title, closeHandler, firstButtonLabel, secondButtonLabel, modal, center, thisObject) {
                if (text === void 0) { text = ""; }
                if (title === void 0) { title = ""; }
                if (closeHandler === void 0) { closeHandler = null; }
                if (firstButtonLabel === void 0) { firstButtonLabel = "OK"; }
                if (secondButtonLabel === void 0) { secondButtonLabel = ""; }
                if (modal === void 0) { modal = true; }
                if (center === void 0) { center = true; }
                var alert = new Alert();
                alert.contentText = text;
                alert.title = title;
                alert._firstButtonLabel = firstButtonLabel;
                alert._secondButtonLabel = secondButtonLabel;
                alert.closeHandler = closeHandler;
                alert.thisObject = thisObject;
                gui.PopUpManager.addPopUp(alert, modal, center);
                return alert;
            };
            d(p, "firstButtonLabel"
                /**
                 * 第一个按钮上显示的文本
                 * @member egret.gui.Alert#firstButtonLabel
                 */
                ,function () {
                    return this._firstButtonLabel;
                }
                ,function (value) {
                    if (this._firstButtonLabel == value)
                        return;
                    this._firstButtonLabel = value;
                    if (this.firstButton)
                        this.firstButton.label = value;
                }
            );
            d(p, "secondButtonLabel"
                /**
                 * 第二个按钮上显示的文本
                 * @member egret.gui.Alert#secondButtonLabel
                 */
                ,function () {
                    return this._secondButtonLabel;
                }
                ,function (value) {
                    if (this._secondButtonLabel == value)
                        return;
                    this._secondButtonLabel = value;
                    if (this.secondButton) {
                        if (value == null || value == "")
                            this.secondButton.includeInLayout = this.secondButton.visible = (this._secondButtonLabel != "" && this._secondButtonLabel != null);
                    }
                }
            );
            d(p, "contentText"
                /**
                 * 文本内容
                 * @member egret.gui.Alert#contentText
                 */
                ,function () {
                    return this._contentText;
                }
                ,function (value) {
                    if (this._contentText == value)
                        return;
                    this._contentText = value;
                    if (this.contentDisplay)
                        this.contentDisplay.text = value;
                }
            );
            /**
             * 关闭事件
             */
            p.onClose = function (event) {
                gui.PopUpManager.removePopUp(this);
                if (this.closeHandler != null) {
                    var closeEvent = new gui.CloseEvent(gui.CloseEvent.CLOSE);
                    switch (event.currentTarget) {
                        case this.firstButton:
                            closeEvent.detail = Alert.FIRST_BUTTON;
                            break;
                        case this.secondButton:
                            closeEvent.detail = Alert.SECOND_BUTTON;
                            break;
                    }
                    this.callCloseHandler(closeEvent);
                }
            };
            /**
             * @method egret.gui.Alert#closeButton_clickHandler
             * @param event {TouchEvent}
             */
            p.closeButton_clickHandler = function (event) {
                _super.prototype.closeButton_clickHandler.call(this, event);
                gui.PopUpManager.removePopUp(this);
                var closeEvent = new gui.CloseEvent(gui.CloseEvent.CLOSE, false, false, Alert.CLOSE_BUTTON);
                this.callCloseHandler(closeEvent);
            };
            p.callCloseHandler = function (closeEvent) {
                if (this.closeHandler == null)
                    return;
                var target = this.thisObject || this;
                this.closeHandler.call(target, closeEvent);
            };
            /**
             * 添加外观部件时调用
             * @method egret.gui.Alert#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.contentDisplay) {
                    this.contentDisplay.text = this._contentText;
                }
                else if (instance == this.firstButton) {
                    this.firstButton.label = this._firstButtonLabel;
                    this.firstButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this);
                }
                else if (instance == this.secondButton) {
                    this.secondButton.label = this._secondButtonLabel;
                    this.secondButton.includeInLayout = this.secondButton.visible = (this._secondButtonLabel != "" && this._secondButtonLabel != null);
                    this.secondButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this);
                }
            };
            /**
             * 删除外观部件的实例时调用
             * @method egret.gui.Alert#partRemoved
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                _super.prototype.partRemoved.call(this, partName, instance);
                if (instance == this.firstButton) {
                    this.firstButton.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this);
                }
                else if (instance == this.secondButton) {
                    this.secondButton.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClose, this);
                }
            };
            /**
             * 当对话框关闭时，closeEvent.detail的值若等于此属性,表示被点击的按钮为firstButton。
             * @constant egret.gui.Alert.FIRST_BUTTON
             */
            Alert.FIRST_BUTTON = "firstButton";
            /**
             * 当对话框关闭时，closeEvent.detail的值若等于此属性,表示被点击的按钮为secondButton。
             * @constant egret.gui.Alert.SECOND_BUTTON
             */
            Alert.SECOND_BUTTON = "secondButton";
            /**
             * 当对话框关闭时，closeEvent.detail的值若等于此属性,表示被点击的按钮为closeButton。
             * @constant egret.gui.Alert.CLOSE_BUTTON
             */
            Alert.CLOSE_BUTTON = "closeButton";
            return Alert;
        })(gui.TitleWindow);
        gui.Alert = Alert;
        egret.registerClass(Alert,"egret.gui.Alert");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.BitmapLabel
         * @classdesc
         * 一行或多行不可编辑的位图文本控件
         * @extends egret.gui.UIComponent
         */
        var BitmapLabel = (function (_super) {
            __extends(BitmapLabel, _super);
            /**
             * @method egret.gui.Label#constructor
             */
            function BitmapLabel() {
                _super.call(this);
                this._bitmapText = null;
                this._textChanged = false;
                this._text = "";
                this.fontChanged = false;
                this._isLetterSpacingChanged = false;
                this._letterSpacing = 0;
                this._isLineSpacingChanged = false;
                this._lineSpacing = 0;
                this.createChildrenCalled = false;
                /**
                 * 上一次测量的宽度
                 */
                this.lastUnscaledWidth = NaN;
                this._padding = 0;
                this._paddingLeft = NaN;
                /**
                 *
                 * @type {number}
                 * @private
                 */
                this._paddingRight = NaN;
                /**
                 *
                 * @type {number}
                 * @private
                 */
                this._paddingTop = NaN;
                /**
                 *
                 * @type {number}
                 * @private
                 */
                this._paddingBottom = NaN;
                this.addEventListener(gui.UIEvent.UPDATE_COMPLETE, this.updateCompleteHandler, this);
            }
            var d = __define,c=BitmapLabel;p=c.prototype;
            /**
             * 一个验证阶段完成
             */
            p.updateCompleteHandler = function (event) {
                this.lastUnscaledWidth = NaN;
            };
            d(p, "text"
                ,function () {
                    return this._text;
                }
                /**
                 * @member egret.gui.BitmapLabel#text
                 * 设置或获取显示文本
                 */
                ,function (value) {
                    if (this._text == value)
                        return;
                    this._text = value;
                    this._textChanged = true;
                    this.invalidateProperties();
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "font"
                /**
                 * 位图字体标识符，可以是BitmapFont对象或者在资源表中的key。
                 * @member egret.gui.BitmapLabel#font
                 */
                ,function () {
                    return this._font;
                }
                ,function (value) {
                    if (this._font == value)
                        return;
                    this._font = value;
                    if (this.createChildrenCalled) {
                        this.parseFont();
                    }
                    else {
                        this.fontChanged = true;
                    }
                    this.invalidateProperties();
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "letterSpacing"
                ,function () {
                    return this._letterSpacing;
                }
                /**
                 * 字符之间的距离
                 * @default 0
                 * @param value
                 */
                ,function (value) {
                    this._setLetterSpacing(value);
                }
            );
            p._setLetterSpacing = function (value) {
                this._letterSpacing = value;
                this._isLetterSpacingChanged = true;
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            d(p, "lineSpacing"
                ,function () {
                    return this._lineSpacing;
                }
                /**
                 * 行与行之间的距离
                 * @default 0
                 * @param value
                 */
                ,function (value) {
                    this._setLineSpacing(value);
                }
            );
            p._setLineSpacing = function (value) {
                this._lineSpacing = value;
                this._isLineSpacingChanged = true;
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            /**
             * 创建子对象
             */
            p.createChildren = function () {
                _super.prototype.createChildren.call(this);
                if (!this._bitmapText) {
                    this.checkBitmapText();
                }
                if (this.fontChanged) {
                    this.parseFont();
                }
                this.createChildrenCalled = true;
            };
            /**
             * 解析source
             */
            p.parseFont = function () {
                this.fontChanged = false;
                var adapter = BitmapLabel.assetAdapter;
                if (!adapter) {
                    adapter = this.getAdapter();
                }
                if (!this._font) {
                    this.onFontChanged(null, null);
                }
                else {
                    adapter.getAsset(this._font, this.onFontChanged, this, null);
                }
            };
            /**
             * 获取资源适配器
             */
            p.getAdapter = function () {
                var adapter;
                try {
                    adapter = gui.$getAdapter("egret.gui.IAssetAdapter");
                }
                catch (e) {
                    adapter = new gui.DefaultAssetAdapter();
                }
                BitmapLabel.assetAdapter = adapter;
                return adapter;
            };
            /**
             * 皮肤发生改变
             */
            p.onFontChanged = function (bitmapFont, font) {
                if (font !== this._font)
                    return;
                this._bitmapText.font = bitmapFont;
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            d(p, "padding"
                /**
                 * 四个边缘的共同内边距。若单独设置了任一边缘的内边距，则该边缘的内边距以单独设置的值为准。
                 * 此属性主要用于快速设置多个边缘的相同内边距。默认值：0。
                 * @member egret.gui.BitmapLabel#padding
                 */
                ,function () {
                    return this._padding;
                }
                ,function (value) {
                    if (this._padding == value)
                        return;
                    this._padding = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "paddingLeft"
                /**
                 * 文字距离左边缘的空白像素,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.BitmapLabel#paddingLeft
                 */
                ,function () {
                    return this._paddingLeft;
                }
                ,function (value) {
                    if (this._paddingLeft == value)
                        return;
                    this._paddingLeft = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "paddingRight"
                /**
                 * 文字距离右边缘的空白像素,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.BitmapLabel#paddingRight
                 */
                ,function () {
                    return this._paddingRight;
                }
                ,function (value) {
                    if (this._paddingRight == value)
                        return;
                    this._paddingRight = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "paddingTop"
                /**
                 * 文字距离顶部边缘的空白像素,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.BitmapLabel#paddingTop
                 */
                ,function () {
                    return this._paddingTop;
                }
                ,function (value) {
                    if (this._paddingTop == value)
                        return;
                    this._paddingTop = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "paddingBottom"
                /**
                 * 文字距离底部边缘的空白像素,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.BitmapLabel#paddingBottom
                 */
                ,function () {
                    return this._paddingBottom;
                }
                ,function (value) {
                    if (this._paddingBottom == value)
                        return;
                    this._paddingBottom = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            /**
             * 计算  容器默认大小的最小值和最大值
             * @method egret.gui.BitmapLabel#measure
             */
            p.measure = function () {
                //先提交属性，防止样式发生改变导致的测量不准确问题。
                if (this._UIC_Props_._invalidatePropertiesFlag)
                    this.validateProperties();
                if (this.isSpecialCase()) {
                    if (isNaN(this.lastUnscaledWidth)) {
                        this._UIC_Props_._oldPreferWidth = NaN;
                        this._UIC_Props_._oldPreferHeight = NaN;
                    }
                    else {
                        this.measureUsingWidth(this.lastUnscaledWidth);
                        return;
                    }
                }
                var availableWidth;
                if (!isNaN(this.$getExplicitWidth())) {
                    availableWidth = this.$getExplicitWidth();
                }
                else if (this.maxWidth != 10000)
                    availableWidth = this.maxWidth;
                this.measureUsingWidth(availableWidth);
            };
            /**
             * 特殊情况，组件尺寸由父级决定，要等到父级UpdateDisplayList的阶段才能测量
             */
            p.isSpecialCase = function () {
                return (!isNaN(this.percentWidth) || (!isNaN(this.left) && !isNaN(this.right))) && isNaN(this.$getExplicitWidth()) && isNaN(this.percentHeight);
            };
            /**
             * 使用指定的宽度进行测量
             */
            p.measureUsingWidth = function (w) {
                if (this._textChanged) {
                    this._bitmapText.text = this._text;
                }
                if (this._isLetterSpacingChanged) {
                    this._bitmapText.letterSpacing = this._letterSpacing;
                }
                if (this._isLineSpacingChanged) {
                    this._bitmapText.lineSpacing = this._lineSpacing;
                }
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                this._bitmapText.width = NaN;
                this._bitmapText.height = NaN;
                if (!isNaN(w)) {
                    this._bitmapText.width = w - paddingL - paddingR;
                    this.measuredWidth = Math.ceil(this._bitmapText.width);
                    this.measuredHeight = Math.ceil(this._bitmapText.height);
                }
                else {
                    this.measuredWidth = Math.ceil(this._bitmapText.width);
                    this.measuredHeight = Math.ceil(this._bitmapText.height);
                }
                this.measuredWidth += paddingL + paddingR;
                this.measuredHeight += paddingT + paddingB;
            };
            /**
             * 通过设置此容器子项的位置和大小来响应大小更改
             * @method egret.gui.BitmapLabel#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                if (!this._bitmapText)
                    return;
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                this._bitmapText.x = paddingL;
                this._bitmapText.y = paddingT;
                if (this.isSpecialCase()) {
                    var firstTime = isNaN(this.lastUnscaledWidth) || this.lastUnscaledWidth != unscaledWidth;
                    this.lastUnscaledWidth = unscaledWidth;
                    if (firstTime) {
                        this._UIC_Props_._oldPreferWidth = NaN;
                        this._UIC_Props_._oldPreferHeight = NaN;
                        this.invalidateSize();
                        return;
                    }
                }
                //防止在父级validateDisplayList()阶段改变的text属性值，
                //接下来直接调用自身的updateDisplayList()而没有经过measure(),使用的测量尺寸是上一次的错误值。
                if (this._UIC_Props_._invalidateSizeFlag)
                    this.validateSize();
                if (!this._bitmapText.visible)
                    this._bitmapText.visible = true;
                this._bitmapText.width = unscaledWidth - paddingL - paddingR;
                var unscaledTextHeight = unscaledHeight - paddingT - paddingB;
                this._bitmapText.height = unscaledTextHeight;
            };
            p.checkBitmapText = function () {
                if (this._bitmapText)
                    return;
                this._bitmapText = new egret.BitmapText();
                this._bitmapText.text = this._text;
                this._bitmapText.letterSpacing = this._letterSpacing;
                this._bitmapText.lineSpacing = this._lineSpacing;
                this._textChanged = false;
                this._isLetterSpacingChanged = false;
                this._isLineSpacingChanged = false;
                this._addToDisplayList(this._bitmapText);
            };
            /**
             * 处理对组件设置的属性
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (!this._bitmapText) {
                    this.checkBitmapText();
                }
                if (this._textChanged) {
                    this._bitmapText.text = this._text;
                    this._textChanged = false;
                }
                if (this._isLetterSpacingChanged) {
                    this._bitmapText.letterSpacing = this._letterSpacing;
                    this._isLetterSpacingChanged = false;
                }
                if (this._isLineSpacingChanged) {
                    this._bitmapText.lineSpacing = this._lineSpacing;
                    this._isLineSpacingChanged = false;
                }
            };
            return BitmapLabel;
        })(gui.UIComponent);
        gui.BitmapLabel = BitmapLabel;
        egret.registerClass(BitmapLabel,"egret.gui.BitmapLabel",["egret.gui.IDisplayText","egret.gui.IUIComponent","egret.gui.IVisualElement","egret.gui.ILayoutElement","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ButtonBase
         * @classdesc
         * 按钮组件基类
         * @extends egret.gui.SkinnableComponent
         */
        var ButtonBase = (function (_super) {
            __extends(ButtonBase, _super);
            /**
             * 构造函数
             * @method egret.gui.ButtonBase#constructor
             */
            function ButtonBase() {
                _super.call(this);
                /**
                 * 已经开始过不断抛出buttonDown事件的标志
                 */
                this._downEventFired = false;
                /**
                 * 重发buttonDown事件计时器
                 */
                this.autoRepeatTimer = null;
                /**
                 * [SkinPart]按钮上的文本标签
                 * @member egret.gui.ButtonBase#labelDisplay
                 */
                this.labelDisplay = null;
                this._autoRepeat = false;
                this._repeatDelay = 35;
                this._repeatInterval = 35;
                this._hovered = false;
                this._keepDown = false;
                this._label = "";
                this._mouseCaptured = false;
                this._stickyHighlighting = false;
                this.touchChildren = false;
                this.addHandlers();
            }
            var d = __define,c=ButtonBase;p=c.prototype;
            d(p, "autoRepeat"
                /**
                 * 指定在用户按住鼠标按键时是否重复分派 buttonDown 事件。
                 * @member egret.gui.ButtonBase#autoRepeat
                 */
                ,function () {
                    return this._autoRepeat;
                }
                ,function (value) {
                    if (value == this._autoRepeat)
                        return;
                    this._autoRepeat = value;
                    this.checkAutoRepeatTimerConditions(this.isDown());
                }
            );
            d(p, "repeatDelay"
                /**
                 * 在第一个 buttonDown 事件之后，以及相隔每个 repeatInterval 重复一次 buttonDown 事件之前，需要等待的毫秒数。
                 * @member egret.gui.ButtonBase#repeatDelay
                 */
                ,function () {
                    return this._repeatDelay;
                }
                ,function (value) {
                    this._repeatDelay = value;
                }
            );
            d(p, "repeatInterval"
                /**
                 * 用户在按钮上按住鼠标时，buttonDown 事件之间相隔的毫秒数。
                 * @member egret.gui.ButtonBase#repeatInterval
                 */
                ,function () {
                    return this._repeatInterval;
                }
                ,function (value) {
                    this._repeatInterval = value;
                }
            );
            d(p, "hovered"
                /**
                 * 指示鼠标指针是否位于按钮上。
                 * @member egret.gui.ButtonBase#hovered
                 */
                ,function () {
                    return this._hovered;
                }
                ,function (value) {
                    if (value == this._hovered)
                        return;
                    this._hovered = value;
                    this.invalidateSkinState();
                    this.checkButtonDownConditions();
                }
            );
            /**
             * 强制让按钮停在鼠标按下状态,此方法不会导致重复抛出buttonDown事件,仅影响皮肤State。
             * @method egret.gui.ButtonBase#_keepDown
             * @param down {boolean} 是否按下
             */
            p._setKeepDown = function (down) {
                if (this._keepDown == down)
                    return;
                this._keepDown = down;
                this.invalidateSkinState();
            };
            d(p, "label"
                /**
                 * 要在按钮上显示的文本
                 * @member egret.gui.ButtonBase#label
                 */
                ,function () {
                    return this._getLabel();
                }
                ,function (value) {
                    this._setLabel(value);
                }
            );
            p._getLabel = function () {
                if (this.labelDisplay) {
                    return this.labelDisplay.text;
                }
                else {
                    return this._label;
                }
            };
            p._setLabel = function (value) {
                this._label = value;
                if (this.labelDisplay) {
                    this.labelDisplay.text = value;
                }
            };
            d(p, "mouseCaptured"
                /**
                 * 指示第一次分派 MouseEvent.MOUSE_DOWN 时，是否按下鼠标以及鼠标指针是否在按钮上。
                 * @member egret.gui.ButtonBase#mouseCaptured
                 */
                ,function () {
                    return this._mouseCaptured;
                }
                ,function (value) {
                    if (value == this._mouseCaptured)
                        return;
                    this._mouseCaptured = value;
                    this.invalidateSkinState();
                    if (!value)
                        this.removeStageMouseHandlers();
                    this.checkButtonDownConditions();
                }
            );
            d(p, "stickyHighlighting"
                /**
                 * 如果为 false，则按钮会在用户按下它时显示其鼠标按下时的外观，但在用户将鼠标拖离它时将改为显示鼠标经过的外观。
                 * 如果为 true，则按钮会在用户按下它时显示其鼠标按下时的外观，并在用户将鼠标拖离时继续显示此外观。
                 * @member egret.gui.ButtonBase#stickyHighlighting
                 */
                ,function () {
                    return this._stickyHighlighting;
                }
                ,function (value) {
                    if (value == this._stickyHighlighting)
                        return;
                    this._stickyHighlighting = value;
                    this.invalidateSkinState();
                    this.checkButtonDownConditions();
                }
            );
            /**
             * 开始抛出buttonDown事件
             */
            p.checkButtonDownConditions = function () {
                var isCurrentlyDown = this.isDown();
                if (this._downEventFired != isCurrentlyDown) {
                    if (isCurrentlyDown) {
                        gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.BUTTON_DOWN);
                    }
                    this._downEventFired = isCurrentlyDown;
                    this.checkAutoRepeatTimerConditions(isCurrentlyDown);
                }
            };
            /**
             * 添加鼠标事件监听
             * @method egret.gui.ButtonBase#addHandlers
             */
            p.addHandlers = function () {
                this.addEventListener(egret.TouchEvent.TOUCH_ROLL_OVER, this.mouseEventHandler, this);
                this.addEventListener(egret.TouchEvent.TOUCH_ROLL_OUT, this.mouseEventHandler, this);
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.mouseEventHandler, this);
                this.addEventListener(egret.TouchEvent.TOUCH_END, this.mouseEventHandler, this);
                this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.mouseEventHandler, this);
            };
            /**
             * 添加舞台鼠标弹起事件监听
             */
            p.addStageMouseHandlers = function () {
                gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                gui.UIGlobals.stage.addEventListener(egret.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this);
            };
            /**
             * 移除舞台鼠标弹起事件监听
             */
            p.removeStageMouseHandlers = function () {
                gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                gui.UIGlobals.stage.removeEventListener(egret.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this);
            };
            /**
             * 按钮是否是按下的状态
             */
            p.isDown = function () {
                if (!this.enabled)
                    return false;
                if (this.mouseCaptured && (this.hovered || this.stickyHighlighting))
                    return true;
                return false;
            };
            /**
             * 检查需要启用还是关闭重发计时器
             */
            p.checkAutoRepeatTimerConditions = function (buttonDown) {
                var needsTimer = this.autoRepeat && buttonDown;
                var hasTimer = this.autoRepeatTimer != null;
                if (needsTimer == hasTimer)
                    return;
                if (needsTimer)
                    this.startTimer();
                else
                    this.stopTimer();
            };
            /**
             * 启动重发计时器
             */
            p.startTimer = function () {
                this.autoRepeatTimer = new egret.Timer(1);
                this.autoRepeatTimer.delay = this._repeatDelay;
                this.autoRepeatTimer.addEventListener(egret.TimerEvent.TIMER, this.autoRepeat_timerDelayHandler, this);
                this.autoRepeatTimer.start();
            };
            /**
             * 停止重发计时器
             */
            p.stopTimer = function () {
                this.autoRepeatTimer.stop();
                this.autoRepeatTimer = null;
            };
            /**
             * 鼠标事件处理
             * @method egret.gui.ButtonBase#mouseEventHandler
             * @param event {Event}
             */
            p.mouseEventHandler = function (event) {
                var touchEvent = event;
                switch (event.type) {
                    case egret.TouchEvent.TOUCH_BEGIN: {
                        this.addStageMouseHandlers();
                        //if(InteractionMode.mode==InteractionMode.TOUCH)
                        //    this.hovered = true;
                        this.mouseCaptured = true;
                        this.hovered = true;
                        break;
                    }
                    case egret.TouchEvent.TOUCH_END: {
                        if (event.target == this) {
                            this.hovered = true;
                            if (this.mouseCaptured) {
                                this.buttonReleased();
                                this.mouseCaptured = false;
                            }
                        }
                        break;
                    }
                    case egret.TouchEvent.TOUCH_TAP: {
                        if (!this.enabled)
                            event.stopImmediatePropagation();
                        else
                            this.clickHandler(event);
                        return;
                    }
                }
            };
            /**
             * 按钮弹起事件
             * @method egret.gui.ButtonBase#buttonReleased
             */
            p.buttonReleased = function () {
            };
            /**
             * 按钮点击事件
             * @method egret.gui.ButtonBase#clickHandler
             * @param event {TouchEvent}
             */
            p.clickHandler = function (event) {
            };
            /**
             * 舞台上鼠标弹起事件
             */
            p.stage_mouseUpHandler = function (event) {
                if (event.target == this)
                    return;
                this.mouseCaptured = false;
                this.hovered = false;
            };
            /**
             * 自动重发计时器首次延迟结束事件
             */
            p.autoRepeat_timerDelayHandler = function (event) {
                this.autoRepeatTimer.reset();
                this.autoRepeatTimer.removeEventListener(egret.TimerEvent.TIMER, this.autoRepeat_timerDelayHandler, this);
                this.autoRepeatTimer.delay = this._repeatInterval;
                this.autoRepeatTimer.addEventListener(egret.TimerEvent.TIMER, this.autoRepeat_timerHandler, this);
                this.autoRepeatTimer.start();
            };
            /**
             * 自动重发buttonDown事件
             */
            p.autoRepeat_timerHandler = function (event) {
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.BUTTON_DOWN);
            };
            /**
             * 返回要应用到外观的状态的名称
             * @method egret.gui.ButtonBase#getCurrentSkinState
             * @returns {string}
             */
            p.getCurrentSkinState = function () {
                if (!this.enabled)
                    return _super.prototype.getCurrentSkinState.call(this);
                if (this.isDown() || this._keepDown)
                    return "down";
                //if (InteractionMode.mode==InteractionMode.MOUSE&&(this.hovered || this.mouseCaptured))
                //	return "over";
                return "up";
            };
            /**
             * 添加外观部件时调用
             * @param partName
             * @param instance
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.labelDisplay) {
                    this.labelDisplay.text = this._label;
                }
            };
            return ButtonBase;
        })(gui.SkinnableComponent);
        gui.ButtonBase = ButtonBase;
        egret.registerClass(ButtonBase,"egret.gui.ButtonBase");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Button
         * @classdesc
         * 按钮控件
         * @extends egret.gui.ButtonBase
         */
        var Button = (function (_super) {
            __extends(Button, _super);
            /**
             * @method egret.gui.Button#constructor
             */
            function Button() {
                _super.call(this);
                /**
                 * [SkinPart]按钮上的文本标签
                 * @member egret.gui.ButtonBase#labelDisplay
                 */
                this.iconDisplay = null;
                this._icon = null;
            }
            var d = __define,c=Button;p=c.prototype;
            d(p, "icon"
                /**
                 * 要在按钮上显示的图标
                 * @member egret.gui.ButtonBase#icon
                 */
                ,function () {
                    return this._getIcon();
                }
                ,function (value) {
                    this._setIcon(value);
                }
            );
            /**
             *
             * @returns {any}
             * @private
             */
            p._getIcon = function () {
                if (this.iconDisplay) {
                    return this.iconDisplay.source;
                }
                else {
                    return this._icon;
                }
            };
            /**
             *
             * @param value
             * @private
             */
            p._setIcon = function (value) {
                this._icon = value;
                if (this.iconDisplay) {
                    this.iconDisplay.source = value;
                }
            };
            /**
             * 添加外观部件时调用
             * @method egret.gui.ButtonBase#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.iconDisplay) {
                    this.iconDisplay.source = this._icon;
                }
            };
            return Button;
        })(gui.ButtonBase);
        gui.Button = Button;
        egret.registerClass(Button,"egret.gui.Button");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Skin
         * @classdesc
         * 含有视图状态功能的皮肤基类。
         * @extends egret.EventDispatcher
         * @implements egret.gui.IStateClient
         * @implements egret.gui.ISkin
         * @implements egret.gui.IContainer
         */
        var Skin = (function (_super) {
            __extends(Skin, _super);
            /**
             * 构造函数
             * @method egret.gui.Skin#constructor
             */
            function Skin() {
                _super.call(this);
                /**
                 * 组件的最大测量宽度,仅影响measuredWidth属性的取值范围。
                 * @member egret.gui.Skin#maxWidth
                 */
                this.maxWidth = 10000;
                /**
                 * 组件的最小测量宽度,此属性设置为大于maxWidth的值时无效。仅影响measuredWidth属性的取值范围。
                 * @member egret.gui.Skin#minWidth
                 */
                this.minWidth = 0;
                /**
                 * 组件的最大测量高度,仅影响measuredHeight属性的取值范围。
                 * @member egret.gui.Skin#maxHeight
                 */
                this.maxHeight = 10000;
                /**
                 * 组件的最小测量高度,此属性设置为大于maxHeight的值时无效。仅影响measuredHeight属性的取值范围。
                 * @member egret.gui.Skin#minHeight
                 */
                this.minHeight = 0;
                this._hasWidthSet = false;
                this._width = NaN;
                this._hasHeightSet = false;
                this._height = NaN;
                /**
                 * 组件的默认宽度（以像素为单位）。此值由 measure() 方法设置。
                 * @member egret.gui.Skin#measuredWidth
                 */
                this._measuredWidth = 0;
                /**
                 * 组件的默认高度（以像素为单位）。此值由 measure() 方法设置。
                 * @member egret.gui.Skin#measuredHeight
                 */
                this.measuredHeight = 0;
                this._initialized = false;
                this._hostComponent = null;
                this._elementsContent = [];
                this.skinLayout = null;
                //========================state相关函数===============start=========================
                this._states = [];
                /**
                 * 播放过渡效果的标志
                 */
                this.playStateTransition = true;
                /**
                 * 当前视图状态发生改变的标志
                 */
                this.currentStateChanged = false;
                this._currentState = null;
                /**
                 * 存储还未验证的视图状态
                 */
                this.requestedCurrentState = null;
                this.initialized = false;
                this.skinLayout = new gui.SkinBasicLayout();
                this.skinLayout.target = this;
            }
            var d = __define,c=Skin;p=c.prototype;
            d(p, "width"
                /**
                 * 组件宽度,默认值为NaN,设置为NaN将使用组件的measure()方法自动计算尺寸
                 * @member egret.gui.Skin#width
                 */
                ,function () {
                    return this._width;
                }
                ,function (value) {
                    if (this._width == value)
                        return;
                    this._width = value;
                    this._hasWidthSet = egret.NumberUtils.isNumber(value);
                }
            );
            d(p, "height"
                /**
                 * 组件高度,默认值为NaN,设置为NaN将使用组件的measure()方法自动计算尺寸
                 * @member egret.gui.Skin#height
                 */
                ,function () {
                    return this._height;
                }
                ,function (value) {
                    if (this._height == value)
                        return;
                    this._height = value;
                    this._hasHeightSet = egret.NumberUtils.isNumber(value);
                }
            );
            d(p, "measuredWidth"
                ,function () {
                    return this._measuredWidth;
                }
                ,function (value) {
                    this._measuredWidth = value;
                }
            );
            d(p, "preferredWidth"
                ,function () {
                    return this._hasWidthSet ? this._width : this.measuredWidth;
                }
            );
            d(p, "preferredHeight"
                ,function () {
                    return this._hasHeightSet ? this._height : this.measuredHeight;
                }
            );
            /**
             * 创建子项,子类覆盖此方法以完成组件子项的初始化操作，
             * 请务必调用super.createChildren()以完成父类组件的初始化
             * @method egret.gui.Skin#createChildren
             */
            p.createChildren = function () {
            };
            d(p, "hostComponent"
                /**
                 * @member egret.gui.Skin#hostComponent
                 */
                ,function () {
                    return this._hostComponent;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    this._setHostComponent(value);
                }
            );
            /**
             *
             * @param value
             * @private
             */
            p._setHostComponent = function (value) {
                if (this._hostComponent == value)
                    return;
                var i;
                if (this._hostComponent) {
                    for (i = this._elementsContent.length - 1; i >= 0; i--) {
                        this._elementRemoved(this._elementsContent[i], i);
                    }
                }
                this._hostComponent = value;
                if (!this._initialized) {
                    this._initialized = true;
                    this.createChildren();
                }
                if (this._hostComponent) {
                    var n = this._elementsContent.length;
                    for (i = 0; i < n; i++) {
                        this._elementAdded(this._elementsContent[i], i);
                    }
                    this.initializeStates();
                    if (this.currentStateChanged) {
                        this.commitCurrentState();
                    }
                }
            };
            /**
             * 返回子元素列表
             */
            p._getElementsContent = function () {
                return this._elementsContent;
            };
            d(p, "elementsContent",undefined
                /**
                 * 设置容器子对象数组 。数组包含要添加到容器的子项列表，之前的已存在于容器中的子项列表被全部移除后添加列表里的每一项到容器。
                 * 设置该属性时会对您输入的数组进行一次浅复制操作，所以您之后对该数组的操作不会影响到添加到容器的子项列表数量。
                 */
                ,function (value) {
                    if (value == null)
                        value = [];
                    if (value == this._elementsContent)
                        return;
                    if (this._hostComponent) {
                        var i;
                        for (i = this._elementsContent.length - 1; i >= 0; i--) {
                            this._elementRemoved(this._elementsContent[i], i);
                        }
                        this._elementsContent = value.concat();
                        var n = this._elementsContent.length;
                        for (i = 0; i < n; i++) {
                            var elt = this._elementsContent[i];
                            if (elt.parent && "removeElement" in elt.parent)
                                (elt.parent).removeElement(elt);
                            else if (elt.owner && "removeElement" in elt.owner)
                                (elt.owner).removeElement(elt);
                            this._elementAdded(elt, i);
                        }
                    }
                    else {
                        this._elementsContent = value.concat();
                    }
                }
            );
            d(p, "numElements"
                /**
                 * @member egret.gui.Skin#numElements
                 */
                ,function () {
                    return this._elementsContent.length;
                }
            );
            /**
             * 如果存在视域，且传入的索引为 0，则返回该视域
             * @method egret.gui.Skin#getElementAt
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.getElementAt = function (index) {
                this.checkForRangeError(index);
                return this._elementsContent[index];
            };
            p.checkForRangeError = function (index, addingElement) {
                if (addingElement === void 0) { addingElement = false; }
                var maxIndex = this._elementsContent.length - 1;
                if (addingElement)
                    maxIndex++;
                if (index < 0 || index > maxIndex)
                    egret.$error(3011, index);
            };
            /**
             * 将可视元素添加到此容器中
             * @method egret.gui.Skin#addElement
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.addElement = function (element) {
                var index = this.numElements;
                if (element.owner == this)
                    index = this.numElements - 1;
                return this.addElementAt(element, index);
            };
            /**
             * 将可视元素添加到此容器中
             * @method egret.gui.Skin#addElementAt
             * @param element {IVisualElement}
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.addElementAt = function (element, index) {
                this.checkForRangeError(index, true);
                var host = element.owner;
                if (host == this) {
                    this.setElementIndex(element, index);
                    return element;
                }
                else if (host && "removeElement" in host) {
                    host.removeElement(element);
                }
                this._elementsContent.splice(index, 0, element);
                if (this._hostComponent)
                    this._elementAdded(element, index);
                else
                    element.ownerChanged(this);
                return element;
            };
            /**
             * 从此容器的子列表中删除指定的可视元素
             * @method egret.gui.Skin#removeElement
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.removeElement = function (element) {
                return this.removeElementAt(this.getElementIndex(element));
            };
            /**
             * 从容器中的指定索引位置删除可视元素
             * @method egret.gui.Skin#removeElementAt
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.removeElementAt = function (index) {
                this.checkForRangeError(index);
                var element = this._elementsContent[index];
                if (this._hostComponent)
                    this._elementRemoved(element, index);
                else
                    element.ownerChanged(null);
                this._elementsContent.splice(index, 1);
                return element;
            };
            /**
             * 返回可视元素的索引位置
             * @method egret.gui.Skin#getElementIndex
             * @param element {IVisualElement}
             * @returns {number}
             */
            p.getElementIndex = function (element) {
                return this._elementsContent.indexOf(element);
            };
            /**
             * 按照索引添加到容器
             * @method egret.gui.Skin#setElementIndex
             * @param element {IVisualElement}
             * @param index {number}
             */
            p.setElementIndex = function (element, index) {
                this.checkForRangeError(index);
                var oldIndex = this.getElementIndex(element);
                if (oldIndex == -1 || oldIndex == index)
                    return;
                if (this._hostComponent)
                    this._elementRemoved(element, oldIndex, false);
                this._elementsContent.splice(oldIndex, 1);
                this._elementsContent.splice(index, 0, element);
                if (this._hostComponent)
                    this._elementAdded(element, index, false);
            };
            /**
             * 添加一个显示元素到容器
             * @param element {IVisualElement}
             * @param index {number}
             * @param notifyListeners {boolean}
             */
            p._elementAdded = function (element, index, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                element.ownerChanged(this);
                if (element instanceof egret.DisplayObject) {
                    var childDO = element;
                    this._hostComponent._addToDisplayListAt(childDO, index, notifyListeners);
                }
                if (notifyListeners) {
                    if (this.hasEventListener(gui.ElementExistenceEvent.ELEMENT_ADD))
                        gui.ElementExistenceEvent.dispatchElementExistenceEvent(this, gui.ElementExistenceEvent.ELEMENT_ADD, element, index);
                }
                this._hostComponent.invalidateSize();
                this._hostComponent.invalidateDisplayList();
            };
            /**
             * 从容器移除一个显示元素
             * @param element {IVisualElement}
             * @param index {number}
             * @param notifyListeners {boolean}
             */
            p._elementRemoved = function (element, index, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                if (notifyListeners) {
                    if (this.hasEventListener(gui.ElementExistenceEvent.ELEMENT_REMOVE))
                        gui.ElementExistenceEvent.dispatchElementExistenceEvent(this, gui.ElementExistenceEvent.ELEMENT_REMOVE, element, index);
                }
                if (element instanceof egret.DisplayObject && element.parent == this._hostComponent) {
                    var childDO = element;
                    this._hostComponent._removeFromDisplayList(childDO, notifyListeners);
                }
                element.ownerChanged(null);
                this._hostComponent.invalidateSize();
                this._hostComponent.invalidateDisplayList();
            };
            /**
             * 测量组件尺寸
             * @method egret.gui.Skin#measure
             */
            p.measure = function () {
                this.skinLayout.measure();
                if (this.measuredWidth < this.minWidth) {
                    this.measuredWidth = this.minWidth;
                }
                if (this.measuredWidth > this.maxWidth) {
                    this.measuredWidth = this.maxWidth;
                }
                if (this.measuredHeight < this.minHeight) {
                    this.measuredHeight = this.minHeight;
                }
                if (this.measuredHeight > this.maxHeight) {
                    this.measuredHeight = this.maxHeight;
                }
            };
            /**
             * 更新显示列表
             * @method egret.gui.Skin#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                this.skinLayout.updateDisplayList(unscaledWidth, unscaledHeight);
            };
            d(p, "states"
                /**
                 * 为此组件定义的视图状态。
                 * @member egret.StateClientHelper#states
                 */
                ,function () {
                    return this._states;
                }
                ,function (value) {
                    this._setStates(value);
                }
            );
            p._setStates = function (value) {
                if (!value)
                    value = [];
                if (typeof (value[0]) == "string") {
                    var length = value.length;
                    for (var i = 0; i < length; i++) {
                        var state = new gui.State(value[i], []);
                        value[i] = state;
                    }
                }
                this._states = value;
                this.currentStateChanged = true;
                this.requestedCurrentState = this._currentState;
                if (!this.hasState(this.requestedCurrentState)) {
                    this.requestedCurrentState = this.getDefaultState();
                }
            };
            d(p, "transitions"
                /**
                 *  一个 Transition 对象 Array，其中的每个 Transition 对象都定义一组效果，
                 * 用于在视图状态发生更改时播放。
                 */
                ,function () {
                    return this._transitions;
                }
                ,function (value) {
                    this._transitions = value;
                }
            );
            d(p, "currentState"
                /**
                 * 组件的当前视图状态。将其设置为 "" 或 null 可将组件重置回其基本状态。
                 * @member egret.StateClientHelper#currentState
                 */
                ,function () {
                    if (this.currentStateChanged)
                        return this.requestedCurrentState;
                    return this._currentState ? this._currentState : this.getDefaultState();
                }
                ,function (value) {
                    if (!value)
                        value = this.getDefaultState();
                    if (value != this.currentState && value && this.currentState) {
                        this.requestedCurrentState = value;
                        this.currentStateChanged = true;
                        if (this._hostComponent) {
                            this.commitCurrentState();
                        }
                    }
                }
            );
            /**
             * 返回是否含有指定名称的视图状态
             * @method egret.gui.Skin#hasState
             * @param stateName {string}
             * @returns {boolean}
             */
            p.hasState = function (stateName) {
                return (this.getState(stateName) != null);
            };
            /**
             * 返回默认状态
             */
            p.getDefaultState = function () {
                if (this._states.length > 0) {
                    return this._states[0].name;
                }
                return null;
            };
            /**
             * 应用当前的视图状态。子类覆盖此方法在视图状态发生改变时执行相应更新操作。
             * @method egret.gui.Skin#commitCurrentState
             */
            p.commitCurrentState = function () {
                if (!this.currentStateChanged)
                    return;
                this.currentStateChanged = false;
                var destination = this.getState(this.requestedCurrentState);
                if (!destination) {
                    this.requestedCurrentState = this.getDefaultState();
                }
                var nextTransition;
                if (this.playStateTransition) {
                    nextTransition = this.getTransition(this._currentState, this.requestedCurrentState);
                }
                var prevTransitionFraction;
                var prevTransitionEffect;
                if (this._currentTransition) {
                    this._currentTransition.effect.removeEventListener(gui.EffectEvent.EFFECT_END, this.transition_effectEndHandler, this);
                    if (nextTransition && this._currentTransition.interruptionBehavior == gui.InterruptionBehavior.STOP) {
                        prevTransitionEffect = this._currentTransition.effect;
                        prevTransitionEffect.stop();
                    }
                    else {
                        if (this._currentTransition.autoReverse && this.transitionFromState == this.requestedCurrentState && this.transitionToState == this._currentState) {
                            if (this._currentTransition.effect.duration == 0)
                                prevTransitionFraction = 0;
                            else
                                prevTransitionFraction = this._currentTransition.effect.playheadTime / this.getTotalDuration(this._currentTransition.effect);
                        }
                        this._currentTransition.effect.end();
                    }
                    this._currentTransition = null;
                }
                var oldState = this._currentState ? this._currentState : "";
                if (this.hasEventListener(gui.StateChangeEvent.CURRENT_STATE_CHANGING)) {
                    gui.StateChangeEvent.dispatchStateChangeEvent(this, gui.StateChangeEvent.CURRENT_STATE_CHANGING, oldState, this.requestedCurrentState ? this.requestedCurrentState : "");
                }
                this.removeState(this._currentState);
                this._currentState = this.requestedCurrentState;
                if (this._currentState) {
                    this.applyState(this._currentState);
                }
                if (this.hasEventListener(gui.StateChangeEvent.CURRENT_STATE_CHANGE)) {
                    gui.StateChangeEvent.dispatchStateChangeEvent(this, gui.StateChangeEvent.CURRENT_STATE_CHANGE, oldState, this._currentState ? this._currentState : "");
                }
                if (nextTransition) {
                    var reverseTransition = nextTransition && nextTransition.autoReverse && (nextTransition.toState == oldState || nextTransition.fromState == this._currentState);
                    gui.UIGlobals._layoutManager.validateNow();
                    this._currentTransition = nextTransition;
                    this.transitionFromState = oldState;
                    this.transitionToState = this._currentState;
                    nextTransition.effect.addEventListener(gui.EffectEvent.EFFECT_END, this.transition_effectEndHandler, this);
                    nextTransition.effect.play(null, reverseTransition);
                    if (!isNaN(prevTransitionFraction) && nextTransition.effect.duration != 0) {
                        nextTransition.effect.playheadTime = (1 - prevTransitionFraction) * this.getTotalDuration(nextTransition.effect);
                    }
                }
                else {
                    if (this.hasEventListener(gui.StateChangeEvent.STATE_CHANGE_COMPLETE)) {
                        gui.StateChangeEvent.dispatchStateChangeEvent(this, gui.StateChangeEvent.STATE_CHANGE_COMPLETE, oldState, this._currentState);
                    }
                }
            };
            p.transition_effectEndHandler = function (event) {
                this._currentTransition = null;
                if (this.hasEventListener(gui.StateChangeEvent.STATE_CHANGE_COMPLETE)) {
                    gui.StateChangeEvent.dispatchStateChangeEvent(this, gui.StateChangeEvent.STATE_CHANGE_COMPLETE, this.transitionFromState, this.transitionToState);
                }
            };
            /**
             * 通过名称返回视图状态
             */
            p.getState = function (stateName) {
                if (!stateName)
                    return null;
                var states = this._states;
                var length = states.length;
                for (var i = 0; i < length; i++) {
                    var state = states[i];
                    if (state.name == stateName)
                        return state;
                }
                return null;
            };
            /**
             * 移除指定的视图状态以及所依赖的所有父级状态，除了与新状态的共同状态外
             */
            p.removeState = function (stateName) {
                var state = this.getState(stateName);
                if (state) {
                    var overrides = state.overrides;
                    for (var i = overrides.length - 1; i >= 0; i--)
                        overrides[i].remove(this);
                }
            };
            /**
             * 应用新状态
             */
            p.applyState = function (stateName) {
                var state = this.getState(stateName);
                if (state) {
                    var overrides = state.overrides;
                    var length = overrides.length;
                    for (var i = 0; i < length; i++)
                        overrides[i].apply((this));
                }
            };
            /**
             * 初始化所有视图状态
             * @method egret.StateClientHelper#initializeStates
             */
            p.initializeStates = function () {
                if (this.initialized)
                    return;
                this.initialized = true;
                var states = this._states;
                var length = states.length;
                for (var i = 0; i < length; i++) {
                    var state = (states[i]);
                    state.initialize(this);
                }
            };
            /**
             *  获取两个状态之间的过渡
             */
            p.getTransition = function (oldState, newState) {
                var result = null;
                var priority = 0;
                if (!this.transitions)
                    return null;
                if (!oldState)
                    oldState = "";
                if (!newState)
                    newState = "";
                for (var i = 0; i < this.transitions.length; i++) {
                    var t = this.transitions[i];
                    if (t.fromState == "*" && t.toState == "*" && priority < 1) {
                        result = t;
                        priority = 1;
                    }
                    else if (t.toState == oldState && t.fromState == "*" && t.autoReverse && priority < 2) {
                        result = t;
                        priority = 2;
                    }
                    else if (t.toState == "*" && t.fromState == newState && t.autoReverse && priority < 3) {
                        result = t;
                        priority = 3;
                    }
                    else if (t.toState == oldState && t.fromState == newState && t.autoReverse && priority < 4) {
                        result = t;
                        priority = 4;
                    }
                    else if (t.fromState == oldState && t.toState == "*" && priority < 5) {
                        result = t;
                        priority = 5;
                    }
                    else if (t.fromState == "*" && t.toState == newState && priority < 6) {
                        result = t;
                        priority = 6;
                    }
                    else if (t.fromState == oldState && t.toState == newState && priority < 7) {
                        result = t;
                        priority = 7;
                        break;
                    }
                }
                if (result && !result.effect)
                    result = null;
                return result;
            };
            /**
             * 效果的总持续时间
             */
            p.getTotalDuration = function (effect) {
                var duration = 0;
                var effectObj = effect;
                if (effect instanceof gui.CompositeEffect) {
                    duration = effectObj.compositeDuration;
                }
                else {
                    duration = effect.duration;
                }
                var repeatDelay = ("repeatDelay" in effect) ? effectObj.repeatDelay : 0;
                var repeatCount = ("repeatCount" in effect) ? effectObj.repeatCount : 0;
                var startDelay = ("startDelay" in effect) ? effectObj.startDelay : 0;
                duration = duration * repeatCount + (repeatDelay * (repeatCount - 1)) + startDelay;
                return duration;
            };
            return Skin;
        })(egret.EventDispatcher);
        gui.Skin = Skin;
        egret.registerClass(Skin,"egret.gui.Skin",["egret.gui.IStateClient","egret.IEventDispatcher","egret.gui.ISkin","egret.gui.IContainer"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.StateSkin
         * @classdesc
         * 按钮组件的快速皮肤模板，能够快速制定哪个状态显示那个资源，实例化一次性专用的按钮皮肤。
         * @extends egret.gui.Skin
         */
        var ButtonSkin = (function (_super) {
            __extends(ButtonSkin, _super);
            /**
             * 构造函数
             * @method egret.gui.StateSkin#constructor
             * @param upSkinName {any} 按钮弹起状态的要显示的资源名
             * @param downSkinName {any} 按钮按下状态的要显示的资源名
             * @param disabledSkinName {any} 按钮禁用状态的要显示的资源名
             */
            function ButtonSkin(upSkinName, downSkinName, disabledSkinName) {
                if (upSkinName === void 0) { upSkinName = null; }
                if (downSkinName === void 0) { downSkinName = null; }
                if (disabledSkinName === void 0) { disabledSkinName = null; }
                _super.call(this);
                this.labelDisplay = new egret.gui.Label();
                this.iconDisplay = new egret.gui.UIAsset();
                var stateMap = {};
                stateMap["up"] = upSkinName;
                stateMap["down"] = downSkinName;
                stateMap["disabled"] = disabledSkinName;
                this.stateMap = stateMap;
                this._setStates(["up", "down", "disabled"]);
            }
            var d = __define,c=ButtonSkin;p=c.prototype;
            d(p, "skinParts"
                ,function () {
                    return ButtonSkin._skinParts;
                }
            );
            /**
             * 创建容器的子对象
             * @inheritDoc
             */
            p.createChildren = function () {
                _super.prototype.createChildren.call(this);
                var asset = new gui.UIAsset();
                asset.left = asset.top = asset.bottom = asset.right = 0;
                this.addElement(asset);
                this.backgroundAsset = asset;
                this.iconDisplay.includeInLayout = false;
                this.addElement(this.iconDisplay);
                this.labelDisplay.includeInLayout = false;
                this.labelDisplay.paddingLeft = 5;
                this.labelDisplay.paddingRight = 5;
                this.addElement(this.labelDisplay);
            };
            /**
             * @inheritDoc
             */
            p.commitCurrentState = function () {
                _super.prototype.commitCurrentState.call(this);
                var state = this.currentState;
                var source = this.stateMap[state];
                if (source) {
                    this.backgroundAsset.source = this.stateMap[state];
                }
            };
            /**
             * 计算 Panel 容器默认大小的最小值和最大值
             */
            p.measure = function () {
                _super.prototype.measure.call(this);
                var w = this.iconDisplay.preferredWidth + this.labelDisplay.preferredWidth + 20;
                var h = Math.max(this.iconDisplay.preferredHeight, this.labelDisplay.preferredHeight) + 20;
                if (w > this.measuredWidth) {
                    if (w < this.minWidth) {
                        w = this.minWidth;
                    }
                    if (w > this.maxWidth) {
                        w = this.maxWidth;
                    }
                    this.measuredWidth = w;
                }
                if (h > this.measuredHeight) {
                    if (h < this.minHeight) {
                        h = this.minHeight;
                    }
                    if (h > this.maxHeight) {
                        h = this.maxHeight;
                    }
                    this.measuredHeight = h;
                }
            };
            /**
             * 通过设置此容器子项的位置和大小来响应大小更改
             * @param unscaledWidth
             * @param unscaledHeight
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                var iconWidth = this.iconDisplay.layoutBoundsWidth;
                var iconHeight = this.iconDisplay.layoutBoundsHeight;
                var labelWidth = this.labelDisplay.layoutBoundsWidth;
                var labelHeight = this.labelDisplay.layoutBoundsHeight;
                var iconX = (unscaledWidth - iconWidth - labelWidth) * 0.5;
                var iconY = (unscaledHeight - iconHeight) * 0.5;
                this.iconDisplay.setLayoutBoundsPosition(iconX, iconY);
                var labelX = iconX + iconWidth;
                var labelY = (unscaledHeight - labelHeight) * 0.5;
                this.labelDisplay.setLayoutBoundsPosition(labelX, labelY);
            };
            /**
             *
             * @type {string[]}
             * @private
             */
            ButtonSkin._skinParts = ["labelDisplay", "iconDisplay"];
            return ButtonSkin;
        })(gui.Skin);
        gui.ButtonSkin = ButtonSkin;
        egret.registerClass(ButtonSkin,"egret.gui.ButtonSkin");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ToggleButtonBase
         * @classdesc
         * 切换按钮组件基类
         * @extends egret.gui.ButtonBase
         */
        var ToggleButtonBase = (function (_super) {
            __extends(ToggleButtonBase, _super);
            /**
             * 构造函数
             * @method egret.gui.ToggleButtonBase#constructor
             */
            function ToggleButtonBase() {
                _super.call(this);
                /**
                 *
                 * @type {boolean}
                 * @private
                 */
                this._selected = false;
                /**
                 * 是否根据鼠标事件自动变换选中状态,默认true。仅框架内使用。
                 * @private
                 */
                this._autoSelected = true;
            }
            var d = __define,c=ToggleButtonBase;p=c.prototype;
            d(p, "selected"
                /**
                 * 按钮处于按下状态时为 true，而按钮处于弹起状态时为 false。
                 * @member egret.gui.ToggleButtonBase#selected
                 */
                ,function () {
                    return this._selected;
                }
                ,function (value) {
                    this._setSelected(value);
                }
            );
            /**
             *
             * @param value
             * @private
             */
            p._setSelected = function (value) {
                if (value == this._selected)
                    return;
                this._selected = value;
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.VALUE_COMMIT);
                ;
                this.invalidateSkinState();
            };
            /**
             * 返回要应用到外观的状态的名称
             * @method egret.gui.ToggleButtonBase#getCurrentSkinState
             * @returns {string}
             */
            p.getCurrentSkinState = function () {
                var state = _super.prototype.getCurrentSkinState.call(this);
                if (!this.selected) {
                    return state;
                }
                else {
                    var selectedState = state + "AndSelected";
                    var skin = this.skin;
                    if (skin && skin.hasState(selectedState)) {
                        return selectedState;
                    }
                    return state == "disabled" ? "disabled" : "down";
                }
            };
            /**
             * 当在用户单击按钮之后处理 MouseEvent.MOUSE_UP 事件时，将调用此方法
             */
            p.buttonReleased = function () {
                _super.prototype.buttonReleased.call(this);
                if (!this._autoSelected || !this.enabled)
                    return;
                this.selected = !this.selected;
                this.dispatchEventWith(egret.Event.CHANGE);
            };
            return ToggleButtonBase;
        })(gui.ButtonBase);
        gui.ToggleButtonBase = ToggleButtonBase;
        egret.registerClass(ToggleButtonBase,"egret.gui.ToggleButtonBase");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.CheckBox
         * @classdesc
         * 复选框
         * @extends egret.gui.ToggleButtonBase
         */
        var CheckBox = (function (_super) {
            __extends(CheckBox, _super);
            /**
             * 构造函数
             * @method egret.gui.CheckBox#constructor
             */
            function CheckBox() {
                _super.call(this);
            }
            var d = __define,c=CheckBox;p=c.prototype;
            return CheckBox;
        })(gui.ToggleButtonBase);
        gui.CheckBox = CheckBox;
        egret.registerClass(CheckBox,"egret.gui.CheckBox");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ClassFactory
         * @classdesc ClassFactory 实例是一个“工厂对象”，Egret 可用其生成其他类的实例，每个实例拥有相同的属性。
         * @extends egret.HashObject
         */
        var ClassFactory = (function (_super) {
            __extends(ClassFactory, _super);
            /**
             * @method egret.gui.ClassFactory#constructor
             * @param generator {any} newInstance() 方法根据工厂对象生成对象时使用的 Class。
             */
            function ClassFactory(generator) {
                if (generator === void 0) { generator = null; }
                _super.call(this);
                /**
                 * newInstance() 方法根据工厂对象生成对象时使用的 Class。
                 * @member egret.egret#generator
                 */
                this.generator = null;
                this.generator = generator;
            }
            var d = __define,c=ClassFactory;p=c.prototype;
            /**
             * 生产一个新的实例
             * @method egret.egret#newInstance
             * @returns {any}
             */
            p.newInstance = function () {
                var instance = new this.generator();
                return instance;
            };
            return ClassFactory;
        })(egret.HashObject);
        gui.ClassFactory = ClassFactory;
        egret.registerClass(ClassFactory,"egret.gui.ClassFactory",["egret.gui.IFactory"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ItemRenderer
         * @classdesc
         * 项呈示器基类
         * @extends egret.gui.ButtonBase
         * @implements egret.gui.IItemRenderer
         */
        var ItemRenderer = (function (_super) {
            __extends(ItemRenderer, _super);
            /**
             * 构造函数
             * @method egret.gui.ItemRenderer#constructor
             */
            function ItemRenderer() {
                _super.call(this);
                this.dataChangedFlag = false;
                this._data = null;
                this._selected = false;
                this._itemIndex = -1;
                this.touchChildren = true;
            }
            var d = __define,c=ItemRenderer;p=c.prototype;
            d(p, "data"
                /**
                 * @member egret.gui.ItemRenderer#data
                 */
                ,function () {
                    return this._data;
                }
                ,function (value) {
                    //这里不能加if(_data==value)return;的判断，会导致数据源无法刷新的问题
                    this._data = value;
                    if (this.initialized || this.parent) {
                        this.dataChangedFlag = false;
                        this.dataChanged();
                    }
                    else {
                        this.dataChangedFlag = true;
                        this.invalidateProperties();
                    }
                }
            );
            /**
             * 子类复写此方法以在data数据源发生改变时跟新显示列表。
             * 与直接复写_data的setter方法不同，它会确保在皮肤已经附加完成后再被调用。
             * @method egret.gui.ItemRenderer#dataChanged
             */
            p.dataChanged = function () {
            };
            d(p, "selected"
                /**
                 * @member egret.gui.ItemRenderer#selected
                 */
                ,function () {
                    return this._selected;
                }
                ,function (value) {
                    if (this._selected == value)
                        return;
                    this._selected = value;
                    this.invalidateSkinState();
                }
            );
            d(p, "itemIndex"
                /**
                 * @member egret.gui.ItemRenderer#itemIndex
                 */
                ,function () {
                    return this._itemIndex;
                }
                ,function (value) {
                    this._itemIndex = value;
                }
            );
            /**
             * 处理对组件设置的属性
             * @method egret.gui.ItemRenderer#commitProperties
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.dataChangedFlag) {
                    this.dataChangedFlag = false;
                    this.dataChanged();
                }
            };
            /**
             * 返回要应用到呈示器的状态的名称
             * @method egret.gui.ItemRenderer#getCurrentSkinState
             * @returns {string}
             */
            p.getCurrentSkinState = function () {
                if (this._selected)
                    return "down";
                return _super.prototype.getCurrentSkinState.call(this);
            };
            return ItemRenderer;
        })(gui.ButtonBase);
        gui.ItemRenderer = ItemRenderer;
        egret.registerClass(ItemRenderer,"egret.gui.ItemRenderer",["egret.gui.IItemRenderer","egret.gui.ILayoutElement","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @private
         */
        var UIComponentProperties = (function () {
            function UIComponentProperties() {
                this._id = null;
                this._isPopUp = false;
                this._owner = null;
                this._updateCompletePendingFlag = false;
                this._initialized = false;
                this._nestLevel = 0;
                this._enabled = true;
                this._uiWidth = 0;
                this._uiHeight = 0;
                this._minWidth = 0;
                this._maxWidth = 10000;
                this._minHeight = 0;
                this._maxHeight = 10000;
                this._measuredWidth = 0;
                this._measuredHeight = 0;
                this._left = NaN;
                this._right = NaN;
                this._top = NaN;
                this._bottom = NaN;
                this._horizontalCenter = NaN;
                this._verticalCenter = NaN;
                this._percentWidth = NaN;
                this._percentHeight = NaN;
                this._includeInLayout = true;
                /**
                 * 属性提交前组件旧的宽度
                 */
                this._oldWidth = NaN;
                /**
                 * 属性提交前组件旧的高度
                 */
                this._oldHeight = NaN;
                /**
                 * 属性提交前组件旧的X
                 * @member egret.gui.UIComponent#oldX
                 */
                this._oldX = NaN;
                /**
                 * 属性提交前组件旧的Y
                 * @member egret.gui.UIComponent#oldY
                 */
                this._oldY = NaN;
                /**
                 * @member egret.gui.UIComponent#_invalidatePropertiesFlag
                 */
                this._invalidatePropertiesFlag = false;
                /**
                 * @member egret.gui.UIComponent#_invalidateSizeFlag
                 */
                this._invalidateSizeFlag = false;
                /**
                 * 上一次测量的首选宽度
                 * @member egret.gui.UIComponent#_oldPreferWidth
                 */
                this._oldPreferWidth = NaN;
                /**
                 * 上一次测量的首选高度
                 * @member egret.gui.UIComponent#_oldPreferHeight
                 */
                this._oldPreferHeight = NaN;
                this._invalidateDisplayListFlag = false;
                this._validateNowFlag = false;
                /**
                 * _initialize()方法被调用过的标志。
                 */
                this._initializeCalled = false;
                /**
                 * 是否已经创建了自身的样式原型链
                 */
                this._hasOwnStyleChain = false;
                /**
                 * 样式原型链引用
                 */
                this._styleProtoChain = null;
                /**
                 * 一个性能优化的标志变量。某些子类可以设置为true显式表明自己不含有可设置样式的子项。
                 */
                this._hasNoStyleChild = false;
                /**
                 * 父级布局管理器设置了组件的宽度标志，尺寸设置优先级：自动布局>显式设置>自动测量
                 * @member egret.gui.UIComponent#_layoutWidthExplicitlySet
                 */
                this._layoutWidthExplicitlySet = false;
                /**
                 * 父级布局管理器设置了组件的高度标志，尺寸设置优先级：自动布局>显式设置>自动测量
                 * @member egret.gui.UIComponent#_layoutHeightExplicitlySet
                 */
                this._layoutHeightExplicitlySet = false;
            }
            var d = __define,c=UIComponentProperties;p=c.prototype;
            return UIComponentProperties;
        })();
        gui.UIComponentProperties = UIComponentProperties;
        egret.registerClass(UIComponentProperties,"egret.gui.UIComponentProperties");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.UIGlobals
         * @classdesc
         */
        var UIGlobals = (function () {
            function UIGlobals() {
            }
            var d = __define,c=UIGlobals;p=c.prototype;
            d(UIGlobals, "stage"
                /**
                 * 舞台引用，当第一个UIComponent添加到舞台时此属性被自动赋值
                 * @member egret.gui.UIGlobals.stage
                 */
                ,function () {
                    return UIGlobals._stage;
                }
            );
            /**
             * 初始化管理器
             * @param stage {Stage}
             */
            UIGlobals._initlize = function (stage) {
                if (UIGlobals.initlized)
                    return;
                UIGlobals._stage = stage;
                UIGlobals._layoutManager = new gui.LayoutManager();
                UIGlobals.initlized = true;
            };
            d(UIGlobals, "uiStage"
                /**
                 * 顶级应用容器
                 * @member egret.gui.UIGlobals.uiStage
                 */
                ,function () {
                    return UIGlobals._uiStage;
                }
            );
            /**
             * 已经初始化完成标志
             */
            UIGlobals.initlized = false;
            return UIGlobals;
        })();
        gui.UIGlobals = UIGlobals;
        egret.registerClass(UIGlobals,"egret.gui.UIGlobals");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.LayoutManager
         * @classdesc
         * 布局管理器
         * @extends egret.EventDispatcher
         */
        var LayoutManager = (function (_super) {
            __extends(LayoutManager, _super);
            /**
             * @method egret.gui.LayoutManager#constructor
             */
            function LayoutManager() {
                _super.call(this);
                this.targetLevel = Number.MAX_VALUE;
                /**
                 * 需要抛出组件初始化完成事件的对象
                 */
                this.updateCompleteQueue = new gui.DepthQueue();
                this.invalidatePropertiesFlag = false;
                this.invalidateClientPropertiesFlag = false;
                this.invalidatePropertiesQueue = new gui.DepthQueue();
                this.invalidateSizeFlag = false;
                this.invalidateClientSizeFlag = false;
                this.invalidateSizeQueue = new gui.DepthQueue();
                this.invalidateDisplayListFlag = false;
                this.invalidateDisplayListQueue = new gui.DepthQueue();
                /**
                 * 是否已经添加了事件监听
                 */
                this.listenersAttached = false;
            }
            var d = __define,c=LayoutManager;p=c.prototype;
            /**
             * 标记组件提交过属性
             * @method egret.gui.LayoutManager#invalidateProperties
             * @param client {ILayoutManagerClient}
             */
            p.invalidateProperties = function (client) {
                if (!this.invalidatePropertiesFlag) {
                    this.invalidatePropertiesFlag = true;
                    if (!this.listenersAttached)
                        this.attachListeners();
                }
                if (this.targetLevel <= client.nestLevel)
                    this.invalidateClientPropertiesFlag = true;
                this.invalidatePropertiesQueue.insert(client);
            };
            /**
             * 使提交的属性生效
             */
            p.validateProperties = function () {
                var client = this.invalidatePropertiesQueue.shift();
                while (client) {
                    if (client.parent) {
                        client.validateProperties();
                        if (!client.updateCompletePendingFlag) {
                            this.updateCompleteQueue.insert(client);
                            client.updateCompletePendingFlag = true;
                        }
                    }
                    client = this.invalidatePropertiesQueue.shift();
                }
                if (this.invalidatePropertiesQueue.isEmpty())
                    this.invalidatePropertiesFlag = false;
            };
            /**
             * 标记需要重新测量尺寸
             * @method egret.gui.LayoutManager#invalidateSize
             * @param client {ILayoutManagerClient}
             */
            p.invalidateSize = function (client) {
                if (!this.invalidateSizeFlag) {
                    this.invalidateSizeFlag = true;
                    if (!this.listenersAttached)
                        this.attachListeners();
                }
                if (this.targetLevel <= client.nestLevel)
                    this.invalidateClientSizeFlag = true;
                this.invalidateSizeQueue.insert(client);
            };
            /**
             * 测量属性
             */
            p.validateSize = function () {
                var client = this.invalidateSizeQueue.pop();
                while (client) {
                    if (client.parent) {
                        client.validateSize();
                        if (!client.updateCompletePendingFlag) {
                            this.updateCompleteQueue.insert(client);
                            client.updateCompletePendingFlag = true;
                        }
                    }
                    client = this.invalidateSizeQueue.pop();
                }
                if (this.invalidateSizeQueue.isEmpty())
                    this.invalidateSizeFlag = false;
            };
            /**
             * 标记需要重新测量尺寸
             * @method egret.gui.LayoutManager#invalidateDisplayList
             * @param client {ILayoutManagerClient}
             */
            p.invalidateDisplayList = function (client) {
                if (!this.invalidateDisplayListFlag) {
                    this.invalidateDisplayListFlag = true;
                    if (!this.listenersAttached)
                        this.attachListeners();
                }
                this.invalidateDisplayListQueue.insert(client);
            };
            /**
             * 测量属性
             */
            p.validateDisplayList = function () {
                var client = this.invalidateDisplayListQueue.shift();
                while (client) {
                    if (client.parent) {
                        client.validateDisplayList();
                        if (!client.updateCompletePendingFlag) {
                            this.updateCompleteQueue.insert(client);
                            client.updateCompletePendingFlag = true;
                        }
                    }
                    client = this.invalidateDisplayListQueue.shift();
                }
                if (this.invalidateDisplayListQueue.isEmpty())
                    this.invalidateDisplayListFlag = false;
            };
            /**
             * 添加事件监听
             */
            p.attachListeners = function () {
                gui.UIGlobals.stage.addEventListener(egret.Event.ENTER_FRAME, this.doPhasedInstantiationCallBack, this);
                gui.UIGlobals.stage.addEventListener(egret.Event.RENDER, this.doPhasedInstantiationCallBack, this);
                gui.UIGlobals.stage.invalidate();
                this.listenersAttached = true;
            };
            /**
             * 执行属性应用
             */
            p.doPhasedInstantiationCallBack = function (event) {
                if (event === void 0) { event = null; }
                gui.UIGlobals.stage.removeEventListener(egret.Event.ENTER_FRAME, this.doPhasedInstantiationCallBack, this);
                gui.UIGlobals.stage.removeEventListener(egret.Event.RENDER, this.doPhasedInstantiationCallBack, this);
                this.doPhasedInstantiation();
            };
            p.doPhasedInstantiation = function () {
                if (this.invalidatePropertiesFlag) {
                    this.validateProperties();
                }
                if (this.invalidateSizeFlag) {
                    this.validateSize();
                }
                if (this.invalidateDisplayListFlag) {
                    this.validateDisplayList();
                }
                if (this.invalidatePropertiesFlag || this.invalidateSizeFlag || this.invalidateDisplayListFlag) {
                    this.attachListeners();
                }
                else {
                    this.listenersAttached = false;
                    var client = this.updateCompleteQueue.pop();
                    while (client) {
                        if (!client.initialized)
                            client.initialized = true;
                        if (client.hasEventListener(gui.UIEvent.UPDATE_COMPLETE))
                            gui.UIEvent.dispatchUIEvent(client, gui.UIEvent.UPDATE_COMPLETE);
                        client.updateCompletePendingFlag = false;
                        client = this.updateCompleteQueue.pop();
                    }
                    gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.UPDATE_COMPLETE);
                }
            };
            /**
             * 立即应用所有延迟的属性
             * @method egret.gui.LayoutManager#validateNow
             */
            p.validateNow = function () {
                var infiniteLoopGuard = 0;
                while (this.listenersAttached && infiniteLoopGuard++ < 100)
                    this.doPhasedInstantiationCallBack();
            };
            /**
             * 使大于等于指定组件层级的元素立即应用属性
             * @method egret.gui.LayoutManager#validateClient
             * @param target {ILayoutManagerClient} 要立即应用属性的组件
             * @param skipDisplayList {boolean} 是否跳过更新显示列表阶段
             */
            p.validateClient = function (target, skipDisplayList) {
                if (skipDisplayList === void 0) { skipDisplayList = false; }
                var obj;
                var i = 0;
                var done = false;
                var oldTargetLevel = this.targetLevel;
                if (this.targetLevel == Number.MAX_VALUE)
                    this.targetLevel = target.nestLevel;
                while (!done) {
                    done = true;
                    obj = (this.invalidatePropertiesQueue.removeSmallestChild(target));
                    while (obj) {
                        if (obj.parent) {
                            obj.validateProperties();
                            if (!obj.updateCompletePendingFlag) {
                                this.updateCompleteQueue.insert(obj);
                                obj.updateCompletePendingFlag = true;
                            }
                        }
                        obj = (this.invalidatePropertiesQueue.removeSmallestChild(target));
                    }
                    if (this.invalidatePropertiesQueue.isEmpty()) {
                        this.invalidatePropertiesFlag = false;
                    }
                    this.invalidateClientPropertiesFlag = false;
                    obj = (this.invalidateSizeQueue.removeLargestChild(target));
                    while (obj) {
                        if (obj.parent) {
                            obj.validateSize();
                            if (!obj.updateCompletePendingFlag) {
                                this.updateCompleteQueue.insert(obj);
                                obj.updateCompletePendingFlag = true;
                            }
                        }
                        if (this.invalidateClientPropertiesFlag) {
                            obj = (this.invalidatePropertiesQueue.removeSmallestChild(target));
                            if (obj) {
                                this.invalidatePropertiesQueue.insert(obj);
                                done = false;
                                break;
                            }
                        }
                        obj = (this.invalidateSizeQueue.removeLargestChild(target));
                    }
                    if (this.invalidateSizeQueue.isEmpty()) {
                        this.invalidateSizeFlag = false;
                    }
                    this.invalidateClientPropertiesFlag = false;
                    this.invalidateClientSizeFlag = false;
                    if (!skipDisplayList) {
                        obj = (this.invalidateDisplayListQueue.removeSmallestChild(target));
                        while (obj) {
                            if (obj.parent) {
                                obj.validateDisplayList();
                                if (!obj.updateCompletePendingFlag) {
                                    this.updateCompleteQueue.insert(obj);
                                    obj.updateCompletePendingFlag = true;
                                }
                            }
                            if (this.invalidateClientPropertiesFlag) {
                                obj = (this.invalidatePropertiesQueue.removeSmallestChild(target));
                                if (obj) {
                                    this.invalidatePropertiesQueue.insert(obj);
                                    done = false;
                                    break;
                                }
                            }
                            if (this.invalidateClientSizeFlag) {
                                obj = (this.invalidateSizeQueue.removeLargestChild(target));
                                if (obj) {
                                    this.invalidateSizeQueue.insert(obj);
                                    done = false;
                                    break;
                                }
                            }
                            obj = (this.invalidateDisplayListQueue.removeSmallestChild(target));
                        }
                        if (this.invalidateDisplayListQueue.isEmpty()) {
                            this.invalidateDisplayListFlag = false;
                        }
                    }
                }
                if (oldTargetLevel == Number.MAX_VALUE) {
                    this.targetLevel = Number.MAX_VALUE;
                    if (!skipDisplayList) {
                        obj = (this.updateCompleteQueue.removeLargestChild(target));
                        while (obj) {
                            if (!obj.initialized)
                                obj.initialized = true;
                            if (obj.hasEventListener(gui.UIEvent.UPDATE_COMPLETE))
                                gui.UIEvent.dispatchUIEvent(obj, gui.UIEvent.UPDATE_COMPLETE);
                            obj.updateCompletePendingFlag = false;
                            obj = (this.updateCompleteQueue.removeLargestChild(target));
                        }
                    }
                }
            };
            return LayoutManager;
        })(egret.EventDispatcher);
        gui.LayoutManager = LayoutManager;
        egret.registerClass(LayoutManager,"egret.gui.LayoutManager");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.GroupBase
         * @classdesc
         * 自动布局容器基类
         * @extends egret.gui.UIComponent
         * @implements egret.gui.IViewport
         */
        var GroupBase = (function (_super) {
            __extends(GroupBase, _super);
            /**
             * 构造函数
             * @method egret.gui.GroupBase#constructor
             */
            function GroupBase() {
                _super.call(this);
                this._contentWidth = 0;
                this._contentHeight = 0;
                this._layout = null;
                this._clipAndEnableScrolling = false;
                this._horizontalScrollPosition = 0;
                this._verticalScrollPosition = 0;
                /**
                 * 在更新显示列表时是否需要更新布局标志
                 */
                this._layoutInvalidateDisplayListFlag = false;
                /**
                 * 在测量尺寸时是否需要测量布局的标志
                 */
                this._layoutInvalidateSizeFlag = false;
                this.touchEnabled = false;
            }
            var d = __define,c=GroupBase;p=c.prototype;
            /**
             * 如果尚未设置布局对象，则 createChildren() 会为该容器指定默认布局对象 BasicLayout
             * @method egret.gui.GroupBase#createChildren
             */
            p.createChildren = function () {
                _super.prototype.createChildren.call(this);
                if (!this._layout) {
                    this.layout = new gui.BasicLayout;
                }
            };
            d(p, "contentWidth"
                /**
                 * 视域的内容的宽度
                 * @member egret.gui.GroupBase#contentWidth
                 */
                ,function () {
                    return this._contentWidth;
                }
            );
            /**
             * 设置setContentWidth
             * @param value
             */
            p.setContentWidth = function (value) {
                if (value == this._contentWidth)
                    return;
                var oldValue = this._contentWidth;
                this._contentWidth = value;
                if (this.hasEventListener("propertyChange"))
                    gui.PropertyChangeEvent.dispatchPropertyChangeEvent(this, gui.PropertyChangeEventKind.UPDATE, "contentWidth", oldValue, value, this);
            };
            d(p, "contentHeight"
                /**
                 * 视域的内容的高度
                 * @member egret.gui.GroupBase#contentHeight
                 */
                ,function () {
                    return this._contentHeight;
                }
            );
            /**
             * 设置ContentHeight
             * @param value
             */
            p.setContentHeight = function (value) {
                if (value == this._contentHeight)
                    return;
                var oldValue = this._contentHeight;
                this._contentHeight = value;
                if (this.hasEventListener("propertyChange"))
                    gui.PropertyChangeEvent.dispatchPropertyChangeEvent(this, gui.PropertyChangeEventKind.UPDATE, "contentHeight", oldValue, value, this);
            };
            /**
             * 设置 contentWidth 和 contentHeight 属性，此方法由Layout类调用
             * @method egret.gui.GroupBase#setContentSize
             * @private
             *
             * @param width {number}
             * @param height {number}
             */
            p.setContentSize = function (width, height) {
                if ((width == this._contentWidth) && (height == this._contentHeight))
                    return;
                this.setContentWidth(width);
                this.setContentHeight(height);
            };
            d(p, "layout"
                /**
                 * 此容器的布局对象
                 * @member egret.gui.GroupBase#layout
                 */
                ,function () {
                    return this._layout;
                }
                ,function (value) {
                    this._setLayout(value);
                }
            );
            p._setLayout = function (value) {
                if (this._layout == value)
                    return;
                if (this._layout) {
                    this._layout.target = null;
                }
                this._layout = value;
                if (this._layout) {
                    this._layout.target = this;
                }
                this.invalidateSize();
                this.invalidateDisplayList();
                this.dispatchEventWith("layoutChanged");
            };
            d(p, "clipAndEnableScrolling"
                /**
                 * 如果为 true，指定将子代剪切到视区的边界。如果为 false，则容器子代会从容器边界扩展过去，而不管组件的大小规范。默认false
                 * @member egret.gui.GroupBase#clipAndEnableScrolling
                 */
                ,function () {
                    return this._clipAndEnableScrolling;
                }
                ,function (value) {
                    if (value == this._clipAndEnableScrolling)
                        return;
                    this._clipAndEnableScrolling = value;
                    if (this._clipAndEnableScrolling) {
                        this.scrollRect = new egret.Rectangle(this._horizontalScrollPosition, this._verticalScrollPosition, 400, 800);
                    }
                    else {
                        this.scrollRect = null;
                    }
                }
            );
            d(p, "horizontalScrollPosition"
                /**
                 * 可视区域水平方向起始点
                 * @member egret.gui.GroupBase#horizontalScrollPosition
                 */
                ,function () {
                    return this._horizontalScrollPosition;
                }
                ,function (value) {
                    if (value == this._horizontalScrollPosition)
                        return;
                    var oldValue = this._horizontalScrollPosition;
                    this._horizontalScrollPosition = value;
                    this.scrollPositionChanged();
                    gui.PropertyChangeEvent.dispatchPropertyChangeEvent(this, gui.PropertyChangeEventKind.UPDATE, "horizontalScrollPosition", oldValue, value, this);
                }
            );
            d(p, "verticalScrollPosition"
                /**
                 * 可视区域竖直方向起始点
                 * @member egret.gui.GroupBase#verticalScrollPosition
                 */
                ,function () {
                    return this._verticalScrollPosition;
                }
                ,function (value) {
                    if (value == this._verticalScrollPosition)
                        return;
                    var oldValue = this._verticalScrollPosition;
                    this._verticalScrollPosition = value;
                    this.scrollPositionChanged();
                    gui.PropertyChangeEvent.dispatchPropertyChangeEvent(this, gui.PropertyChangeEventKind.UPDATE, "verticalScrollPosition", oldValue, value, this);
                }
            );
            /**
             * 滚动条位置改变
             */
            p.scrollPositionChanged = function () {
                if (!this._clipAndEnableScrolling) {
                    return;
                }
                this.updateScrollRect(this.width, this.height);
                this._invalidateDisplayListExceptLayout();
                if (this._layout) {
                    this._layout.scrollPositionChanged();
                }
            };
            /**
             * 更新可视区域
             * @param w {number}
             * @param h {number}
             */
            p.updateScrollRect = function (w, h) {
                var rect = this.scrollRect;
                if (this._clipAndEnableScrolling) {
                    if (rect) {
                        rect.x = this._horizontalScrollPosition;
                        rect.y = this._verticalScrollPosition;
                        rect.width = w;
                        rect.height = h;
                        this.scrollRect = rect;
                    }
                    else {
                        this.scrollRect = new egret.Rectangle(this._horizontalScrollPosition, this._verticalScrollPosition, w, h);
                    }
                }
                else if (rect) {
                    this.scrollRect = null;
                }
            };
            /**
             * 计算组件的默认大小和（可选）默认最小大小
             * @method egret.gui.GroupBase#measure
             */
            p.measure = function () {
                if (!this._layout || !this._layoutInvalidateSizeFlag)
                    return;
                _super.prototype.measure.call(this);
                this._layout.measure();
            };
            /**
             * 标记需要更新显示列表但不需要更新布局
             */
            p._invalidateDisplayListExceptLayout = function () {
                _super.prototype.invalidateDisplayList.call(this);
            };
            /**
             * 标记组件，以便在稍后屏幕更新期间调用该组件的 updateDisplayList() 方法
             * @method egret.gui.GroupBase#invalidateDisplayList
             */
            p.invalidateDisplayList = function () {
                _super.prototype.invalidateDisplayList.call(this);
                this._layoutInvalidateDisplayListFlag = true;
            };
            p._childXYChanged = function () {
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            /**
             * 标记需要更新显示列表但不需要更新布局
             */
            p._invalidateSizeExceptLayout = function () {
                _super.prototype.invalidateSize.call(this);
            };
            /**
             * 标记组件，以便在稍后屏幕更新期间调用该组件的 measure() 方法
             * @method egret.gui.GroupBase#invalidateSize
             */
            p.invalidateSize = function () {
                _super.prototype.invalidateSize.call(this);
                this._layoutInvalidateSizeFlag = true;
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @param unscaledWidth
             * @param unscaledHeight
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                if (this._layoutInvalidateDisplayListFlag && this._layout) {
                    this._layoutInvalidateDisplayListFlag = false;
                    this._layout.updateDisplayList(unscaledWidth, unscaledHeight);
                    this.updateScrollRect(unscaledWidth, unscaledHeight);
                }
            };
            d(p, "numElements"
                /**
                 * 此容器中的可视元素的数量。
                 * @member egret.gui.GroupBase#numElements
                 */
                ,function () {
                    return -1;
                }
            );
            /**
             * 返回指定索引处的可视元素。
             * @method egret.gui.GroupBase#getElementAt
             * @param index {number} 要检索的元素的索引。
             * @returns {IVisualElement}
             */
            p.getElementAt = function (index) {
                return null;
            };
            /**
             * 返回可视元素的索引位置。若不存在，则返回-1。
             * @method egret.gui.GroupBase#getElementIndex
             * @param element {IVisualElement} 可视元素。
             * @returns {number}
             */
            p.getElementIndex = function (element) {
                return -1;
            };
            /**
             * 返回在容器可视区域内的布局元素索引列表,此方法忽略不是布局元素的普通的显示对象
             * @method egret.gui.GroupBase#getElementIndicesInView
             * @returns {number}
             */
            p.getElementIndicesInView = function () {
                var visibleIndices = [];
                var index;
                if (!this.scrollRect) {
                    for (index = 0; index < this.numChildren; index++) {
                        visibleIndices.push(index);
                    }
                }
                else {
                    for (index = 0; index < this.numChildren; index++) {
                        var layoutElement = (this.getChildAt(index));
                        if (!layoutElement)
                            continue;
                        var eltR = new egret.Rectangle();
                        eltR.x = layoutElement.layoutBoundsX;
                        eltR.y = layoutElement.layoutBoundsY;
                        eltR.width = layoutElement.layoutBoundsWidth;
                        eltR.height = layoutElement.layoutBoundsHeight;
                        if (this.scrollRect.intersects(eltR))
                            visibleIndices.push(index);
                    }
                }
                return visibleIndices;
            };
            /**
             * 在支持虚拟布局的容器中，设置容器内可见的子元素索引范围。此方法在不支持虚拟布局的容器中无效。
             * 通常在即将连续调用getVirtualElementAt()之前需要显式设置一次，以便容器提前释放已经不可见的子元素。
             * @method egret.gui.GroupBase#setVirtualElementIndicesInView
             * @param startIndex {number} 可视元素起始索引
             * @param endIndex {number} 可视元素结束索引
             */
            p.setVirtualElementIndicesInView = function (startIndex, endIndex) {
            };
            /**
             * 支持useVirtualLayout属性的布局类在updateDisplayList()中使用此方法来获取“处于视图中”的布局元素
             * @method egret.gui.GroupBase#getVirtualElementAt
             * @param index {number} 要检索的元素的索引。
             * @returns {IVisualElement}
             */
            p.getVirtualElementAt = function (index) {
                return this.getElementAt(index);
            };
            return GroupBase;
        })(gui.UIComponent);
        gui.GroupBase = GroupBase;
        egret.registerClass(GroupBase,"egret.gui.GroupBase",["egret.gui.IViewport","egret.gui.IVisualElement","egret.gui.ILayoutElement","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="../core/ClassFactory.ts" />
/// <reference path="supportClasses/ItemRenderer.ts" />
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.DataGroup
         * @classdesc
         * 数据项目的容器基类
         * 将数据项目转换为可视元素以进行显示。
         * @extends egret.gui.GroupBase
         */
        var DataGroup = (function (_super) {
            __extends(DataGroup, _super);
            /**
             * 构造函数
             * @method egret.gui.DataGroup#constructor
             */
            function DataGroup() {
                _super.call(this);
                /**
                 * 项呈示器的主机组件
                 */
                this._rendererOwner = null;
                this.useVirtualLayoutChanged = false;
                this.rendererToClassMap = [];
                this.freeRenderers = [];
                /**
                 * 是否创建了新的项呈示器标志
                 */
                this.createNewRendererFlag = false;
                this.cleanTimer = null;
                this.dataProviderChanged = false;
                this._dataProvider = null;
                /**
                 * 对象池字典
                 */
                this.recyclerDic = {};
                /**
                 * 项呈示器改变
                 */
                this.itemRendererChanged = false;
                /**
                 * 这里不直接使用Class类型是因为JS里不能用对象作为键，所以需要hashCode。而只有实例对象才有hashCode，Class无法作为键。
                 */
                this._itemRenderer = null;
                this.itemRendererSkinNameChange = false;
                this._itemRendererSkinName = null;
                this._itemRendererFunction = null;
                /**
                 * 正在进行虚拟布局阶段
                 */
                this.virtualLayoutUnderway = false;
                this.typicalItemChanged = false;
                /**
                 * 项呈示器的默认尺寸
                 */
                this.typicalLayoutRect = null;
                /**
                 * 索引到项呈示器的转换数组
                 */
                this.indexToRenderer = [];
                /**
                 * 清理freeRenderer标志
                 */
                this.cleanFreeRenderer = false;
                /**
                 * 正在更新数据项的标志
                 */
                this.renderersBeingUpdated = false;
            }
            var d = __define,c=DataGroup;p=c.prototype;
            d(p, "layout"
                /**
                 * @member egret.gui.DataGroup#layout
                 */
                ,function () {
                    return this._layout;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (value == this.layout)
                        return;
                    if (this.layout) {
                        this.layout.typicalLayoutRect = null;
                        this.layout.removeEventListener("useVirtualLayoutChanged", this.layout_useVirtualLayoutChangedHandler, this);
                    }
                    if (this.layout && value && (this.layout.useVirtualLayout != value.useVirtualLayout))
                        this.changeUseVirtualLayout();
                    this._setLayout(value);
                    if (value) {
                        value.typicalLayoutRect = this.typicalLayoutRect;
                        value.addEventListener("useVirtualLayoutChanged", this.layout_useVirtualLayoutChangedHandler, this);
                    }
                }
            );
            /**
             * 是否使用虚拟布局标记改变
             */
            p.layout_useVirtualLayoutChangedHandler = function (event) {
                this.changeUseVirtualLayout();
            };
            /**
             * @method egret.gui.DataGroup#setVirtualElementIndicesInView
             * @param startIndex {number}
             * @param endIndex {number}
             */
            p.setVirtualElementIndicesInView = function (startIndex, endIndex) {
                if (!this.layout || !this.layout.useVirtualLayout)
                    return;
                this.virtualRendererIndices = [];
                for (var i = startIndex; i <= endIndex; i++) {
                    this.virtualRendererIndices.push(i);
                }
                for (var index in this.indexToRenderer) {
                    index = parseInt(index);
                    if (this.virtualRendererIndices.indexOf(index) == -1) {
                        this.freeRendererByIndex(index);
                    }
                }
            };
            /**
             * @method egret.gui.DataGroup#getVirtualElementAt
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.getVirtualElementAt = function (index) {
                if (index < 0 || index >= this.dataProvider.length)
                    return null;
                var element = this.indexToRenderer[index];
                if (!element) {
                    var item = this.dataProvider.getItemAt(index);
                    var renderer = this.createVirtualRenderer(index);
                    this.indexToRenderer[index] = renderer;
                    this.updateRenderer(renderer, index, item);
                    if (this.createNewRendererFlag) {
                        if ("validateNow" in renderer)
                            renderer.validateNow();
                        this.createNewRendererFlag = false;
                        gui.RendererExistenceEvent.dispatchRendererExistenceEvent(this, gui.RendererExistenceEvent.RENDERER_ADD, renderer, index, item);
                    }
                    element = renderer;
                }
                return element;
            };
            /**
             * 释放指定索引处的项呈示器
             */
            p.freeRendererByIndex = function (index) {
                if (!this.indexToRenderer[index])
                    return;
                var renderer = (this.indexToRenderer[index]);
                delete this.indexToRenderer[index];
                if (renderer && renderer instanceof egret.DisplayObject) {
                    this.doFreeRenderer(renderer);
                }
            };
            /**
             * 释放指定的项呈示器
             */
            p.doFreeRenderer = function (renderer) {
                var rendererFactory = this.rendererToClassMap[renderer.hashCode];
                var hashCode = rendererFactory.hashCode;
                if (!this.freeRenderers[hashCode]) {
                    this.freeRenderers[hashCode] = [];
                }
                this.freeRenderers[hashCode].push(renderer);
                renderer.visible = false;
            };
            /**
             * 标记组件，以便在稍后屏幕更新期间调用该组件的 measure() 方法
             * @method egret.gui.DataGroup#invalidateSize
             */
            p.invalidateSize = function () {
                if (!this.createNewRendererFlag)
                    _super.prototype.invalidateSize.call(this);
            };
            /**
             * 为指定索引创建虚拟的项呈示器
             */
            p.createVirtualRenderer = function (index) {
                var item = this.dataProvider.getItemAt(index);
                var renderer;
                var rendererFactory = this.itemToRendererClass(item);
                var hashCode = rendererFactory.hashCode;
                var freeRenderers = this.freeRenderers;
                if (freeRenderers[hashCode] && freeRenderers[hashCode].length > 0) {
                    renderer = freeRenderers[hashCode].pop();
                    renderer.visible = true;
                    return renderer;
                }
                this.createNewRendererFlag = true;
                return this.createOneRenderer(rendererFactory);
            };
            /**
             * 根据rendererClass创建一个Renderer,并添加到显示列表
             */
            p.createOneRenderer = function (rendererFactory) {
                var renderer;
                var hashCode = rendererFactory.hashCode;
                var recycler = this.recyclerDic[hashCode];
                if (recycler) {
                    renderer = recycler.pop();
                    if (recycler.length == 0)
                        delete this.recyclerDic[hashCode];
                }
                if (!renderer) {
                    renderer = (rendererFactory.newInstance());
                    this.rendererToClassMap[renderer.hashCode] = rendererFactory;
                }
                if (!renderer || !(renderer instanceof egret.DisplayObject))
                    return null;
                if (this._itemRendererSkinName) {
                    this.setItemRenderSkinName(renderer);
                }
                this._addToDisplayList(renderer);
                renderer.setLayoutBoundsSize(NaN, NaN);
                return renderer;
            };
            /**
             * 设置项呈示器的默认皮肤
             */
            p.setItemRenderSkinName = function (renderer) {
                if (!renderer)
                    return;
                var comp = renderer;
                if (comp) {
                    if (!comp._skinNameExplicitlySet)
                        comp.skinName = this._itemRendererSkinName;
                }
                else {
                    var client = renderer;
                    if (client && !client.skinName)
                        client.skinName = this._itemRendererSkinName;
                }
            };
            /**
             * 虚拟布局结束清理不可见的项呈示器
             */
            p.finishVirtualLayout = function () {
                if (!this.virtualLayoutUnderway)
                    return;
                this.virtualLayoutUnderway = false;
                var found = false;
                for (var hashCode in this.freeRenderers) {
                    if (this.freeRenderers[hashCode].length > 0) {
                        found = true;
                        break;
                    }
                }
                if (!found)
                    return;
                if (!this.cleanTimer) {
                    this.cleanTimer = new egret.Timer(3000, 1);
                    this.cleanTimer.addEventListener(egret.TimerEvent.TIMER, this.cleanAllFreeRenderer, this);
                }
                //为了提高持续滚动过程中的性能，防止反复地添加移除子项，这里不直接清理而是延迟后在滚动停止时清理一次。
                this.cleanTimer.reset();
                this.cleanTimer.start();
            };
            /**
             * 延迟清理多余的在显示列表中的ItemRenderer。
             */
            p.cleanAllFreeRenderer = function (event) {
                if (event === void 0) { event = null; }
                var renderer;
                var freeRenderers = this.freeRenderers;
                for (var hashCode in freeRenderers) {
                    var list = freeRenderers[hashCode];
                    var length = list.length;
                    for (var i = 0; i < length; i++) {
                        renderer = list[i];
                        renderer.visible = true;
                        this.recycle(renderer);
                    }
                }
                this.freeRenderers = [];
                this.cleanFreeRenderer = false;
            };
            /**
             * @method egret.gui.DataGroup#getElementIndicesInView
             * @returns {number}
             */
            p.getElementIndicesInView = function () {
                if (this.layout && this.layout.useVirtualLayout)
                    return this.virtualRendererIndices ? this.virtualRendererIndices : [];
                return _super.prototype.getElementIndicesInView.call(this);
            };
            /**
             * 更改是否使用虚拟布局
             */
            p.changeUseVirtualLayout = function () {
                this.useVirtualLayoutChanged = true;
                this.cleanFreeRenderer = true;
                this.removeDataProviderListener();
                this.invalidateProperties();
            };
            d(p, "dataProvider"
                /**
                 * 列表数据源，请使用实现了ICollection接口的数据类型，例如ArrayCollection
                 * @member egret.gui.DataGroup#dataProvider
                 */
                ,function () {
                    return this._dataProvider;
                }
                ,function (value) {
                    if (this._dataProvider == value)
                        return;
                    this.removeDataProviderListener();
                    this._dataProvider = value;
                    this.dataProviderChanged = true;
                    this.cleanFreeRenderer = true;
                    this.invalidateProperties();
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            /**
             * 移除数据源监听
             */
            p.removeDataProviderListener = function () {
                if (this._dataProvider)
                    this._dataProvider.removeEventListener(gui.CollectionEvent.COLLECTION_CHANGE, this.onCollectionChange, this);
            };
            /**
             * 数据源改变事件处理
             */
            p.onCollectionChange = function (event) {
                switch (event.kind) {
                    case gui.CollectionEventKind.ADD:
                        this.itemAddedHandler(event.items, event.location);
                        break;
                    case gui.CollectionEventKind.MOVE:
                        this.itemMovedHandler(event.items[0], event.location, event.oldLocation);
                        break;
                    case gui.CollectionEventKind.REMOVE:
                        this.itemRemovedHandler(event.items, event.location);
                        break;
                    case gui.CollectionEventKind.UPDATE:
                        this.itemUpdatedHandler(event.items[0], event.location);
                        break;
                    case gui.CollectionEventKind.REPLACE:
                        this.itemRemoved(event.oldItems[0], event.location);
                        this.itemAdded(event.items[0], event.location);
                        break;
                    case gui.CollectionEventKind.RESET:
                    case gui.CollectionEventKind.REFRESH:
                        if (this.layout && this.layout.useVirtualLayout) {
                            for (var index in this.indexToRenderer) {
                                index = parseInt(index);
                                this.freeRendererByIndex(index);
                            }
                        }
                        this.dataProviderChanged = true;
                        this.invalidateProperties();
                        break;
                }
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            /**
             * 数据源添加项目事件处理
             */
            p.itemAddedHandler = function (items, index) {
                var length = items.length;
                for (var i = 0; i < length; i++) {
                    this.itemAdded(items[i], index + i);
                }
                this.resetRenderersIndices();
            };
            /**
             * 数据源移动项目事件处理
             */
            p.itemMovedHandler = function (item, location, oldLocation) {
                this.itemRemoved(item, oldLocation);
                this.itemAdded(item, location);
                this.resetRenderersIndices();
            };
            /**
             * 数据源移除项目事件处理
             */
            p.itemRemovedHandler = function (items, location) {
                var length = items.length;
                for (var i = length - 1; i >= 0; i--) {
                    this.itemRemoved(items[i], location + i);
                }
                this.resetRenderersIndices();
            };
            /**
             * 添加一项
             */
            p.itemAdded = function (item, index) {
                if (this.layout)
                    this.layout.elementAdded(index);
                if (this.layout && this.layout.useVirtualLayout) {
                    var virtualRendererIndices = this.virtualRendererIndices;
                    if (virtualRendererIndices) {
                        var length = virtualRendererIndices.length;
                        for (var i = 0; i < length; i++) {
                            var vrIndex = virtualRendererIndices[i];
                            if (vrIndex >= index)
                                virtualRendererIndices[i] = vrIndex + 1;
                        }
                        this.indexToRenderer.splice(index, 0, null);
                    }
                    return;
                }
                var rendererFactory = this.itemToRendererClass(item);
                var renderer = this.createOneRenderer(rendererFactory);
                this.indexToRenderer.splice(index, 0, renderer);
                if (!renderer)
                    return;
                this.updateRenderer(renderer, index, item);
                gui.RendererExistenceEvent.dispatchRendererExistenceEvent(this, gui.RendererExistenceEvent.RENDERER_ADD, renderer, index, item);
            };
            /**
             * 移除一项
             */
            p.itemRemoved = function (item, index) {
                if (this.layout)
                    this.layout.elementRemoved(index);
                var virtualRendererIndices = this.virtualRendererIndices;
                if (virtualRendererIndices && (virtualRendererIndices.length > 0)) {
                    var vrItemIndex = -1;
                    var length = virtualRendererIndices.length;
                    for (var i = 0; i < length; i++) {
                        var vrIndex = virtualRendererIndices[i];
                        if (vrIndex == index)
                            vrItemIndex = i;
                        else if (vrIndex > index)
                            virtualRendererIndices[i] = vrIndex - 1;
                    }
                    if (vrItemIndex != -1)
                        virtualRendererIndices.splice(vrItemIndex, 1);
                }
                var oldRenderer = this.indexToRenderer[index];
                if (this.indexToRenderer.length > index)
                    this.indexToRenderer.splice(index, 1);
                gui.RendererExistenceEvent.dispatchRendererExistenceEvent(this, gui.RendererExistenceEvent.RENDERER_REMOVE, oldRenderer, index, item);
                if (oldRenderer && oldRenderer instanceof egret.DisplayObject) {
                    this.recycle(oldRenderer);
                }
            };
            /**
             * 回收一个ItemRenderer实例
             */
            p.recycle = function (renderer) {
                this._removeFromDisplayList(renderer);
                if ("ownerChanged" in renderer) {
                    renderer.ownerChanged(null);
                }
                var rendererFactory = this.rendererToClassMap[renderer.hashCode];
                var hashCode = rendererFactory.hashCode;
                if (!this.recyclerDic[hashCode]) {
                    this.recyclerDic[hashCode] = [];
                }
                this.recyclerDic[hashCode].push(renderer);
            };
            /**
             * 更新当前所有项的索引
             */
            p.resetRenderersIndices = function () {
                if (this.indexToRenderer.length == 0)
                    return;
                if (this.layout && this.layout.useVirtualLayout) {
                    var virtualRendererIndices = this.virtualRendererIndices;
                    var length = virtualRendererIndices.length;
                    for (var i = 0; i < length; i++) {
                        var index = virtualRendererIndices[i];
                        this.resetRendererItemIndex(index);
                    }
                }
                else {
                    var indexToRendererLength = this.indexToRenderer.length;
                    for (index = 0; index < indexToRendererLength; index++)
                        this.resetRendererItemIndex(index);
                }
            };
            /**
             * 数据源更新或替换项目事件处理
             */
            p.itemUpdatedHandler = function (item, location) {
                if (this.renderersBeingUpdated)
                    return; //防止无限循环
                var renderer = this.indexToRenderer[location];
                if (renderer)
                    this.updateRenderer(renderer, location, item);
            };
            /**
             * 调整指定项呈示器的索引值
             */
            p.resetRendererItemIndex = function (index) {
                var renderer = (this.indexToRenderer[index]);
                if (renderer)
                    renderer.itemIndex = index;
            };
            d(p, "itemRenderer"
                /**
                 * 用于数据项目的项呈示器。该类必须实现 IItemRenderer 接口。<br/>
                 * rendererClass获取顺序：itemRendererFunction > itemRenderer > 默认ItemRenerer。
                 * @member egret.gui.DataGroup#itemRenderer
                 */
                ,function () {
                    return this._itemRenderer;
                }
                ,function (value) {
                    if (this._itemRenderer === value)
                        return;
                    this._itemRenderer = value;
                    this.itemRendererChanged = true;
                    this.typicalItemChanged = true;
                    this.cleanFreeRenderer = true;
                    this.removeDataProviderListener();
                    this.invalidateProperties();
                }
            );
            d(p, "itemRendererSkinName"
                /**
                 * 条目渲染器的可选皮肤标识符。在实例化itemRenderer时，若其内部没有设置过skinName,则将此属性的值赋值给它的skinName。
                 * 注意:若itemRenderer不是ISkinnableClient，则此属性无效。
                 * @member egret.gui.DataGroup#itemRendererSkinName
                 */
                ,function () {
                    return this._itemRendererSkinName;
                }
                ,function (value) {
                    if (this._itemRendererSkinName == value)
                        return;
                    this._itemRendererSkinName = value;
                    if (this._itemRendererSkinName && this.initialized) {
                        this.itemRendererSkinNameChange = true;
                        this.invalidateProperties();
                    }
                }
            );
            d(p, "itemRendererFunction"
                /**
                 * 为某个特定项目返回一个项呈示器Class的函数。<br/>
                 * rendererClass获取顺序：itemRendererFunction > itemRenderer > 默认ItemRenerer。<br/>
                 * 应该定义一个与此示例函数类似的呈示器函数： <br/>
                 * function myItemRendererFunction(item:Object):IFactory
                 * @member egret.gui.DataGroup#itemRendererFunction
                 */
                ,function () {
                    return this._itemRendererFunction;
                }
                ,function (value) {
                    if (this._itemRendererFunction == value)
                        return;
                    this._itemRendererFunction = value;
                    this.itemRendererChanged = true;
                    this.typicalItemChanged = true;
                    this.removeDataProviderListener();
                    this.invalidateProperties();
                }
            );
            /**
             * 为特定的数据项返回项呈示器的工厂实例
             */
            p.itemToRendererClass = function (item) {
                var rendererFactory;
                if (this._itemRendererFunction != null) {
                    rendererFactory = this._itemRendererFunction(item);
                    if (!rendererFactory)
                        rendererFactory = this._itemRenderer;
                }
                else {
                    rendererFactory = this._itemRenderer;
                }
                return rendererFactory ? rendererFactory : DataGroup.defaultRendererFactory;
            };
            /**
             * @method egret.gui.DataGroup#createChildren
             * 设置默认的ItemRenderer
             * @private
             *
             */
            p.createChildren = function () {
                if (!this.layout) {
                    var _layout = new gui.VerticalLayout();
                    _layout.gap = 0;
                    _layout.horizontalAlign = egret.HorizontalAlign.CONTENT_JUSTIFY;
                    this.layout = _layout;
                }
                _super.prototype.createChildren.call(this);
            };
            /**
             * 处理对组件设置的属性
             * @method egret.gui.DataGroup#commitProperties
             */
            p.commitProperties = function () {
                if (this.itemRendererChanged || this.dataProviderChanged || this.useVirtualLayoutChanged) {
                    this.removeAllRenderers();
                    if (this.layout)
                        this.layout.clearVirtualLayoutCache();
                    this.setTypicalLayoutRect(null);
                    this.useVirtualLayoutChanged = false;
                    this.itemRendererChanged = false;
                    if (this._dataProvider)
                        this._dataProvider.addEventListener(gui.CollectionEvent.COLLECTION_CHANGE, this.onCollectionChange, this);
                    if (this.layout && this.layout.useVirtualLayout) {
                        this.invalidateSize();
                        this.invalidateDisplayList();
                    }
                    else {
                        this.createRenderers();
                    }
                    if (this.dataProviderChanged) {
                        this.dataProviderChanged = false;
                        this.verticalScrollPosition = this.horizontalScrollPosition = 0;
                    }
                }
                _super.prototype.commitProperties.call(this);
                if (this.typicalItemChanged) {
                    this.typicalItemChanged = false;
                    if (this._dataProvider && this._dataProvider.length > 0) {
                        this.typicalItem = this._dataProvider.getItemAt(0);
                        this.measureRendererSize();
                    }
                }
                if (this.itemRendererSkinNameChange) {
                    this.itemRendererSkinNameChange = false;
                    var length = this.indexToRenderer.length;
                    for (var i = 0; i < length; i++) {
                        this.setItemRenderSkinName(this.indexToRenderer[i]);
                    }
                    var freeRenderers = this.freeRenderers;
                    for (var hashCode in freeRenderers) {
                        var list = freeRenderers[hashCode];
                        if (list) {
                            length = list.length;
                            for (i = 0; i < length; i++) {
                                this.setItemRenderSkinName(list[i]);
                            }
                        }
                    }
                }
            };
            /**
             * 计算组件的默认大小和（可选）默认最小大小
             * @method egret.gui.DataGroup#measure
             */
            p.measure = function () {
                if (this.layout && this.layout.useVirtualLayout) {
                    this.ensureTypicalLayoutElement();
                }
                _super.prototype.measure.call(this);
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @method egret.gui.DataGroup#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                if (this._layoutInvalidateDisplayListFlag && this.layout && this.layout.useVirtualLayout) {
                    this.virtualLayoutUnderway = true;
                    this.ensureTypicalLayoutElement();
                }
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                if (this.virtualLayoutUnderway)
                    this.finishVirtualLayout();
            };
            /**
             * 确保测量过默认条目大小。
             */
            p.ensureTypicalLayoutElement = function () {
                if (this.layout.typicalLayoutRect)
                    return;
                if (this._dataProvider && this._dataProvider.length > 0) {
                    this.typicalItem = this._dataProvider.getItemAt(0);
                    this.measureRendererSize();
                }
            };
            /**
             * 测量项呈示器默认尺寸
             */
            p.measureRendererSize = function () {
                if (!this.typicalItem) {
                    this.setTypicalLayoutRect(null);
                    return;
                }
                var rendererFactory = this.itemToRendererClass(this.typicalItem);
                var typicalRenderer = this.createOneRenderer(rendererFactory);
                if (!typicalRenderer) {
                    this.setTypicalLayoutRect(null);
                    return;
                }
                this.createNewRendererFlag = true;
                this.updateRenderer(typicalRenderer, 0, this.typicalItem);
                if ("validateNow" in typicalRenderer)
                    typicalRenderer.validateNow();
                var rect = new egret.Rectangle(0, 0, typicalRenderer.preferredWidth, typicalRenderer.preferredHeight);
                this.recycle(typicalRenderer);
                this.setTypicalLayoutRect(rect);
                this.createNewRendererFlag = false;
            };
            /**
             * 设置项目默认大小
             */
            p.setTypicalLayoutRect = function (rect) {
                this.typicalLayoutRect = rect;
                if (this.layout)
                    this.layout.typicalLayoutRect = rect;
            };
            /**
             * 移除所有项呈示器
             */
            p.removeAllRenderers = function () {
                var length = this.indexToRenderer.length;
                var renderer;
                for (var i = 0; i < length; i++) {
                    renderer = this.indexToRenderer[i];
                    if (renderer) {
                        this.recycle(renderer);
                        gui.RendererExistenceEvent.dispatchRendererExistenceEvent(this, gui.RendererExistenceEvent.RENDERER_REMOVE, renderer, renderer.itemIndex, renderer.data);
                    }
                }
                this.indexToRenderer = [];
                this.virtualRendererIndices = null;
                if (!this.cleanFreeRenderer)
                    return;
                this.cleanAllFreeRenderer();
            };
            /**
             * 为数据项创建项呈示器
             */
            p.createRenderers = function () {
                if (!this._dataProvider)
                    return;
                var index = 0;
                var length = this._dataProvider.length;
                for (var i = 0; i < length; i++) {
                    var item = this._dataProvider.getItemAt(i);
                    var rendererFactory = this.itemToRendererClass(item);
                    var renderer = this.createOneRenderer(rendererFactory);
                    if (!renderer)
                        continue;
                    this.indexToRenderer[index] = renderer;
                    this.updateRenderer(renderer, index, item);
                    gui.RendererExistenceEvent.dispatchRendererExistenceEvent(this, gui.RendererExistenceEvent.RENDERER_ADD, renderer, index, item);
                    index++;
                }
            };
            /**
             * 更新项呈示器
             * @method egret.gui.DataGroup#updateRenderer
             * @param renderer {IItemRenderer}
             * @param itemIndex {number}
             * @param data {any}
             * @returns {IItemRenderer}
             */
            p.updateRenderer = function (renderer, itemIndex, data) {
                this.renderersBeingUpdated = true;
                if (this._rendererOwner) {
                    renderer = this._rendererOwner.updateRenderer(renderer, itemIndex, data);
                }
                else {
                    if ("ownerChanged" in renderer) {
                        renderer.ownerChanged(this);
                    }
                    renderer.itemIndex = itemIndex;
                    renderer.label = this.itemToLabel(data);
                    renderer.data = data;
                }
                this.renderersBeingUpdated = false;
                return renderer;
            };
            /**
             * 返回可在项呈示器中显示的 String。
             * 若DataGroup被作为SkinnableDataContainer的皮肤组件,此方法将不会执行，被SkinnableDataContainer.itemToLabel()所替代。
             * @method egret.gui.DataGroup#itemToLabel
             * @param item {any}
             * @returns {string}
             */
            p.itemToLabel = function (item) {
                if (item)
                    return item.toString();
                else
                    return " ";
            };
            /**
             * 返回位于指定索引处的子显示对象实例
             * @method egret.gui.DataGroup#getElementAt
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.getElementAt = function (index) {
                return this.indexToRenderer[index];
            };
            /**
             * 返回 element 实例的索引位置
             * @method egret.gui.DataGroup#getElementIndex
             * @param element {IVisualElement}
             * @returns {number}
             */
            p.getElementIndex = function (element) {
                if (!element)
                    return -1;
                return this.indexToRenderer.indexOf(element);
            };
            d(p, "numElements"
                /**
                 * 获得对象容器的子对象总数
                 * @member egret.gui.DataGroup#numElements
                 */
                ,function () {
                    if (!this._dataProvider)
                        return 0;
                    return this._dataProvider.length;
                }
            );
            /**
             * 将一个 DisplayObject 子实例添加到该 DisplayObjectContainer 实例中
             * @method egret.gui.DataGroup#addChild
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.addChild = function (child) {
                egret.$error(3004, egret.sys.tr(3003));
                return null;
            };
            /**
             * 将一个 DisplayObject 子实例添加到该 DisplayObjectContainer 实例中
             * @method egret.gui.DataGroup#addChildAt
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.addChildAt = function (child, index) {
                egret.$error(3005, egret.sys.tr(3003));
                return null;
            };
            /**
             * 从 DisplayObjectContainer 实例的子列表中删除指定的 child DisplayObject 实例
             * @method egret.gui.DataGroup#removeChild
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.removeChild = function (child) {
                egret.$error(3006, egret.sys.tr(3003));
                return null;
            };
            /**
             * 从 DisplayObjectContainer 的子列表中指定的 index 位置删除子 DisplayObject
             * @method egret.gui.DataGroup#removeChildAt
             * @deprecated
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.removeChildAt = function (index) {
                egret.$error(3007, egret.sys.tr(3003));
                return null;
            };
            /**
             * 更改现有子项在显示对象容器中的位置
             * @method egret.gui.DataGroup#setChildIndex
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             */
            p.setChildIndex = function (child, index) {
                egret.$error(3008, egret.sys.tr(3003));
            };
            /**
             * 交换两个指定子对象的 Z 轴顺序（从前到后顺序）
             * @method egret.gui.DataGroup#swapChildren
             * @deprecated
             * @param child1 {DisplayObject}
             * @param child2 {DisplayObject}
             */
            p.swapChildren = function (child1, child2) {
                egret.$error(3009, egret.sys.tr(3003));
            };
            /**
             * 在子级列表中两个指定的索引位置，交换子对象的 Z 轴顺序（前后顺序）
             * @method egret.gui.DataGroup#swapChildrenAt
             * @deprecated
             * @param index1 {number}
             * @param index2 {number}
             */
            p.swapChildrenAt = function (index1, index2) {
                egret.$error(3010, egret.sys.tr(3003));
            };
            /**
             * @method egret.gui.DataGroup.defaultRendererFactory
             * @param ClassFactory {any}
             */
            DataGroup.defaultRendererFactory = new gui.ClassFactory(gui.ItemRenderer);
            return DataGroup;
        })(gui.GroupBase);
        gui.DataGroup = DataGroup;
        egret.registerClass(DataGroup,"egret.gui.DataGroup");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SkinnableDataContainer
         * @classdesc
         * 可设置外观的数据项目容器基类
         * @extends egret.gui.SkinnableComponent
         * @implements egret.gui.IItemRendererOwner
         */
        var SkinnableDataContainer = (function (_super) {
            __extends(SkinnableDataContainer, _super);
            /**
             * 构造函数
             * @method egret.gui.SkinnableDataContainer#constructor
             */
            function SkinnableDataContainer() {
                _super.call(this);
                /**
                 * [SkinPart]数据项目容器实体
                 * @member egret.gui.SkinnableDataContainer#dataGroup
                 */
                this.dataGroup = null;
                /**
                 * dataGroup发生改变时传递的参数
                 */
                this._dataGroupProperties = {};
            }
            var d = __define,c=SkinnableDataContainer;p=c.prototype;
            /**
             * 更新项呈示器，以备使用或重用
             * @method egret.gui.SkinnableDataContainer#updateRenderer
             * @param renderer {IItemRenderer}
             * @param itemIndex {number}
             * @param data {any}
             * @returns {IItemRenderer}
             */
            p.updateRenderer = function (renderer, itemIndex, data) {
                if ("ownerChanged" in renderer) {
                    renderer.ownerChanged(this);
                }
                renderer.itemIndex = itemIndex;
                renderer.label = this.itemToLabel(data);
                renderer.data = data;
                return renderer;
            };
            /**
             * 返回可在项呈示器中显示的 String
             * @method egret.gui.SkinnableDataContainer#itemToLabel
             * @param item {any}
             * @returns {string}
             */
            p.itemToLabel = function (item) {
                if (item !== null)
                    return item.toString();
                else
                    return " ";
            };
            d(p, "dataProvider"
                /**
                 * 列表数据源，请使用实现了ICollection接口的数据类型，例如ArrayCollection
                 * @member egret.gui.SkinnableDataContainer#dataProvider
                 */
                ,function () {
                    return this._getDataProvider();
                }
                ,function (value) {
                    this._setDataProvider(value);
                }
            );
            p._getDataProvider = function () {
                return this.dataGroup != null ? this.dataGroup.dataProvider : this._dataGroupProperties.dataProvider;
            };
            p._setDataProvider = function (value) {
                if (this.dataGroup == null) {
                    this._dataGroupProperties.dataProvider = value;
                }
                else {
                    this.dataGroup.dataProvider = value;
                    this._dataGroupProperties.dataProvider = true;
                }
            };
            d(p, "itemRenderer"
                /**
                 * 用于数据项目的项呈示器。该类必须实现 IItemRenderer 接口。 <br/>
                 * rendererClass获取顺序：itemRendererFunction > itemRenderer > 默认ItemRenerer。
                 * @member egret.gui.SkinnableDataContainer#itemRenderer
                 */
                ,function () {
                    return (this.dataGroup) ? this.dataGroup.itemRenderer : this._dataGroupProperties.itemRenderer;
                }
                ,function (value) {
                    if (this.dataGroup == null) {
                        this._dataGroupProperties.itemRenderer = value;
                    }
                    else {
                        this.dataGroup.itemRenderer = value;
                        this._dataGroupProperties.itemRenderer = true;
                    }
                }
            );
            d(p, "itemRendererSkinName"
                /**
                 * 条目渲染器的可选皮肤标识符。在实例化itemRenderer时，若其内部没有设置过skinName,则将此属性的值赋值给它的skinName。
                 * 注意:若itemRenderer不是ISkinnableClient，则此属性无效。
                 * @member egret.gui.SkinnableDataContainer#itemRendererSkinName
                 */
                ,function () {
                    return (this.dataGroup) ? this.dataGroup.itemRendererSkinName : this._dataGroupProperties.itemRendererSkinName;
                }
                ,function (value) {
                    if (this.dataGroup == null) {
                        this._dataGroupProperties.itemRendererSkinName = value;
                    }
                    else {
                        this.dataGroup.itemRendererSkinName = value;
                        this._dataGroupProperties.itemRendererSkinName = true;
                    }
                }
            );
            d(p, "itemRendererFunction"
                /**
                 * 为某个特定项目返回一个项呈示器Class的函数。 <br/>
                 * rendererClass获取顺序：itemRendererFunction > itemRenderer > 默认ItemRenerer。 <br/>
                 * 应该定义一个与此示例函数类似的呈示器函数： <br/>
                 * function myItemRendererFunction(item:Object):IFactory
                 * @member egret.gui.SkinnableDataContainer#itemRendererFunction
                 */
                ,function () {
                    return (this.dataGroup) ? this.dataGroup.itemRendererFunction : this._dataGroupProperties.itemRendererFunction;
                }
                ,function (value) {
                    if (this.dataGroup == null) {
                        this._dataGroupProperties.itemRendererFunction = value;
                    }
                    else {
                        this.dataGroup.itemRendererFunction = value;
                        this._dataGroupProperties.itemRendererFunction = true;
                    }
                }
            );
            d(p, "layout"
                /**
                 * 布局对象
                 * @member egret.gui.SkinnableDataContainer#layout
                 */
                ,function () {
                    return (this.dataGroup) ? this.dataGroup.layout : this._dataGroupProperties.layout;
                }
                ,function (value) {
                    this._setLayout(value);
                }
            );
            p._setLayout = function (value) {
                if (this.dataGroup == null) {
                    this._dataGroupProperties.layout = value;
                }
                else {
                    this.dataGroup.layout = value;
                    this._dataGroupProperties.layout = true;
                }
            };
            /**
             * [覆盖] 添加外观部件时调用
             * @method egret.gui.SkinnableDataContainer#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.dataGroup) {
                    var newDataGroupProperties = {};
                    if (this._dataGroupProperties.layout !== undefined) {
                        this.dataGroup.layout = this._dataGroupProperties.layout;
                        newDataGroupProperties.layout = true;
                    }
                    if (this._dataGroupProperties.dataProvider !== undefined) {
                        this.dataGroup.dataProvider = this._dataGroupProperties.dataProvider;
                        newDataGroupProperties.dataProvider = true;
                    }
                    if (this._dataGroupProperties.itemRenderer !== undefined) {
                        this.dataGroup.itemRenderer = this._dataGroupProperties.itemRenderer;
                        newDataGroupProperties.itemRenderer = true;
                    }
                    if (this._dataGroupProperties.itemRendererSkinName !== undefined) {
                        this.dataGroup.itemRendererSkinName = this._dataGroupProperties.itemRendererSkinName;
                        newDataGroupProperties.itemRendererSkinName = true;
                    }
                    if (this._dataGroupProperties.itemRendererFunction !== undefined) {
                        this.dataGroup.itemRendererFunction = this._dataGroupProperties.itemRendererFunction;
                        newDataGroupProperties.itemRendererFunction = true;
                    }
                    this.dataGroup._rendererOwner = this;
                    this._dataGroupProperties = newDataGroupProperties;
                    if (this.hasEventListener(gui.RendererExistenceEvent.RENDERER_ADD)) {
                        this.dataGroup.addEventListener(gui.RendererExistenceEvent.RENDERER_ADD, this.dispatchEvent, this);
                    }
                    if (this.hasEventListener(gui.RendererExistenceEvent.RENDERER_REMOVE)) {
                        this.dataGroup.addEventListener(gui.RendererExistenceEvent.RENDERER_REMOVE, this.dispatchEvent, this);
                    }
                }
            };
            /**
             * [覆盖] 正删除外观部件的实例时调用
             * @method egret.gui.SkinnableDataContainer#partRemoved
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                _super.prototype.partRemoved.call(this, partName, instance);
                if (instance == this.dataGroup) {
                    this.dataGroup.removeEventListener(gui.RendererExistenceEvent.RENDERER_ADD, this.dispatchEvent, this);
                    this.dataGroup.removeEventListener(gui.RendererExistenceEvent.RENDERER_REMOVE, this.dispatchEvent, this);
                    var newDataGroupProperties = {};
                    if (this._dataGroupProperties.layout)
                        newDataGroupProperties.layout = this.dataGroup.layout;
                    if (this._dataGroupProperties.dataProvider)
                        newDataGroupProperties.dataProvider = this.dataGroup.dataProvider;
                    if (this._dataGroupProperties.itemRenderer)
                        newDataGroupProperties.itemRenderer = this.dataGroup.itemRenderer;
                    if (this._dataGroupProperties.itemRendererSkinName)
                        newDataGroupProperties.itemRendererSkinName = this.dataGroup.itemRendererSkinName;
                    if (this._dataGroupProperties.itemRendererFunction)
                        newDataGroupProperties.itemRendererFunction = this.dataGroup.itemRendererFunction;
                    this._dataGroupProperties = newDataGroupProperties;
                    this.dataGroup._rendererOwner = null;
                    this.dataGroup.dataProvider = null;
                    this.dataGroup.layout = null;
                }
            };
            /**
             * 使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知
             * @method egret.gui.SkinnableDataContainer#addEventListener
             * @param type {string}
             * @param listener {Function}
             * @param thisObject {any}
             * @param useCapture {boolean}
             * @param priority {number}
             */
            p.addEventListener = function (type, listener, thisObject, useCapture, priority) {
                if (useCapture === void 0) { useCapture = false; }
                if (priority === void 0) { priority = 0; }
                _super.prototype.addEventListener.call(this, type, listener, thisObject, useCapture, priority);
                if (type == gui.RendererExistenceEvent.RENDERER_ADD && this.dataGroup) {
                    this.dataGroup.addEventListener(gui.RendererExistenceEvent.RENDERER_ADD, this.dispatchEvent, this);
                }
                if (type == gui.RendererExistenceEvent.RENDERER_REMOVE && this.dataGroup) {
                    this.dataGroup.addEventListener(gui.RendererExistenceEvent.RENDERER_REMOVE, this.dispatchEvent, this);
                }
            };
            /**
             * 从 EventDispatcher 对象中删除侦听器
             * @method egret.gui.SkinnableDataContainer#removeEventListener
             * @param type {string}
             * @param listener {Function}
             * @param thisObject {any}
             * @param useCapture {boolean}
             */
            p.removeEventListener = function (type, listener, thisObject, useCapture) {
                if (useCapture === void 0) { useCapture = false; }
                _super.prototype.removeEventListener.call(this, type, listener, thisObject, useCapture);
                if (type == gui.RendererExistenceEvent.RENDERER_ADD && this.dataGroup) {
                    if (!this.hasEventListener(gui.RendererExistenceEvent.RENDERER_ADD)) {
                        this.dataGroup.removeEventListener(gui.RendererExistenceEvent.RENDERER_ADD, this.dispatchEvent, this);
                    }
                }
                if (type == gui.RendererExistenceEvent.RENDERER_REMOVE && this.dataGroup) {
                    if (!this.hasEventListener(gui.RendererExistenceEvent.RENDERER_REMOVE)) {
                        this.dataGroup.removeEventListener(gui.RendererExistenceEvent.RENDERER_REMOVE, this.dispatchEvent, this);
                    }
                }
            };
            return SkinnableDataContainer;
        })(gui.SkinnableComponent);
        gui.SkinnableDataContainer = SkinnableDataContainer;
        egret.registerClass(SkinnableDataContainer,"egret.gui.SkinnableDataContainer",["egret.gui.IItemRendererOwner"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ListBase
         * @classdesc
         * 支持选择内容的所有组件的基类。
         * @extends egret.gui.SkinnableDataContainer
         */
        var ListBase = (function (_super) {
            __extends(ListBase, _super);
            /**
             * 构造函数
             * @method egret.gui.ListBase#constructor
             */
            function ListBase() {
                _super.call(this);
                /**
                 * 正在进行所有数据源的刷新操作
                 * @member egret.gui.ListBase#_doingWholesaleChanges
                 */
                this._doingWholesaleChanges = false;
                this.dataProviderChanged = false;
                this._labelField = "label";
                this.labelFieldOrFunctionChanged = false;
                this._labelFunction = null;
                this._requireSelection = false;
                this.requireSelectionChanged = false;
                /**
                 * 在属性提交前缓存真实的选中项的值
                 */
                this._proposedSelectedIndex = ListBase.NO_PROPOSED_SELECTION;
                this._selectedIndex = ListBase.NO_SELECTION;
                /**
                 * 是否允许自定义的选中项
                 */
                this._allowCustomSelectedItem = false;
                /**
                 * 索引改变后是否需要抛出事件
                 */
                this._dispatchChangeAfterSelection = false;
                /**
                 *  在属性提交前缓存真实选中项的数据源
                 */
                this._pendingSelectedItem = undefined;
                this._selectedItem = null;
                this._useVirtualLayout = false;
                this.selectedIndexAdjusted = false;
            }
            var d = __define,c=ListBase;p=c.prototype;
            p._setDataProvider = function (value) {
                if (this.dataProvider)
                    this.dataProvider.removeEventListener(gui.CollectionEvent.COLLECTION_CHANGE, this.dataProvider_collectionChangeHandler, this);
                this.dataProviderChanged = true;
                this._doingWholesaleChanges = true;
                if (value)
                    value.addEventListener(gui.CollectionEvent.COLLECTION_CHANGE, this.dataProvider_collectionChangeHandler, this);
                _super.prototype._setDataProvider.call(this, value);
                this.invalidateProperties();
            };
            d(p, "layout"
                /**
                 * 布局对象
                 * @member egret.gui.ListBase#layout
                 */
                ,function () {
                    return (this.dataGroup) ? this.dataGroup.layout : this._dataGroupProperties.layout;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (value && this.useVirtualLayout)
                        value.useVirtualLayout = true;
                    this._setLayout(value);
                }
            );
            d(p, "labelField"
                /**
                 * 数据项如果是一个对象，此属性为数据项中用来显示标签文字的字段名称。
                 * 若设置了labelFunction，则设置此属性无效。
                 * @member egret.gui.ListBase#labelField
                 */
                ,function () {
                    return this._labelField;
                }
                ,function (value) {
                    this._setLabelField(value);
                }
            );
            p._setLabelField = function (value) {
                if (value == this._labelField)
                    return;
                this._labelField = value;
                this.labelFieldOrFunctionChanged = true;
                this.invalidateProperties();
            };
            d(p, "labelFunction"
                /**
                 * 用户提供的函数，在每个项目上运行以确定其标签。
                 * 示例：function labelFunc(item:Object):String 。
                 * @member egret.gui.ListBase#labelFunction
                 */
                ,function () {
                    return this._labelFunction;
                }
                ,function (value) {
                    this._setLabelFunction(value);
                }
            );
            p._setLabelFunction = function (value) {
                if (value == this._labelFunction)
                    return;
                this._labelFunction = value;
                this.labelFieldOrFunctionChanged = true;
                this.invalidateProperties();
            };
            d(p, "requireSelection"
                /**
                 * 如果为 true，则必须始终在控件中选中数据项目。<br/>
                 * 如果该值为 true，则始终将 selectedIndex 属性设置为 0 和 (dataProvider.length - 1) 之间的一个值。
                 * @member egret.gui.ListBase#requireSelection
                 */
                ,function () {
                    return this._requireSelection;
                }
                ,function (value) {
                    this._setRequireSelection(value);
                }
            );
            p._setRequireSelection = function (value) {
                if (value == this._requireSelection)
                    return;
                this._requireSelection = value;
                if (value) {
                    this.requireSelectionChanged = true;
                    this.invalidateProperties();
                }
            };
            d(p, "selectedIndex"
                /**
                 * 选中项目的基于 0 的索引。<br/>
                 * 或者如果未选中项目，则为-1。设置 selectedIndex 属性会取消选择当前选定的项目并选择指定索引位置的数据项目。 <br/>
                 * 当用户通过与控件交互来更改 selectedIndex 属性时，此控件将分派 change 和 changing 事件。<br/>
                 * 当以编程方式更改 selectedIndex 属性的值时，此控件不分派 change 和 changing 事件。
                 * @member egret.gui.ListBase#selectedIndex
                 */
                ,function () {
                    return this._getSelectedIndex();
                }
                ,function (value) {
                    this._setSelectedIndex(value, false);
                }
            );
            p._getSelectedIndex = function () {
                if (this._proposedSelectedIndex != ListBase.NO_PROPOSED_SELECTION)
                    return this._proposedSelectedIndex;
                return this._selectedIndex;
            };
            /**
             * 设置选中项
             */
            p._setSelectedIndex = function (value, dispatchChangeEvent) {
                if (dispatchChangeEvent === void 0) { dispatchChangeEvent = false; }
                if (value == this.selectedIndex) {
                    return;
                }
                if (dispatchChangeEvent)
                    this._dispatchChangeAfterSelection = (this._dispatchChangeAfterSelection || dispatchChangeEvent);
                this._proposedSelectedIndex = value;
                this.invalidateProperties();
            };
            d(p, "selectedItem"
                /**
                 * 当前已选中的项目。设置此属性会取消选中当前选定的项目并选择新指定的项目。<br/>
                 * 当用户通过与控件交互来更改 selectedItem 属性时，此控件将分派 change 和 changing 事件。<br/>
                 * 当以编程方式更改 selectedItem 属性的值时，此控件不分派 change 和 changing 事件。
                 * @member egret.gui.ListBase#selectedItem
                 */
                ,function () {
                    if (this._pendingSelectedItem !== undefined)
                        return this._pendingSelectedItem;
                    if (this._allowCustomSelectedItem && this.selectedIndex == ListBase.CUSTOM_SELECTED_ITEM)
                        return this._selectedItem;
                    if (this.selectedIndex == ListBase.NO_SELECTION || this.dataProvider == null)
                        return undefined;
                    return this.dataProvider.length > this.selectedIndex ? this.dataProvider.getItemAt(this.selectedIndex) : undefined;
                }
                ,function (value) {
                    this._setSelectedItem(value, false);
                }
            );
            /**
             * 设置选中项数据源
             * @method egret.gui.ListBase#_setSelectedItem
             * @param value {any}
             * @param dispatchChangeEvent {boolean}
             */
            p._setSelectedItem = function (value, dispatchChangeEvent) {
                if (dispatchChangeEvent === void 0) { dispatchChangeEvent = false; }
                if (this.selectedItem === value)
                    return;
                if (dispatchChangeEvent)
                    this._dispatchChangeAfterSelection = (this._dispatchChangeAfterSelection || dispatchChangeEvent);
                this._pendingSelectedItem = value;
                this.invalidateProperties();
            };
            d(p, "useVirtualLayout"
                /**
                 * 是否使用虚拟布局,默认flase
                 * @member egret.gui.ListBase#useVirtualLayout
                 */
                ,function () {
                    return this._getUseVirtualLayout();
                }
                ,function (value) {
                    this._setUseVirtualLayout(value);
                }
            );
            p._getUseVirtualLayout = function () {
                return (this.layout) ? this.layout.useVirtualLayout : this._useVirtualLayout;
            };
            p._setUseVirtualLayout = function (value) {
                if (value == this.useVirtualLayout)
                    return;
                this._useVirtualLayout = value;
                if (this.layout)
                    this.layout.useVirtualLayout = value;
            };
            /**
             * 处理对组件设置的属性
             * @method egret.gui.ListBase#commitProperties
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.dataProviderChanged) {
                    this.dataProviderChanged = false;
                    this._doingWholesaleChanges = false;
                    if (this.selectedIndex >= 0 && this.dataProvider && this.selectedIndex < this.dataProvider.length)
                        this.itemSelected(this.selectedIndex, true);
                    else if (this.requireSelection)
                        this._proposedSelectedIndex = 0;
                    else
                        this._setSelectedIndex(-1, false);
                }
                if (this.requireSelectionChanged) {
                    this.requireSelectionChanged = false;
                    if (this.requireSelection && this.selectedIndex == ListBase.NO_SELECTION && this.dataProvider && this.dataProvider.length > 0) {
                        this._proposedSelectedIndex = 0;
                    }
                }
                if (this._pendingSelectedItem !== undefined) {
                    if (this.dataProvider)
                        this._proposedSelectedIndex = this.dataProvider.getItemIndex(this._pendingSelectedItem);
                    else
                        this._proposedSelectedIndex = ListBase.NO_SELECTION;
                    if (this._allowCustomSelectedItem && this._proposedSelectedIndex == -1) {
                        this._proposedSelectedIndex = ListBase.CUSTOM_SELECTED_ITEM;
                        this._selectedItem = this._pendingSelectedItem;
                    }
                    this._pendingSelectedItem = undefined;
                }
                var changedSelection = false;
                if (this._proposedSelectedIndex != ListBase.NO_PROPOSED_SELECTION)
                    changedSelection = this.commitSelection();
                if (this.selectedIndexAdjusted) {
                    this.selectedIndexAdjusted = false;
                    if (!changedSelection) {
                        gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.VALUE_COMMIT);
                    }
                }
                if (this.labelFieldOrFunctionChanged) {
                    if (this.dataGroup != null) {
                        var itemIndex;
                        if (this.layout && this.layout.useVirtualLayout) {
                            var list = this.dataGroup.getElementIndicesInView();
                            var length = list.length;
                            for (var i = 0; i < length; i++) {
                                var itemIndex = list[i];
                                this.updateRendererLabelProperty(itemIndex);
                            }
                        }
                        else {
                            var n = this.dataGroup.numElements;
                            for (itemIndex = 0; itemIndex < n; itemIndex++) {
                                this.updateRendererLabelProperty(itemIndex);
                            }
                        }
                    }
                    this.labelFieldOrFunctionChanged = false;
                }
            };
            /**
             *  更新项呈示器文字标签
             */
            p.updateRendererLabelProperty = function (itemIndex) {
                var renderer = (this.dataGroup.getElementAt(itemIndex));
                if (renderer)
                    renderer.label = this.itemToLabel(renderer.data);
            };
            /**
             * 添加外观部件时调用
             * @method egret.gui.ListBase#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.dataGroup) {
                    if (this._useVirtualLayout && this.dataGroup.layout)
                        this.dataGroup.layout.useVirtualLayout = true;
                    this.dataGroup.addEventListener(gui.RendererExistenceEvent.RENDERER_ADD, this.dataGroup_rendererAddHandler, this);
                    this.dataGroup.addEventListener(gui.RendererExistenceEvent.RENDERER_REMOVE, this.dataGroup_rendererRemoveHandler, this);
                }
            };
            /**
             * 正删除外观部件的实例时调用
             * @method egret.gui.ListBase#partRemoved
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                _super.prototype.partRemoved.call(this, partName, instance);
                if (instance == this.dataGroup) {
                    this.dataGroup.removeEventListener(gui.RendererExistenceEvent.RENDERER_ADD, this.dataGroup_rendererAddHandler, this);
                    this.dataGroup.removeEventListener(gui.RendererExistenceEvent.RENDERER_REMOVE, this.dataGroup_rendererRemoveHandler, this);
                }
            };
            /**
             * 更新项呈示器，以备使用或重用
             * @method egret.gui.ListBase#updateRenderer
             * @param renderer {IItemRenderer}
             * @param itemIndex {number}
             * @param data {any}
             * @returns {IItemRenderer}
             */
            p.updateRenderer = function (renderer, itemIndex, data) {
                this.itemSelected(itemIndex, this._isItemIndexSelected(itemIndex));
                return _super.prototype.updateRenderer.call(this, renderer, itemIndex, data);
            };
            /**
             * 如果有一个数据项目，则返回呈示器应该显示的正确文本，同时将 labelField 和 labelFunction 属性考虑在内
             * @method egret.gui.ListBase#itemToLabel
             * @param item {any}
             * @returns {string}
             */
            p.itemToLabel = function (item) {
                if (this._labelFunction != null)
                    return this._labelFunction(item);
                if (typeof (item) == "string")
                    return item;
                if (item instanceof Object) {
                    try {
                        if (item[this.labelField] != null)
                            item = item[this.labelField];
                    }
                    catch (e) {
                    }
                }
                if (typeof (item) == "string")
                    return item;
                try {
                    if (item !== null)
                        return item.toString();
                }
                catch (e) {
                }
                return " ";
            };
            /**
             * 选中或取消选中项目时调用。子类必须覆盖此方法才可设置选中项。
             * @method egret.gui.ListBase#itemSelected
             * @param index {number} 已选中的项目索引。
             * @param selected {boolean} true为选中，false取消选中
             */
            p.itemSelected = function (index, selected) {
                if (!this.dataGroup)
                    return;
                var renderer = (this.dataGroup.getElementAt(index));
                if (renderer == null)
                    return;
                renderer.selected = selected;
            };
            /**
             * 返回指定索引是否等于当前选中索引
             */
            p._isItemIndexSelected = function (index) {
                return index == this.selectedIndex;
            };
            /**
             * 提交选中项属性，返回是否成功提交，false表示被取消
             * @method egret.gui.ListBase#commitSelection
             * @param dispatchChangedEvents {boolean}
             * @returns {boolean}
             */
            p.commitSelection = function (dispatchChangedEvents) {
                if (dispatchChangedEvents === void 0) { dispatchChangedEvents = true; }
                var maxIndex = this.dataProvider ? this.dataProvider.length - 1 : -1;
                var oldSelectedIndex = this._selectedIndex;
                var e;
                if (!this._allowCustomSelectedItem || this._proposedSelectedIndex != ListBase.CUSTOM_SELECTED_ITEM) {
                    if (this._proposedSelectedIndex < ListBase.NO_SELECTION)
                        this._proposedSelectedIndex = ListBase.NO_SELECTION;
                    if (this._proposedSelectedIndex > maxIndex)
                        this._proposedSelectedIndex = maxIndex;
                    if (this.requireSelection && this._proposedSelectedIndex == ListBase.NO_SELECTION && this.dataProvider && this.dataProvider.length > 0) {
                        this._proposedSelectedIndex = ListBase.NO_PROPOSED_SELECTION;
                        this._dispatchChangeAfterSelection = false;
                        return false;
                    }
                }
                var tmpProposedIndex = this._proposedSelectedIndex;
                if (this._dispatchChangeAfterSelection) {
                    var result = gui.IndexChangeEvent.dispatchIndexChangeEvent(this, gui.IndexChangeEvent.CHANGING, this._selectedIndex, this._proposedSelectedIndex, true);
                    if (!result) {
                        this.itemSelected(this._proposedSelectedIndex, false);
                        this._proposedSelectedIndex = ListBase.NO_PROPOSED_SELECTION;
                        this._dispatchChangeAfterSelection = false;
                        return false;
                    }
                }
                this._selectedIndex = tmpProposedIndex;
                this._proposedSelectedIndex = ListBase.NO_PROPOSED_SELECTION;
                if (oldSelectedIndex != ListBase.NO_SELECTION)
                    this.itemSelected(oldSelectedIndex, false);
                if (this._selectedIndex != ListBase.NO_SELECTION)
                    this.itemSelected(this._selectedIndex, true);
                //子类若需要自身抛出Change事件，而不是在此处抛出，可以设置dispatchChangedEvents为false
                if (dispatchChangedEvents) {
                    if (this._dispatchChangeAfterSelection) {
                        gui.IndexChangeEvent.dispatchIndexChangeEvent(this, gui.IndexChangeEvent.CHANGE, oldSelectedIndex, this._selectedIndex);
                        this._dispatchChangeAfterSelection = false;
                    }
                    gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.VALUE_COMMIT);
                    ;
                }
                return true;
            };
            /**
             * 仅调整选中索引值而不更新选中项,即在提交属性阶段itemSelected方法不会被调用，也不会触发changing和change事件。
             * @method egret.gui.ListBase#adjustSelection
             * @param newIndex {number} 新索引。
             * @param add {boolean} 如果已将项目添加到组件，则为 true；如果已删除项目，则为 false。
             */
            p.adjustSelection = function (newIndex, add) {
                if (add === void 0) { add = false; }
                if (this._proposedSelectedIndex != ListBase.NO_PROPOSED_SELECTION)
                    this._proposedSelectedIndex = newIndex;
                else
                    this._selectedIndex = newIndex;
                this.selectedIndexAdjusted = true;
                this.invalidateProperties();
            };
            /**
             * 数据项添加
             * @method egret.gui.ListBase#itemAdded
             * @param index {number}
             */
            p.itemAdded = function (index) {
                if (this._doingWholesaleChanges)
                    return;
                if (this.selectedIndex == ListBase.NO_SELECTION) {
                    if (this.requireSelection)
                        this.adjustSelection(index, true);
                }
                else if (index <= this.selectedIndex) {
                    this.adjustSelection(this.selectedIndex + 1, true);
                }
            };
            /**
             * 数据项移除
             * @method egret.gui.ListBase#itemRemoved
             * @param index {number}
             */
            p.itemRemoved = function (index) {
                if (this.selectedIndex == ListBase.NO_SELECTION || this._doingWholesaleChanges)
                    return;
                if (index == this.selectedIndex) {
                    if (this.requireSelection && this.dataProvider && this.dataProvider.length > 0) {
                        if (index == 0) {
                            this._proposedSelectedIndex = 0;
                            this.invalidateProperties();
                        }
                        else
                            this._setSelectedIndex(0, false);
                    }
                    else
                        this.adjustSelection(-1, false);
                }
                else if (index < this.selectedIndex) {
                    this.adjustSelection(this.selectedIndex - 1, false);
                }
            };
            /**
             * 项呈示器被添加
             * @method egret.gui.ListBase#dataGroup_rendererAddHandler
             * @param event {RendererExistenceEvent}
             */
            p.dataGroup_rendererAddHandler = function (event) {
                var renderer = (event.renderer);
                if (renderer == null)
                    return;
                renderer.addEventListener(egret.TouchEvent.TOUCH_ROLL_OVER, this.item_mouseEventHandler, this);
                renderer.addEventListener(egret.TouchEvent.TOUCH_ROLL_OUT, this.item_mouseEventHandler, this);
            };
            /**
             * 项呈示器被移除
             * @method egret.gui.ListBase#dataGroup_rendererRemoveHandler
             * @param event {RendererExistenceEvent}
             */
            p.dataGroup_rendererRemoveHandler = function (event) {
                var renderer = (event.renderer);
                if (renderer == null)
                    return;
                renderer.removeEventListener(egret.TouchEvent.TOUCH_ROLL_OVER, this.item_mouseEventHandler, this);
                renderer.removeEventListener(egret.TouchEvent.TOUCH_ROLL_OUT, this.item_mouseEventHandler, this);
            };
            /**
             * 项呈示器鼠标事件
             */
            p.item_mouseEventHandler = function (event) {
                var type = event.type;
                type = ListBase.TYPE_MAP[type];
                if (this.hasEventListener(type)) {
                    var itemRenderer = (event.currentTarget);
                    this._dispatchListEvent(event, type, itemRenderer);
                }
            };
            /**
             * 抛出列表事件
             * @method egret.gui.ListBase#_dispatchListEvent
             * @param touchEvent {TouchEvent} 相关联的鼠标事件
             * @param type {string} 事件名称
             * @param itemRenderer {IItemRenderer} 关联的条目渲染器实例
             */
            p._dispatchListEvent = function (touchEvent, type, itemRenderer) {
                var itemIndex = -1;
                if (itemRenderer)
                    itemIndex = itemRenderer.itemIndex;
                else
                    itemIndex = this.dataGroup.getElementIndex((touchEvent.currentTarget));
                var item = this.dataProvider.getItemAt(itemIndex);
                gui.ListEvent.dispatchListEvent(this, type, touchEvent, itemIndex, item, itemRenderer);
            };
            /**
             * 数据源发生改变
             * @method egret.gui.ListBase#dataProvider_collectionChangeHandler
             * @param event {CollectionEvent}
             */
            p.dataProvider_collectionChangeHandler = function (event) {
                var items = event.items;
                if (event.kind == gui.CollectionEventKind.ADD) {
                    var length = items.length;
                    for (var i = 0; i < length; i++) {
                        this.itemAdded(event.location + i);
                    }
                }
                else if (event.kind == gui.CollectionEventKind.REMOVE) {
                    length = items.length;
                    for (i = length - 1; i >= 0; i--) {
                        this.itemRemoved(event.location + i);
                    }
                }
                else if (event.kind == gui.CollectionEventKind.MOVE) {
                    this.itemRemoved(event.oldLocation);
                    this.itemAdded(event.location);
                }
                else if (event.kind == gui.CollectionEventKind.RESET) {
                    if (this.dataProvider.length == 0) {
                        this._setSelectedIndex(ListBase.NO_SELECTION, false);
                    }
                    else {
                        this.dataProviderChanged = true;
                        this.invalidateProperties();
                    }
                }
                else if (event.kind == gui.CollectionEventKind.REFRESH) {
                    this.dataProviderRefreshed();
                }
            };
            /**
             * 数据源刷新
             */
            p.dataProviderRefreshed = function () {
                this._setSelectedIndex(ListBase.NO_SELECTION, false);
            };
            /**
             * 未选中任何项时的索引值
             * @constant egret.gui.ListBase.NO_SELECTION
             */
            ListBase.NO_SELECTION = -1;
            /**
             * 未设置缓存选中项的值
             * @constant egret.gui.ListBase.NO_PROPOSED_SELECTION
             */
            ListBase.NO_PROPOSED_SELECTION = -2;
            /**
             * 自定义的选中项
             * @constant egret.gui.ListBase.CUSTOM_SELECTED_ITEM
             */
            ListBase.CUSTOM_SELECTED_ITEM = -3;
            ListBase.TYPE_MAP = { rollOver: "itemRollOver", rollOut: "itemRollOut" };
            return ListBase;
        })(gui.SkinnableDataContainer);
        gui.ListBase = ListBase;
        egret.registerClass(ListBase,"egret.gui.ListBase");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.List
         * @classdesc
         * 列表组件
         * @extends egret.gui.ListBase
         */
        var List = (function (_super) {
            __extends(List, _super);
            function List() {
                var _this = this;
                _super.call(this);
                this._allowMultipleSelection = false;
                this._selectedIndices = [];
                /**
                 * 是否是有效的索引
                 */
                this.isValidIndex = function (item, index, v) {
                    return _this.dataProvider && (item >= 0) && (item < _this.dataProvider.length);
                };
                /**
                 * 是否捕获ItemRenderer以便在MouseUp时抛出ItemClick事件
                 */
                this._captureItemRenderer = true;
                this._mouseDownItemRenderer = null;
                this.useVirtualLayout = true;
            }
            var d = __define,c=List;p=c.prototype;
            /**
             * 创建容器的子元素
             */
            p.createChildren = function () {
                if (!this.itemRenderer)
                    this.itemRenderer = gui.DataGroup.defaultRendererFactory;
                _super.prototype.createChildren.call(this);
            };
            d(p, "useVirtualLayout"
                /**
                 * 是否使用虚拟布局,默认true
                 * @member egret.gui.List#useVirtualLayout
                 */
                ,function () {
                    return this._getUseVirtualLayout();
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    this._setUseVirtualLayout(value);
                }
            );
            d(p, "allowMultipleSelection"
                /**
                 * 是否允许同时选中多项
                 * @member egret.gui.List#allowMultipleSelection
                 */
                ,function () {
                    return this._allowMultipleSelection;
                }
                ,function (value) {
                    this._allowMultipleSelection = value;
                }
            );
            d(p, "selectedIndices"
                /**
                 * 当前选中的一个或多个项目的索引列表
                 * @member egret.gui.List#selectedIndices
                 */
                ,function () {
                    if (this._proposedSelectedIndices)
                        return this._proposedSelectedIndices;
                    return this._selectedIndices;
                }
                ,function (value) {
                    this._setSelectedIndices(value, false);
                }
            );
            d(p, "selectedIndex"
                /**
                 * @member egret.gui.List#selectedIndex
                 */
                ,function () {
                    if (this._proposedSelectedIndices) {
                        if (this._proposedSelectedIndices.length > 0)
                            return this._proposedSelectedIndices[0];
                        return -1;
                    }
                    return this._getSelectedIndex();
                }
                ,function (value) {
                    this._setSelectedIndex(value);
                }
            );
            d(p, "selectedItems"
                /**
                 * 当前选中的一个或多个项目的数据源列表
                 * @member egret.gui.List#selectedItems
                 */
                ,function () {
                    var result = [];
                    var list = this.selectedIndices;
                    if (list) {
                        var count = list.length;
                        for (var i = 0; i < count; i++)
                            result[i] = this.dataProvider.getItemAt(list[i]);
                    }
                    return result;
                }
                ,function (value) {
                    var indices = [];
                    if (value) {
                        var count = value.length;
                        for (var i = 0; i < count; i++) {
                            var index = this.dataProvider.getItemIndex(value[i]);
                            if (index != -1) {
                                indices.splice(0, 0, index);
                            }
                            if (index == -1) {
                                indices = [];
                                break;
                            }
                        }
                    }
                    this._setSelectedIndices(indices, false);
                }
            );
            /**
             * 设置多个选中项
             */
            p._setSelectedIndices = function (value, dispatchChangeEvent) {
                if (dispatchChangeEvent === void 0) { dispatchChangeEvent = false; }
                if (dispatchChangeEvent)
                    this._dispatchChangeAfterSelection = (this._dispatchChangeAfterSelection || dispatchChangeEvent);
                if (value)
                    this._proposedSelectedIndices = value;
                else
                    this._proposedSelectedIndices = [];
                this.invalidateProperties();
            };
            /**
             * 处理对组件设置的属性
             * @method egret.gui.List#commitProperties
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this._proposedSelectedIndices) {
                    this.commitSelection();
                }
            };
            /**
             * @method egret.gui.List#commitSelection
             * @param dispatchChangedEvents {boolean}
             * @returns {boolean}
             */
            p.commitSelection = function (dispatchChangedEvents) {
                if (dispatchChangedEvents === void 0) { dispatchChangedEvents = true; }
                var oldSelectedIndex = this._selectedIndex;
                if (this._proposedSelectedIndices) {
                    this._proposedSelectedIndices = this._proposedSelectedIndices.filter(this.isValidIndex);
                    if (!this.allowMultipleSelection && this._proposedSelectedIndices.length > 0) {
                        var temp = [];
                        temp.push(this._proposedSelectedIndices[0]);
                        this._proposedSelectedIndices = temp;
                    }
                    if (this._proposedSelectedIndices.length > 0) {
                        this._proposedSelectedIndex = this._proposedSelectedIndices[0];
                    }
                    else {
                        this._proposedSelectedIndex = -1;
                    }
                }
                var retVal = _super.prototype.commitSelection.call(this, false);
                if (!retVal) {
                    this._proposedSelectedIndices = null;
                    return false;
                }
                if (this.selectedIndex > gui.ListBase.NO_SELECTION) {
                    if (this._proposedSelectedIndices) {
                        if (this._proposedSelectedIndices.indexOf(this.selectedIndex) == -1)
                            this._proposedSelectedIndices.push(this.selectedIndex);
                    }
                    else {
                        this._proposedSelectedIndices = [this.selectedIndex];
                    }
                }
                if (this._proposedSelectedIndices) {
                    if (this._proposedSelectedIndices.indexOf(oldSelectedIndex) != -1)
                        this.itemSelected(oldSelectedIndex, true);
                    this.commitMultipleSelection();
                }
                if (dispatchChangedEvents && retVal) {
                    if (this._dispatchChangeAfterSelection) {
                        gui.IndexChangeEvent.dispatchIndexChangeEvent(this, gui.IndexChangeEvent.CHANGE, oldSelectedIndex, this._selectedIndex);
                        this._dispatchChangeAfterSelection = false;
                    }
                    gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.VALUE_COMMIT);
                }
                return retVal;
            };
            /**
             * 提交多项选中项属性
             */
            p.commitMultipleSelection = function () {
                var removedItems = [];
                var addedItems = [];
                var i;
                var count;
                if (this._selectedIndices.length > 0 && this._proposedSelectedIndices.length > 0) {
                    count = this._proposedSelectedIndices.length;
                    for (i = 0; i < count; i++) {
                        if (this._selectedIndices.indexOf(this._proposedSelectedIndices[i]) == -1)
                            addedItems.push(this._proposedSelectedIndices[i]);
                    }
                    count = this._selectedIndices.length;
                    for (i = 0; i < count; i++) {
                        if (this._proposedSelectedIndices.indexOf(this._selectedIndices[i]) == -1)
                            removedItems.push(this._selectedIndices[i]);
                    }
                }
                else if (this._selectedIndices.length > 0) {
                    removedItems = this._selectedIndices;
                }
                else if (this._proposedSelectedIndices.length > 0) {
                    addedItems = this._proposedSelectedIndices;
                }
                this._selectedIndices = this._proposedSelectedIndices;
                if (removedItems.length > 0) {
                    count = removedItems.length;
                    for (i = 0; i < count; i++) {
                        this.itemSelected(removedItems[i], false);
                    }
                }
                if (addedItems.length > 0) {
                    count = addedItems.length;
                    for (i = 0; i < count; i++) {
                        this.itemSelected(addedItems[i], true);
                    }
                }
                this._proposedSelectedIndices = null;
            };
            /**
             *
             * @param index
             * @returns {boolean}
             * @private
             */
            p._isItemIndexSelected = function (index) {
                if (this._allowMultipleSelection)
                    return this._selectedIndices.indexOf(index) != -1;
                return _super.prototype._isItemIndexSelected.call(this, index);
            };
            p.dataGroup_rendererAddHandler = function (event) {
                _super.prototype.dataGroup_rendererAddHandler.call(this, event);
                var renderer = (event.renderer);
                if (renderer == null)
                    return;
                renderer.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this._item_touchBeginHandler, this);
                //由于ItemRenderer.mouseChildren有可能不为false，在鼠标按下时会出现切换素材的情况，
                //导致target变化而无法抛出原生的click事件,所以此处监听MouseUp来抛出ItemClick事件。
                renderer.addEventListener(egret.TouchEvent.TOUCH_END, this._item_touchEndHandler, this);
            };
            /**
             * 数据源发生刷新
             */
            p.dataProviderRefreshed = function () {
                if (this._allowMultipleSelection) {
                    return;
                }
                _super.prototype.dataProviderRefreshed.call(this);
            };
            p.dataGroup_rendererRemoveHandler = function (event) {
                _super.prototype.dataGroup_rendererRemoveHandler.call(this, event);
                var renderer = (event.renderer);
                if (renderer == null)
                    return;
                renderer.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this._item_touchBeginHandler, this);
                renderer.removeEventListener(egret.TouchEvent.TOUCH_END, this._item_touchEndHandler, this);
            };
            /**
             * 鼠标在项呈示器上按下
             * @method egret.gui.List#item_mouseDownHandler
             * @param event {TouchEvent}
             */
            p._item_touchBeginHandler = function (event) {
                if (event.$isDefaultPrevented)
                    return;
                var itemRenderer = (event.currentTarget);
                this._mouseDownItemRenderer = itemRenderer;
                gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.stage_touchEndHandler, this);
                gui.UIGlobals.stage.addEventListener(egret.Event.LEAVE_STAGE, this.stage_touchEndHandler, this);
            };
            /**
             * 计算当前的选中项列表
             */
            p.calculateSelectedIndices = function (index) {
                var interval = [];
                if (this._selectedIndices.length > 0) {
                    if (this._selectedIndices.length == 1 && (this._selectedIndices[0] == index)) {
                        if (!this.requireSelection)
                            return interval;
                        interval.splice(0, 0, this._selectedIndices[0]);
                        return interval;
                    }
                    else {
                        var found = false;
                        for (var i = 0; i < this._selectedIndices.length; i++) {
                            if (this._selectedIndices[i] == index)
                                found = true;
                            else if (this._selectedIndices[i] != index)
                                interval.splice(0, 0, this._selectedIndices[i]);
                        }
                        if (!found) {
                            interval.splice(0, 0, index);
                        }
                        return interval;
                    }
                }
                else {
                    interval.splice(0, 0, index);
                    return interval;
                }
            };
            /**
             * 鼠标在项呈示器上弹起，抛出ItemClick事件。
             */
            p._item_touchEndHandler = function (event) {
                var itemRenderer = (event.currentTarget);
                if (itemRenderer != this._mouseDownItemRenderer)
                    return;
                var newIndex;
                if (itemRenderer)
                    newIndex = itemRenderer.itemIndex;
                else
                    newIndex = this.dataGroup.getElementIndex((event.currentTarget));
                if (this._allowMultipleSelection) {
                    this._setSelectedIndices(this.calculateSelectedIndices(newIndex), true);
                }
                else {
                    this._setSelectedIndex(newIndex, true);
                }
                if (!this._captureItemRenderer)
                    return;
                this._dispatchListEvent(event, gui.ListEvent.ITEM_CLICK, itemRenderer);
            };
            /**
             * 鼠标在舞台上弹起
             */
            p.stage_touchEndHandler = function (event) {
                gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stage_touchEndHandler, this);
                gui.UIGlobals.stage.removeEventListener(egret.Event.LEAVE_STAGE, this.stage_touchEndHandler, this);
                this._mouseDownItemRenderer = null;
            };
            return List;
        })(gui.ListBase);
        gui.List = List;
        egret.registerClass(List,"egret.gui.List");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.DropDownListBase
         * @classdesc
         * 下拉列表控件基类
         * @extends egret.gui.List
         */
        var DropDownListBase = (function (_super) {
            __extends(DropDownListBase, _super);
            /**
             * 构造函数
             * @method egret.gui.DropDownListBase#constructor
             */
            function DropDownListBase() {
                _super.call(this);
                /**
                 * [SkinPart]下拉区域显示对象
                 * @member egret.gui.DropDownListBase#dropDown
                 */
                this.dropDown = null;
                /**
                 * [SkinPart]下拉触发按钮
                 * @member egret.gui.DropDownListBase#openButton
                 */
                this.openButton = null;
                /**
                 * 文本改变标志
                 */
                this._labelChanged = false;
                this._dropDownController = null;
                this._userProposedSelectedIndex = gui.ListBase.NO_SELECTION;
                this._captureItemRenderer = false;
                this.dropDownController = new gui.DropDownController();
            }
            var d = __define,c=DropDownListBase;p=c.prototype;
            /**
             * @inheritDoc
             */
            p._setDataProvider = function (value) {
                if (this.dataProvider === value)
                    return;
                _super.prototype._setDataProvider.call(this, value);
                this._labelChanged = true;
                this.invalidateProperties();
            };
            /**
             * @inheritDoc
             */
            p._setLabelField = function (value) {
                if (this.labelField == value)
                    return;
                _super.prototype._setLabelField.call(this, value);
                this._labelChanged = true;
                this.invalidateProperties();
            };
            /**
             * @inheritDoc
             */
            p._setLabelFunction = function (value) {
                if (this.labelFunction == value)
                    return;
                _super.prototype._setLabelFunction.call(this, value);
                this._labelChanged = true;
                this.invalidateProperties();
            };
            d(p, "dropDownController"
                /**
                 * 下拉控制器
                 * @member egret.gui.DropDownListBase#dropDownController
                 */
                ,function () {
                    return this._dropDownController;
                }
                ,function (value) {
                    if (this._dropDownController == value)
                        return;
                    this._dropDownController = value;
                    this._dropDownController.addEventListener(gui.UIEvent.OPEN, this._dropDownController_openHandler, this);
                    this._dropDownController.addEventListener(gui.UIEvent.CLOSE, this.dropDownController_closeHandler, this);
                    if (this.openButton)
                        this._dropDownController.openButton = this.openButton;
                    if (this.dropDown)
                        this._dropDownController.dropDown = this.dropDown;
                }
            );
            d(p, "isDropDownOpen"
                /**
                 * 下拉列表是否已经已打开
                 * @member egret.gui.DropDownListBase#isDropDownOpen
                 */
                ,function () {
                    if (this.dropDownController)
                        return this.dropDownController.isOpen;
                    else
                        return false;
                }
            );
            /**
             * 处理对组件设置的属性
             * @method egret.gui.DropDownListBase#commitProperties
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this._labelChanged) {
                    this._labelChanged = false;
                    this.updateLabelDisplay();
                }
            };
            /**
             * 添加外观部件时调用
             * @method egret.gui.DropDownListBase#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.openButton) {
                    if (this.dropDownController)
                        this.dropDownController.openButton = this.openButton;
                }
                else if (instance == this.dropDown && this.dropDownController) {
                    this.dropDownController.dropDown = this.dropDown;
                }
            };
            /**
             * 正删除外观部件的实例时调用
             * @method egret.gui.DropDownListBase#partRemoved
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                if (this.dropDownController) {
                    if (instance == this.openButton)
                        this.dropDownController.openButton = null;
                    if (instance == this.dropDown)
                        this.dropDownController.dropDown = null;
                }
                _super.prototype.partRemoved.call(this, partName, instance);
            };
            /**
             * 返回要应用到外观的状态的名称
             * @method egret.gui.DropDownListBase#getCurrentSkinState
             * @returns {string}
             */
            p.getCurrentSkinState = function () {
                return !this.enabled ? "disabled" : this.isDropDownOpen ? "open" : "normal";
            };
            /**
             * @method egret.gui.DropDownListBase#commitSelection
             * @param dispatchChangedEvents {boolean}
             * @returns {boolean}
             */
            p.commitSelection = function (dispatchChangedEvents) {
                if (dispatchChangedEvents === void 0) { dispatchChangedEvents = true; }
                var retVal = _super.prototype.commitSelection.call(this, dispatchChangedEvents);
                this.updateLabelDisplay();
                return retVal;
            };
            /**
             * @method egret.gui.DropDownListBase#_isItemIndexSelected
             * @param index {number}
             * @returns {boolean}
             */
            p._isItemIndexSelected = function (index) {
                return this._userProposedSelectedIndex == index;
            };
            /**
             * 打开下拉列表并抛出UIEvent.OPEN事件。
             * @method egret.gui.DropDownListBase#openDropDown
             */
            p.openDropDown = function () {
                this.dropDownController.openDropDown();
            };
            /**
             * 关闭下拉列表并抛出UIEvent.CLOSE事件。
             * @method egret.gui.DropDownListBase#closeDropDown
             * @param commit {boolean}
             */
            p.closeDropDown = function (commit) {
                this.dropDownController.closeDropDown(commit);
            };
            /**
             * 更新选中项的提示文本
             * @method egret.gui.DropDownListBase#updateLabelDisplay
             * @param displayItem {any}
             */
            p.updateLabelDisplay = function (displayItem) {
                if (displayItem === void 0) { displayItem = undefined; }
            };
            /**
             * 改变高亮的选中项
             * @param newIndex {number}
             * @param scrollToTop {boolean}
             */
            p._changeHighlightedSelection = function (newIndex, scrollToTop) {
                if (scrollToTop === void 0) { scrollToTop = false; }
                this.itemSelected(this._userProposedSelectedIndex, false);
                this._userProposedSelectedIndex = newIndex;
                this.itemSelected(this._userProposedSelectedIndex, true);
            };
            p.dataProvider_collectionChangeHandler = function (event) {
                _super.prototype.dataProvider_collectionChangeHandler.call(this, event);
                this._labelChanged = true;
                this.invalidateProperties();
            };
            /**
             * @method egret.gui.DropDownListBase#item_mouseDownHandler
             * @param event {TouchEvent}
             */
            p._item_touchEndHandler = function (event) {
                _super.prototype._item_touchEndHandler.call(this, event);
                var itemRenderer = (event.currentTarget);
                if (itemRenderer != this._mouseDownItemRenderer)
                    return;
                this._dispatchListEvent(event, gui.ListEvent.ITEM_CLICK, itemRenderer);
                this._userProposedSelectedIndex = this.selectedIndex;
                this.closeDropDown(true);
            };
            /**
             * 控制器抛出打开列表事件
             */
            p._dropDownController_openHandler = function (event) {
                this.addEventListener(gui.UIEvent.UPDATE_COMPLETE, this._open_updateCompleteHandler, this);
                this._userProposedSelectedIndex = this.selectedIndex;
                this.invalidateSkinState();
            };
            /**
             * 打开列表后组件一次失效验证全部完成
             */
            p._open_updateCompleteHandler = function (event) {
                this.removeEventListener(gui.UIEvent.UPDATE_COMPLETE, this._open_updateCompleteHandler, this);
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.OPEN);
            };
            /**
             * 控制器抛出关闭列表事件
             * @method egret.gui.DropDownListBase#dropDownController_closeHandler
             * @param event {UIEvent}
             */
            p.dropDownController_closeHandler = function (event) {
                this.addEventListener(gui.UIEvent.UPDATE_COMPLETE, this.close_updateCompleteHandler, this);
                this.invalidateSkinState();
                if (!event.isDefaultPrevented()) {
                    this._setSelectedIndex(this._userProposedSelectedIndex, true);
                }
                else {
                    this._changeHighlightedSelection(this.selectedIndex);
                }
            };
            /**
             * 关闭列表后组件一次失效验证全部完成
             */
            p.close_updateCompleteHandler = function (event) {
                this.removeEventListener(gui.UIEvent.UPDATE_COMPLETE, this.close_updateCompleteHandler, this);
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CLOSE);
            };
            /**
             * @constant egret.gui.DropDownListBase.PAGE_SIZE
             */
            DropDownListBase.PAGE_SIZE = 5;
            return DropDownListBase;
        })(gui.List);
        gui.DropDownListBase = DropDownListBase;
        egret.registerClass(DropDownListBase,"egret.gui.DropDownListBase");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.DropDownList
         * @classdesc
         * 不可输入的下拉列表控件。带输入功能的下拉列表控件，请使用ComboBox。
         * @extends egret.gui.DropDownListBase
         */
        var DropDownList = (function (_super) {
            __extends(DropDownList, _super);
            /**
             * 构造函数
             * @method egret.gui.DropDownList#constructor
             */
            function DropDownList() {
                _super.call(this);
                /**
                 * [SkinPart]选中项文本
                 * @member egret.gui.DropDownList#labelDisplay
                 */
                this.labelDisplay = null;
                this._prompt = "";
            }
            var d = __define,c=DropDownList;p=c.prototype;
            d(p, "prompt"
                /**
                 * 当没有选中项时在DropDownList上要显示的字符串。<p/>
                 * 它通常是一个类似于“请选择一项...”的文本。当下拉列表中的某个项目被选中后，会被替换为该选定项目中的文本。
                 * @member egret.gui.DropDownList#prompt
                 */
                ,function () {
                    return this._prompt;
                }
                ,function (value) {
                    if (this._prompt == value)
                        return;
                    this._prompt = value;
                    this._labelChanged = true;
                    this.invalidateProperties();
                }
            );
            /**
             * 添加外观部件时调用
             * @method egret.gui.DropDownList#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.labelDisplay) {
                    this._labelChanged = true;
                    this.invalidateProperties();
                }
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @param displayItem
             */
            p.updateLabelDisplay = function (displayItem) {
                if (displayItem === void 0) { displayItem = undefined; }
                if (this.labelDisplay) {
                    if (displayItem == undefined)
                        displayItem = this.selectedItem;
                    if (displayItem != null && displayItem != undefined)
                        this.labelDisplay.text = this.itemToLabel(displayItem);
                    else
                        this.labelDisplay.text = this._prompt;
                }
            };
            return DropDownList;
        })(gui.DropDownListBase);
        gui.DropDownList = DropDownList;
        egret.registerClass(DropDownList,"egret.gui.DropDownList");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TextBase
         * @classdesc
         * 文本基类,实现对文本的自动布局，样式属性设置。
         * @extends egret.gui.UIComponent
         * @implements egret.gui.IDisplayText
         */
        var TextBase = (function (_super) {
            __extends(TextBase, _super);
            /**
             * 构造函数
             * @method egret.gui.TextBase#constructor
             */
            function TextBase() {
                _super.call(this);
                /**
                 * 呈示此文本的内部 TextField
                 */
                this._textField = null;
                this.allStyleChanged = false;
                this.fontFamilyChanged = false;
                this._fontFamily = "SimSun";
                this._sizeChanged = false;
                this._size = 30;
                this._focusEnabled = true;
                this.boldChanged = false;
                this._bold = false;
                this.italicChanged = false;
                this._italic = false;
                this.textAlignChanged = false;
                this._textAlign = egret.HorizontalAlign.LEFT;
                this.verticalAlignChanged = false;
                this._verticalAlign = egret.VerticalAlign.TOP;
                this.lineSpacingChanged = false;
                this._lineSpacing = 0;
                this.textColorChanged = false;
                this._textColor = 0xFFFFFF;
                /**
                 * @member egret.gui.TextBase#_textChanged
                 */
                this._textChanged = false;
                this._text = "";
                this._textFlow = null;
                this._textFlowChanged = false;
                this._UIC_Props_._hasNoStyleChild = true;
            }
            var d = __define,c=TextBase;p=c.prototype;
            /**
             * 检测对样式属性的更改
             * @param styleProp
             */
            p.styleChanged = function (styleProp) {
                if (this.allStyleChanged) {
                    return;
                }
                if (styleProp) {
                    switch (styleProp) {
                        case "textColor":
                            this.textColorChanged = true;
                            break;
                        case "fontFamily":
                            this.fontFamilyChanged = true;
                            break;
                        case "size":
                            this._sizeChanged = true;
                            break;
                        case "bold":
                            this.boldChanged = true;
                            break;
                        case "italic":
                            this.italicChanged = true;
                            break;
                        case "textAlign":
                            this.textAlignChanged = true;
                            break;
                        case "verticalAlign":
                            this.verticalAlignChanged = true;
                            break;
                    }
                }
                else {
                    this.allStyleChanged = true;
                }
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            d(p, "fontFamily"
                /**
                 * 字体名称 。默认值：SimSun
                 * @member egret.gui.TextBase#fontFamily
                 */
                ,function () {
                    var chain = this._UIC_Props_._styleProtoChain;
                    if (chain && chain["fontFamily"] !== undefined) {
                        return chain["fontFamily"];
                    }
                    return this._fontFamily;
                }
                ,function (value) {
                    this.setStyle("fontFamily", value);
                }
            );
            d(p, "size"
                /**
                 * 字号大小,默认值30 。
                 * @member egret.gui.TextBase#size
                 */
                ,function () {
                    var chain = this._UIC_Props_._styleProtoChain;
                    if (chain && chain["size"] !== undefined) {
                        return chain["size"];
                    }
                    return this._size;
                }
                ,function (value) {
                    if (value === undefined)
                        value = 0;
                    this.setStyle("size", value);
                }
            );
            d(p, "focusEnabled"
                ,function () {
                    return this._focusEnabled;
                }
                ,function (value) {
                    this._focusEnabled = value;
                }
            );
            /**
             * 设置此组件的焦点
             * @inheritDoc
             */
            p.setFocus = function () {
                if (this._focusEnabled == false)
                    return;
                if (this._textField)
                    this._textField.setFocus();
                //else
                //	super.setFocus();
            };
            d(p, "bold"
                /**
                 * 是否显示为粗体，默认false。
                 * @member egret.gui.TextBase#bold
                 */
                ,function () {
                    var chain = this._UIC_Props_._styleProtoChain;
                    if (chain && chain["bold"] !== undefined) {
                        return chain["bold"];
                    }
                    return this._bold;
                }
                ,function (value) {
                    this.setStyle("bold", value);
                }
            );
            d(p, "italic"
                /**
                 * 是否显示为斜体，默认false。
                 * @member egret.gui.TextBase#italic
                 */
                ,function () {
                    var chain = this._UIC_Props_._styleProtoChain;
                    if (chain && chain["italic"] !== undefined) {
                        return chain["italic"];
                    }
                    return this._italic;
                }
                ,function (value) {
                    this.setStyle("italic", value);
                }
            );
            d(p, "textAlign"
                /**
                 * 文字的水平对齐方式 ,请使用HorizontalAlign中定义的常量。
                 * 默认值：HorizontalAlign.LEFT。
                 * @member egret.gui.TextBase#textAlign
                 */
                ,function () {
                    var chain = this._UIC_Props_._styleProtoChain;
                    if (chain && chain["textAlign"] !== undefined) {
                        return chain["textAlign"];
                    }
                    return this._textAlign;
                }
                ,function (value) {
                    this.setStyle("textAlign", value);
                }
            );
            d(p, "verticalAlign"
                /**
                 * 文字的垂直对齐方式 ,请使用VerticalAlign中定义的常量。
                 * 默认值：VerticalAlign.TOP。
                 * @member egret.gui.TextBase#verticalAlign
                 */
                ,function () {
                    var chain = this._UIC_Props_._styleProtoChain;
                    if (chain && chain["verticalAlign"] !== undefined) {
                        return chain["verticalAlign"];
                    }
                    return this._verticalAlign;
                }
                ,function (value) {
                    this.setStyle("verticalAlign", value);
                }
            );
            d(p, "lineSpacing"
                /**
                 * 行间距
                 * @member egret.gui.TextBase#lineSpacing
                 */
                ,function () {
                    return this._getLineSpacing();
                }
                ,function (value) {
                    this._setLineSpacing(value);
                }
            );
            p._getLineSpacing = function () {
                return this._lineSpacing;
            };
            p._setLineSpacing = function (value) {
                if (this._lineSpacing == value)
                    return;
                this._lineSpacing = value;
                this.lineSpacingChanged = true;
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            d(p, "textColor"
                /**
                 * 文本颜色
                 * @member egret.gui.TextBase#textColor
                 */
                ,function () {
                    var chain = this._UIC_Props_._styleProtoChain;
                    if (chain && chain["textColor"] !== undefined) {
                        return chain["textColor"];
                    }
                    return this._textColor;
                }
                ,function (value) {
                    this.setStyle("textColor", value);
                }
            );
            d(p, "text"
                /**
                 * 获得文体内容
                 * @member egret.gui.TextBase#text
                 */
                ,function () {
                    return this._text;
                }
                ,function (value) {
                    if (value == this._text)
                        return;
                    this._text = value || "";
                    this._textChanged = true;
                    this._textFlowChanged = false;
                    this._textFlow = [];
                    this.invalidateProperties();
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "textFlow"
                ,function () {
                    return this._textFlow;
                }
                ,function (value) {
                    this._textFlow = value || [];
                    this._textFlowChanged = true;
                    this._textChanged = false;
                    this._text = "";
                    this.invalidateProperties();
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "textHeight"
                /**
                 * 文本全部显示时的高度（无行间距）
                 */
                ,function () {
                    return this._textField == null ? 0 : this._textField.textHeight;
                }
            );
            d(p, "textWidth"
                /**
                 * 文本全部显示时宽
                 */
                ,function () {
                    return this._textField == null ? 0 : this._textField.textWidth;
                }
            );
            /**
             * 创建组件的子对象
             */
            p.createChildren = function () {
                _super.prototype.createChildren.call(this);
                if (!this._textField) {
                    this.checkTextField();
                }
            };
            /**
             * 处理对组件设置的属性
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (!this._textField) {
                    this.checkTextField();
                }
                if (this.allStyleChanged) {
                    this.allStyleChanged = false;
                    this.textColorChanged = true;
                    this.fontFamilyChanged = true;
                    this._sizeChanged = true;
                    this.boldChanged = true;
                    this.italicChanged = true;
                    this.textAlignChanged = true;
                    this.verticalAlignChanged = true;
                }
                if (this.fontFamilyChanged) {
                    this._textField.fontFamily = this.fontFamily;
                    this.fontFamilyChanged = false;
                }
                if (this._sizeChanged) {
                    this._textField.size = this.size;
                    this._sizeChanged = false;
                }
                if (this.boldChanged) {
                    this._textField.bold = this.bold;
                    this.boldChanged = false;
                }
                if (this.italic) {
                    this._textField.italic = this.italic;
                    this.italicChanged = false;
                }
                if (this.textAlignChanged) {
                    this._textField.textAlign = this.textAlign;
                    this.textAlignChanged = false;
                }
                if (this.verticalAlignChanged) {
                    this._textField.verticalAlign = this.verticalAlign;
                    this.verticalAlignChanged = false;
                }
                if (this.lineSpacingChanged) {
                    this._textField.lineSpacing = this._lineSpacing;
                    this.lineSpacingChanged = false;
                }
                if (this.textColorChanged) {
                    this._textField.textColor = this.textColor;
                    this.textColorChanged = false;
                }
                if (this._textChanged) {
                    this._textField.text = this._text;
                }
                if (this._textFlowChanged) {
                    this._textField.textFlow = this._textFlow;
                }
                if (this._textChanged || this._textFlowChanged) {
                    this._text = this._textField.text;
                    this._textFlow = this._textField.textFlow;
                    this._textChanged = false;
                    this._textFlowChanged = false;
                }
            };
            /**
             * 检查是否创建了textField对象，没有就创建一个。
             */
            p.checkTextField = function () {
                if (!this._textField) {
                    this._createTextField();
                    if (this._textChanged) {
                        this._textField.text = this._text;
                    }
                    if (this._textFlowChanged) {
                        this._textField.textFlow = this._textFlow;
                    }
                    this.invalidateProperties();
                }
            };
            p._createTextField = function () {
                this._textField = new egret.TextField;
                this._textField.fontFamily = this.fontFamily;
                this._textField.size = this.size;
                this._textField.textAlign = this.textAlign;
                this._textField.verticalAlign = this.verticalAlign;
                this._textField.lineSpacing = this._lineSpacing;
                this._textField.textColor = this.textColor;
                this._textField.multiline = true;
                this._addToDisplayList(this._textField);
            };
            p._textFieldChanged = function () {
                this._text = this._textField.text;
                this._textFlow = this._textField.textFlow;
            };
            /**
             * 计算组件的默认大小和（可选）默认最小大小
             */
            p.measure = function () {
                _super.prototype.measure.call(this);
                this.measuredWidth = TextBase.DEFAULT_MEASURED_WIDTH;
                this.measuredHeight = TextBase.DEFAULT_MEASURED_HEIGHT;
            };
            /**
             * 更新显示列表
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.$updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            };
            /**
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                this._textField.width = unscaledWidth;
                this._textField.height = unscaledHeight;
            };
            /**
             * 更新属性时调度 PropertyChangeEvent 的 Helper 方法
             * @param propertyName
             * @param oldValue
             * @param value
             */
            p.dispatchPropertyChangeEvent = function (propertyName, oldValue, value) {
                if (this.hasEventListener("propertyChange"))
                    gui.PropertyChangeEvent.dispatchPropertyChangeEvent(this, gui.PropertyChangeEventKind.UPDATE, propertyName, oldValue, value, this);
            };
            /**
             * 默认的文本测量宽度
             * @constant egret.gui.TextBase.DEFAULT_MEASURED_WIDTH
             */
            TextBase.DEFAULT_MEASURED_WIDTH = 160;
            /**
             * 默认的文本测量高度
             * @constant egret.gui.TextBase.DEFAULT_MEASURED_HEIGHT
             */
            TextBase.DEFAULT_MEASURED_HEIGHT = 22;
            return TextBase;
        })(gui.UIComponent);
        gui.TextBase = TextBase;
        egret.registerClass(TextBase,"egret.gui.TextBase",["egret.gui.IDisplayText","egret.gui.IUIComponent","egret.gui.IVisualElement","egret.gui.ILayoutElement","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         *
         */
        var EditableText = (function (_super) {
            __extends(EditableText, _super);
            function EditableText() {
                _super.call(this);
                this._selectable = true;
                this._displayAsPassword = false;
                this.displayAsPasswordChanged = true;
                this.pendingEditable = true;
                this._editable = true;
                this.editableChanged = false;
                this._maxChars = 0;
                this.maxCharsChanged = false;
                this._multiline = false;
                this.multilineChanged = false;
                this._restrict = null;
                this.restrictChanged = false;
                this._heightInLines = NaN;
                this.heightInLinesChanged = false;
                this._widthInChars = NaN;
                this.widthInCharsChanged = false;
                this._contentWidth = 0;
                this._contentHeight = 0;
                this._horizontalScrollPosition = 0;
                this._verticalScrollPosition = 0;
                this._clipAndEnableScrolling = false;
                /**
                 * heightInLines计算出来的默认高度。
                 */
                this.defaultHeight = NaN;
                /**
                 * widthInChars计算出来的默认宽度。
                 */
                this.defaultWidth = NaN;
                this.isValidating = false;
                this.selectable = true;
            }
            var d = __define,c=EditableText;p=c.prototype;
            d(p, "selectable"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._selectable;
                }
                ,function (value) {
                    this._selectable = value;
                }
            );
            d(p, "displayAsPassword"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._displayAsPassword;
                }
                ,function (value) {
                    if (value == this._displayAsPassword)
                        return;
                    this._displayAsPassword = value;
                    this.displayAsPasswordChanged = true;
                    this.invalidateProperties();
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "editable"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    if (this._UIC_Props_._enabled)
                        return this._editable;
                    return this.pendingEditable;
                }
                ,function (value) {
                    if (this._editable == value)
                        return;
                    if (this._UIC_Props_._enabled) {
                        this._editable = value;
                        this.editableChanged = true;
                        this.invalidateProperties();
                    }
                    else {
                        this.pendingEditable = value;
                    }
                }
            );
            d(p, "enabled"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._editable;
                }
                ,function (value) {
                    if (value == this._UIC_Props_._enabled)
                        return;
                    this._UIC_Props_._enabled = value;
                    if (this._UIC_Props_._enabled) {
                        if (this._editable != this.pendingEditable)
                            this.editableChanged = true;
                        this._editable = this.pendingEditable;
                    }
                    else {
                        if (this.editable)
                            this.editableChanged = true;
                        this.pendingEditable = this._editable;
                        this._editable = false;
                    }
                    this.invalidateProperties();
                }
            );
            d(p, "maxChars"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._maxChars;
                }
                ,function (value) {
                    if (value === undefined)
                        value = 0;
                    if (value == this._maxChars)
                        return;
                    this._maxChars = value;
                    this.maxCharsChanged = true;
                    this.invalidateProperties();
                }
            );
            d(p, "multiline"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._multiline;
                }
                ,function (value) {
                    if (value == this.multiline)
                        return;
                    this._multiline = value;
                    this.multilineChanged = true;
                    this.invalidateProperties();
                }
            );
            d(p, "restrict"
                /**
                 * @deprecated
                 * TextFiled里还没实现这个接口，等实现之后再去掉废弃标志。目前暂时不要使用它。
                 */
                ,function () {
                    return this._restrict;
                }
                ,function (value) {
                    if (value == this._restrict)
                        return;
                    this._restrict = value;
                    this.restrictChanged = true;
                    this.invalidateProperties();
                }
            );
            p.styleChanged = function (styleProp) {
                _super.prototype.styleChanged.call(this, styleProp);
                if (!styleProp || styleProp == "size") {
                    this.heightInLinesChanged = true;
                    this.widthInCharsChanged = true;
                }
            };
            p._setLineSpacing = function (value) {
                if (this._lineSpacing == value)
                    return;
                _super.prototype._setLineSpacing.call(this, value);
                this.heightInLinesChanged = true;
            };
            d(p, "heightInLines"
                /**
                 * 控件的默认高度（以行为单位测量）。 若设置了multiline属性为false，则忽略此属性。
                 */
                ,function () {
                    return this._heightInLines;
                }
                ,function (value) {
                    if (this._heightInLines == value)
                        return;
                    this._heightInLines = value;
                    this.heightInLinesChanged = true;
                    this.invalidateProperties();
                }
            );
            d(p, "widthInChars"
                /**
                 * 控件的默认宽度（使用字号：size为单位测量）。 若同时设置了maxChars属性，将会根据两者测量结果的最小值作为测量宽度。
                 */
                ,function () {
                    return this._widthInChars;
                }
                ,function (value) {
                    if (this._widthInChars == value)
                        return;
                    this._widthInChars = value;
                    this.widthInCharsChanged = true;
                    this.invalidateProperties();
                }
            );
            d(p, "contentWidth"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._contentWidth;
                }
            );
            p.setContentWidth = function (value) {
                if (value == this._contentWidth)
                    return;
                var oldValue = this._contentWidth;
                this._contentWidth = value;
                this.dispatchPropertyChangeEvent("contentWidth", oldValue, value);
            };
            d(p, "contentHeight"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._contentHeight;
                }
            );
            p.setContentHeight = function (value) {
                if (value == this._contentHeight)
                    return;
                var oldValue = this._contentHeight;
                this._contentHeight = value;
                this.dispatchPropertyChangeEvent("contentHeight", oldValue, value);
            };
            d(p, "horizontalScrollPosition"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._horizontalScrollPosition;
                }
                ,function (value) {
                    if (this._horizontalScrollPosition == value)
                        return;
                    this._horizontalScrollPosition = value;
                }
            );
            d(p, "verticalScrollPosition"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._verticalScrollPosition;
                }
                ,function (value) {
                    if (this._verticalScrollPosition == value)
                        return;
                    value = Math.round(value);
                    this._verticalScrollPosition = value;
                }
            );
            /**
             * 根据垂直像素位置获取对应的垂直滚动位置
             */
            p.getScrollVByVertitcalPos = function (value) {
                if (this._textField.numLines == 0)
                    return 1;
                var lineHeight = this._textField.$getLineHeight();
                var offsetHeight = (this.height - 4) % lineHeight;
                if (this._textField.height + offsetHeight - this.height == value) {
                    return this._textField.maxScrollV;
                }
                return parseInt(((value - 2) / lineHeight)) + 1;
            };
            /**
             * 根据垂直滚动位置获取对应的垂直像位置
             */
            p.getVerticalPosByScrollV = function (scrollV) {
                if (scrollV === void 0) { scrollV = 0; }
                if (scrollV == 1 || this._textField.numLines == 0)
                    return 0;
                var lineHeight = this._textField.$getLineHeight();
                if (scrollV == this._textField.maxScrollV) {
                    var offsetHeight = (this.height - 4) % lineHeight;
                    return this._textField.height + offsetHeight - this.height;
                }
                return lineHeight * (scrollV - 1) + 2;
            };
            /**
             * @inheritDoc
             */
            p.getHorizontalScrollPositionDelta = function (navigationUnit) {
                if (navigationUnit === void 0) { navigationUnit = 0; }
                var delta = 0;
                var maxDelta = this._contentWidth - this._horizontalScrollPosition - this.width;
                var minDelta = -this._horizontalScrollPosition;
                switch (navigationUnit) {
                    case gui.NavigationUnit.LEFT:
                        delta = this._horizontalScrollPosition <= 0 ? 0 : Math.max(minDelta, -this.size);
                        break;
                    case gui.NavigationUnit.RIGHT:
                        delta = (this._horizontalScrollPosition + this.width >= this.contentWidth) ? 0 : Math.min(maxDelta, this.size);
                        break;
                    case gui.NavigationUnit.PAGE_LEFT:
                        delta = Math.max(minDelta, -this.width);
                        break;
                    case gui.NavigationUnit.PAGE_RIGHT:
                        delta = Math.min(maxDelta, this.width);
                        break;
                    case gui.NavigationUnit.HOME:
                        delta = minDelta;
                        break;
                    case gui.NavigationUnit.END:
                        delta = maxDelta;
                        break;
                }
                return delta;
            };
            /**
             * @inheritDoc
             */
            p.getVerticalScrollPositionDelta = function (navigationUnit) {
                if (navigationUnit === void 0) { navigationUnit = 0; }
                var delta = 0;
                var maxDelta = this._contentHeight - this._verticalScrollPosition - this.height;
                var minDelta = -this._verticalScrollPosition;
                switch (navigationUnit) {
                    case gui.NavigationUnit.UP:
                        delta = this.getVScrollDelta(-1);
                        break;
                    case gui.NavigationUnit.DOWN:
                        delta = this.getVScrollDelta(1);
                        break;
                    case gui.NavigationUnit.PAGE_UP:
                        delta = Math.max(minDelta, -this.width);
                        break;
                    case gui.NavigationUnit.PAGE_DOWN:
                        delta = Math.min(maxDelta, this.width);
                        break;
                    case gui.NavigationUnit.HOME:
                        delta = minDelta;
                        break;
                    case gui.NavigationUnit.END:
                        delta = maxDelta;
                        break;
                }
                return delta;
            };
            /**
             * 返回指定偏移行数的滚动条偏移量
             */
            p.getVScrollDelta = function (offsetLine) {
                if (offsetLine === void 0) { offsetLine = 0; }
                if (!this._textField)
                    return 0;
                var currentScrollV = this.getScrollVByVertitcalPos(this._verticalScrollPosition);
                var scrollV = currentScrollV + offsetLine;
                scrollV = Math.max(1, Math.min(this._textField.maxScrollV, scrollV));
                var startPos = this.getVerticalPosByScrollV(scrollV);
                var delta = startPos - this._verticalScrollPosition;
                return delta;
            };
            d(p, "clipAndEnableScrolling"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._clipAndEnableScrolling;
                }
                ,function (value) {
                    if (this._clipAndEnableScrolling == value)
                        return;
                    this._clipAndEnableScrolling = value;
                }
            );
            /**
             * 处理对组件设置的属性
             * @inheritDoc
             */
            p.commitProperties = function () {
                if (!this._textField) {
                    this.editableChanged = true;
                    this.displayAsPasswordChanged = true;
                    this.maxCharsChanged = true;
                    this.multilineChanged = true;
                    this.restrictChanged = true;
                }
                _super.prototype.commitProperties.call(this);
                if (this.editableChanged) {
                    this._textField.type = this._editable ? egret.TextFieldType.INPUT : egret.TextFieldType.DYNAMIC;
                    this.editableChanged = false;
                }
                if (this.displayAsPasswordChanged) {
                    this._textField.displayAsPassword = this._displayAsPassword;
                    this.displayAsPasswordChanged = false;
                }
                if (this.maxCharsChanged) {
                    this._textField.maxChars = this._maxChars;
                    this.maxCharsChanged = false;
                }
                if (this.multilineChanged) {
                    this._textField.multiline = this._multiline;
                    //this._textField.wordWrap = this._multiline;
                    this.multilineChanged = false;
                }
                if (this.restrictChanged) {
                    //this._textField.restrict = this._restrict;
                    this.restrictChanged = false;
                }
                if (this.heightInLinesChanged) {
                    this.heightInLinesChanged = false;
                    if (isNaN(this._heightInLines)) {
                        this.defaultHeight = NaN;
                    }
                    else {
                        //todo:没有文字时的测量
                        var hInLine = parseInt(this.heightInLines);
                        var lineHeight = 22;
                        if (this._textField.$getText().length > 0) {
                            lineHeight = this._textField.$getLineHeight();
                        }
                        else {
                            this._textField.$setText("M");
                            lineHeight = this._textField.$getLineHeight();
                            this._textField.$setText("");
                        }
                        this.defaultHeight = hInLine * lineHeight + 4;
                    }
                }
                if (this.widthInCharsChanged) {
                    this.widthInCharsChanged = false;
                    if (isNaN(this._widthInChars)) {
                        this.defaultWidth = NaN;
                    }
                    else {
                        var wInChars = parseInt(this._widthInChars);
                        this.defaultWidth = this.size * wInChars + 5;
                    }
                }
            };
            /**
             * 通过设置此容器子项的位置和大小来响应大小更改
             * @inheritDoc
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                this.isValidating = true;
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                this.updateContentSize();
                this.isValidating = false;
            };
            /**
             * 更新内容尺寸大小
             */
            p.updateContentSize = function () {
                if (!this.clipAndEnableScrolling)
                    return;
                this.setContentWidth(this._textField.width);
                var contentHeight = 0;
                var numLines = this._textField.numLines;
                if (numLines == 0) {
                    contentHeight = 4;
                }
                else {
                    var lineHeight = this._textField.$getLineHeight();
                    var offsetHeight = (this.height - 4) % lineHeight;
                    contentHeight = this._textField.height + offsetHeight;
                }
                this.setContentHeight(contentHeight);
            };
            d(p, "selectionBeginIndex"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    this.validateProperties();
                    if (this._textField)
                        return this._textField.selectionBeginIndex;
                    return 0;
                }
            );
            d(p, "selectionEndIndex"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    this.validateProperties();
                    if (this._textField)
                        return this._textField.selectionEndIndex;
                    return 0;
                }
            );
            d(p, "caretIndex"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    this.validateProperties();
                    if (this._textField)
                        return this._textField.caretIndex;
                    return 0;
                }
            );
            /**
             * @inheritDoc
             */
            p.setSelection = function (beginIndex, endIndex) {
                if (endIndex === void 0) { endIndex = 0; }
                this.validateProperties();
                if (this._textField) {
                    this._textField.$setSelection(beginIndex, endIndex);
                }
            };
            /**
             * @inheritDoc
             */
            p.selectAll = function () {
                this.validateProperties();
                if (this._textField) {
                    this._textField.$setSelection(0, this._textField.text.length);
                }
            };
            /**
             * 计算  容器默认大小的最小值和最大值
             * @inheritDoc
             */
            p.measure = function () {
                this.measuredWidth = isNaN(this.defaultWidth) ? gui.TextBase.DEFAULT_MEASURED_WIDTH : this.defaultWidth;
                if (this._maxChars != 0) {
                    this.measuredWidth = Math.min(this.measuredWidth, this._textField.width);
                }
                if (this._multiline) {
                    this.measuredHeight = isNaN(this.defaultHeight) ? gui.TextBase.DEFAULT_MEASURED_HEIGHT * 2 : this.defaultHeight;
                }
                else {
                    this.measuredHeight = this._textField.height;
                }
            };
            /**
             * 创建文本显示对象
             */
            p._createTextField = function () {
                _super.prototype._createTextField.call(this);
                this._textField.type = this._editable ? egret.TextFieldType.INPUT : egret.TextFieldType.DYNAMIC;
                this._textField.multiline = this._multiline;
                //this._textField.wordWrap = this._multiline;
                this._textField.addEventListener(egret.Event.CHANGE, this.textField_changeHandler, this);
                this._textField.addEventListener("scroll", this.textField_scrollHandler, this); //todo:Scroll event
                this._textField.addEventListener("input", this.textField_textInputHandler, this);
            };
            p.textField_changeHandler = function (event) {
                this._textFieldChanged();
                event.stopImmediatePropagation();
                this.dispatchEvent(new egret.Event(egret.Event.CHANGE));
                this.invalidateSize();
                this.invalidateDisplayList();
                this.updateContentSize();
            };
            /**
             *  @private
             */
            p.textField_scrollHandler = function (event) {
            };
            /**
             * 即将输入文字
             */
            p.textField_textInputHandler = function (event) {
                event.stopImmediatePropagation();
                var newEvent = new egret.Event(event.type, false, true);
                newEvent.data = event.data;
                this.dispatchEvent(newEvent);
                if (newEvent.isDefaultPrevented())
                    event.preventDefault();
            };
            return EditableText;
        })(gui.TextBase);
        gui.EditableText = EditableText;
        egret.registerClass(EditableText,"egret.gui.EditableText",["egret.gui.IEditableText","egret.gui.IDisplayText","egret.gui.IUIComponent","egret.gui.IVisualElement","egret.gui.ILayoutElement","egret.IEventDispatcher","egret.gui.IViewport"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Group
         * @classdesc
         * 自动布局容器
         * @extends egret.gui.GroupBase
         * @implements egret.gui.IVisualElementContainer
         */
        var Group = (function (_super) {
            __extends(Group, _super);
            /**
             * @method egret.gui.Group#constructor
             */
            function Group() {
                _super.call(this);
                /**
                 * createChildren()方法已经执行过的标志
                 */
                this.createChildrenCalled = false;
                /**
                 * elementsContent改变标志
                 */
                this.elementsContentChanged = false;
                this._elementsContent = [];
            }
            var d = __define,c=Group;p=c.prototype;
            /**
             * 创建子对象
             * @method egret.gui.Group#createChildren
             */
            p.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createChildrenCalled = true;
                if (this.elementsContentChanged) {
                    this.elementsContentChanged = false;
                    this.setElementsContent(this._elementsContent);
                }
            };
            /**
             * 返回子元素列表
             */
            p._getElementsContent = function () {
                return this._elementsContent;
            };
            d(p, "elementsContent",undefined
                /**
                 * 设置容器子对象数组 。数组包含要添加到容器的子项列表，之前的已存在于容器中的子项列表被全部移除后添加列表里的每一项到容器。
                 * 设置该属性时会对您输入的数组进行一次浅复制操作，所以您之后对该数组的操作不会影响到添加到容器的子项列表数量。
                 */
                ,function (value) {
                    if (value == null)
                        value = [];
                    if (value == this._elementsContent)
                        return;
                    if (this.createChildrenCalled) {
                        this.setElementsContent(value);
                    }
                    else {
                        this.elementsContentChanged = true;
                        for (var i = this._elementsContent.length - 1; i >= 0; i--) {
                            this._elementRemoved(this._elementsContent[i], i);
                        }
                        this._elementsContent = value;
                    }
                }
            );
            /**
             * 设置容器子对象列表
             */
            p.setElementsContent = function (value) {
                var i;
                for (i = this._elementsContent.length - 1; i >= 0; i--) {
                    this._elementRemoved(this._elementsContent[i], i);
                }
                this._elementsContent = value.concat();
                var n = this._elementsContent.length;
                for (i = 0; i < n; i++) {
                    var elt = this._elementsContent[i];
                    if (elt.parent && "removeElement" in elt.parent)
                        (elt.parent).removeElement(elt);
                    else if (elt.owner && "removeElement" in elt.owner)
                        (elt.owner).removeElement(elt);
                    this._elementAdded(elt, i);
                }
            };
            d(p, "numElements"
                /**
                 * 获得容器中的子对象数
                 * @member egret.gui.Group#numElements
                 */
                ,function () {
                    return this._elementsContent.length;
                }
            );
            /**
             * 返回指定索引处的可视元素
             * @method egret.gui.Group#getElementAt
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.getElementAt = function (index) {
                this.checkForRangeError(index);
                return this._elementsContent[index];
            };
            p.checkForRangeError = function (index, addingElement) {
                if (addingElement === void 0) { addingElement = false; }
                var maxIndex = this._elementsContent.length - 1;
                if (addingElement)
                    maxIndex++;
                if (index < 0 || index > maxIndex)
                    egret.$error(3011, index);
            };
            /**
             * 将可视元素添加到此容器中
             * @method egret.gui.Group#addElement
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.addElement = function (element) {
                var index = this.numElements;
                if (element.parent == this)
                    index = this.numElements - 1;
                return this.addElementAt(element, index);
            };
            /**
             * 将可视元素添加到此容器中
             * @method egret.gui.Group#addElementAt
             * @param element {IVisualElement}
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.addElementAt = function (element, index) {
                if (element == this)
                    return element;
                this.checkForRangeError(index, true);
                var host = element.owner;
                if (host == this || element.parent == this) {
                    this.setElementIndex(element, index);
                    return element;
                }
                else if (host && "removeElement" in host) {
                    (element.owner).removeElement(element);
                }
                this._elementsContent.splice(index, 0, element);
                if (!this.elementsContentChanged)
                    this._elementAdded(element, index);
                return element;
            };
            /**
             * 从此容器的子列表中删除指定的可视元素
             * @method egret.gui.Group#removeElement
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.removeElement = function (element) {
                return this.removeElementAt(this.getElementIndex(element));
            };
            /**
             * 从容器中的指定索引位置删除可视元素
             * @method egret.gui.Group#removeElementAt
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.removeElementAt = function (index) {
                this.checkForRangeError(index);
                var element = this._elementsContent[index];
                if (!this.elementsContentChanged)
                    this._elementRemoved(element, index);
                this._elementsContent.splice(index, 1);
                return element;
            };
            /**
             * 删除容器中的所有子元素
             * @method egret.gui.Group#removeAllElements
             */
            p.removeAllElements = function () {
                for (var i = this.numElements - 1; i >= 0; i--) {
                    this.removeElementAt(i);
                }
            };
            /**
             * 返回可视元素的索引位置
             * @method egret.gui.Group#getElementIndex
             * @param element {IVisualElement}
             * @returns {number}
             */
            p.getElementIndex = function (element) {
                return this._elementsContent.indexOf(element);
            };
            /**
             * 在可视容器中更改现有可视元素的位置
             * @method egret.gui.Group#setElementIndex
             * @param element {IVisualElement}
             * @param index {number}
             */
            p.setElementIndex = function (element, index) {
                this.checkForRangeError(index);
                var oldIndex = this.getElementIndex(element);
                if (oldIndex == -1 || oldIndex == index)
                    return;
                if (!this.elementsContentChanged)
                    this._elementRemoved(element, oldIndex, false);
                this._elementsContent.splice(oldIndex, 1);
                this._elementsContent.splice(index, 0, element);
                if (!this.elementsContentChanged)
                    this._elementAdded(element, index, false);
            };
            /**
             * 交换两个指定可视元素的索引
             * @method egret.gui.Group#swapElements
             * @param element1 {IVisualElement}
             * @param element2 {IVisualElement}
             */
            p.swapElements = function (element1, element2) {
                this.swapElementsAt(this.getElementIndex(element1), this.getElementIndex(element2));
            };
            /**
             * 交换容器中位于两个指定索引位置的可视元素
             * @method egret.gui.Group#swapElementsAt
             * @param index1 {number}
             * @param index2 {number}
             */
            p.swapElementsAt = function (index1, index2) {
                this.checkForRangeError(index1);
                this.checkForRangeError(index2);
                if (index1 > index2) {
                    var temp = index2;
                    index2 = index1;
                    index1 = temp;
                }
                else if (index1 == index2)
                    return;
                var elementsContent = this._elementsContent;
                var element1 = elementsContent[index1];
                var element2 = elementsContent[index2];
                if (!this.elementsContentChanged) {
                    this._elementRemoved(element1, index1, false);
                    this._elementRemoved(element2, index2, false);
                }
                elementsContent[index1] = element2;
                elementsContent[index2] = element1;
                if (!this.elementsContentChanged) {
                    this._elementAdded(element2, index1, false);
                    this._elementAdded(element1, index2, false);
                }
            };
            /**
             * 添加一个显示元素到容器
             * @param element {IVisualElement}
             * @param index {number}
             * @param notifyListeners {boolean}
             */
            p._elementAdded = function (element, index, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                if (element instanceof egret.DisplayObject) {
                    var childDO = element;
                    this._addToDisplayListAt(childDO, index, notifyListeners);
                }
                if (notifyListeners) {
                    if (this.hasEventListener(gui.ElementExistenceEvent.ELEMENT_ADD))
                        gui.ElementExistenceEvent.dispatchElementExistenceEvent(this, gui.ElementExistenceEvent.ELEMENT_ADD, element, index);
                }
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            /**
             * 从容器移除一个显示元素
             * @param element {IVisualElement}
             * @param index {number}
             * @param notifyListeners {boolean}
             */
            p._elementRemoved = function (element, index, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                if (notifyListeners) {
                    if (this.hasEventListener(gui.ElementExistenceEvent.ELEMENT_REMOVE))
                        gui.ElementExistenceEvent.dispatchElementExistenceEvent(this, gui.ElementExistenceEvent.ELEMENT_REMOVE, element, index);
                }
                if (element instanceof egret.DisplayObject && element.parent == this) {
                    var childDO = element;
                    this._removeFromDisplayList(childDO, notifyListeners);
                }
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            /**
             * 将可视元素添加到此容器中
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.addChild = function (child) {
                egret.$error(3004, egret.sys.tr(3003));
                return null;
            };
            /**
             * 将可视元素添加到此容器中
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.addChildAt = function (child, index) {
                egret.$error(3005, egret.sys.tr(3003));
                return null;
            };
            /**从此容器的子列表中删除指定的可视元素
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.removeChild = function (child) {
                egret.$error(3006, egret.sys.tr(3003));
                return null;
            };
            /**
             * 从此容器的子列表中删除指定的可视元素
             * @method egret.gui.Group#removeChildAt
             * @deprecated
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.removeChildAt = function (index) {
                egret.$error(3007, egret.sys.tr(3003));
                return null;
            };
            /**
             * 在可视容器中更改现有可视元素的位置
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             */
            p.setChildIndex = function (child, index) {
                egret.$error(3008, egret.sys.tr(3003));
            };
            /**
             * 交换两个指定可视元素的索引
             * @deprecated
             * @param child1 {DisplayObject}
             * @param child2 {DisplayObject}
             */
            p.swapChildren = function (child1, child2) {
                egret.$error(3009, egret.sys.tr(3003));
            };
            /**
             * 交换容器中位于两个指定索引位置的可视元素
             * @method egret.gui.Group#swapChildrenAt
             * @deprecated
             * @param index1 {number}
             * @param index2 {number}
             */
            p.swapChildrenAt = function (index1, index2) {
                egret.$error(3010, egret.sys.tr(3003));
            };
            return Group;
        })(gui.GroupBase);
        gui.Group = Group;
        egret.registerClass(Group,"egret.gui.Group",["egret.gui.IVisualElementContainer","egret.gui.IVisualElement","egret.gui.ILayoutElement","egret.IEventDispatcher","egret.gui.IContainer"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Range
         * @classdesc
         * 范围选取组件,该组件包含一个值和这个值所允许的最大最小约束范围。
         * @extends egret.gui.SkinnableComponent
         */
        var Range = (function (_super) {
            __extends(Range, _super);
            /**
             * 构造函数
             * @method egret.gui.Range#constructor
             */
            function Range() {
                _super.call(this);
                this._maximum = 100;
                /**
                 * 最大有效值改变标志
                 */
                this.maxChanged = false;
                this._minimum = 0;
                /**
                 * 最小有效值改变标志
                 */
                this.minChanged = false;
                this._stepSize = 1;
                /**
                 * 单步大小改变的标志
                 */
                this.stepSizeChanged = false;
                this._value = 0;
                this._changedValue = 0;
                /**
                 * 此范围的当前值改变标志
                 */
                this.valueChanged = false;
                this._snapInterval = 1;
                this.snapIntervalChanged = false;
                this._explicitSnapInterval = false;
            }
            var d = __define,c=Range;p=c.prototype;
            d(p, "maximum"
                /**
                 * 最大有效值
                 * @member egret.gui.Range#maximum
                 */
                ,function () {
                    return this._maximum;
                }
                ,function (value) {
                    this._setMaximun(value);
                }
            );
            p._setMaximun = function (value) {
                if (value == this._maximum)
                    return;
                this._maximum = value;
                this.maxChanged = true;
                this.invalidateProperties();
            };
            d(p, "minimum"
                /**
                 * 最小有效值
                 * @member egret.gui.Range#minimum
                 */
                ,function () {
                    return this._minimum;
                }
                ,function (value) {
                    this._setMinimun(value);
                }
            );
            p._setMinimun = function (value) {
                if (value == this._minimum)
                    return;
                this._minimum = value;
                this.minChanged = true;
                this.invalidateProperties();
            };
            d(p, "stepSize"
                /**
                 * 调用 changeValueByStep() 方法时 value 属性更改的单步大小。默认值为 1。<br/>
                 * 除非 snapInterval 为 0，否则它必须是 snapInterval 的倍数。<br/>
                 * 如果 stepSize 不是倍数，则会将它近似到大于或等于 snapInterval 的最近的倍数。<br/>
                 * @member egret.gui.Range#stepSize
                 */
                ,function () {
                    return this._stepSize;
                }
                ,function (value) {
                    if (value == this._stepSize)
                        return;
                    this._stepSize = value;
                    this.stepSizeChanged = true;
                    this.invalidateProperties();
                }
            );
            d(p, "value"
                /**
                 * 此范围的当前值。
                 * @member egret.gui.Range#value
                 */
                ,function () {
                    return this._getValue();
                }
                ,function (newValue) {
                    this._setValue(newValue);
                }
            );
            p._setValue = function (newValue) {
                if (newValue == this.value)
                    return;
                this._changedValue = newValue;
                this.valueChanged = true;
                this.invalidateProperties();
            };
            p._getValue = function () {
                return (this.valueChanged) ? this._changedValue : this._value;
            };
            d(p, "snapInterval"
                /**
                 * snapInterval 属性定义 value 属性的有效值。如果为非零，则有效值为 minimum 与此属性的整数倍数之和，且小于或等于 maximum。 <br/>
                 * 例如，如果 minimum 为 10，maximum 为 20，而此属性为 3，则可能的有效值为 10、13、16、19 和 20。<br/>
                 * 如果此属性的值为零，则仅会将有效值约束到介于 minimum 和 maximum 之间（包括两者）。<br/>
                 * 此属性还约束 stepSize 属性（如果设置）的有效值。如果未显式设置此属性，但设置了 stepSize，则 snapInterval 将默认为 stepSize。<br/>
                 * @member egret.gui.Range#snapInterval
                 */
                ,function () {
                    return this._snapInterval;
                }
                ,function (value) {
                    this._explicitSnapInterval = true;
                    if (value == this._snapInterval)
                        return;
                    if (isNaN(value)) {
                        this._snapInterval = 1;
                        this._explicitSnapInterval = false;
                    }
                    else {
                        this._snapInterval = value;
                    }
                    this.snapIntervalChanged = true;
                    this.stepSizeChanged = true;
                    this.invalidateProperties();
                }
            );
            /**
             * 处理对组件设置的属性
             * @method egret.gui.Range#commitProperties
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.minimum > this.maximum) {
                    if (!this.maxChanged)
                        this._minimum = this._maximum;
                    else
                        this._maximum = this._minimum;
                }
                if (this.valueChanged || this.maxChanged || this.minChanged || this.snapIntervalChanged) {
                    var currentValue = (this.valueChanged) ? this._changedValue : this._value;
                    this.valueChanged = false;
                    this.maxChanged = false;
                    this.minChanged = false;
                    this.snapIntervalChanged = false;
                    this.setValue(this.nearestValidValue(currentValue, this.snapInterval));
                }
                if (this.stepSizeChanged) {
                    if (this._explicitSnapInterval) {
                        this._stepSize = this.nearestValidSize(this._stepSize);
                    }
                    else {
                        this._snapInterval = this._stepSize;
                        this.setValue(this.nearestValidValue(this._value, this.snapInterval));
                    }
                    this.stepSizeChanged = false;
                }
            };
            /**
             * 修正stepSize到最接近snapInterval的整数倍
             */
            p.nearestValidSize = function (size) {
                var interval = this.snapInterval;
                if (interval == 0)
                    return size;
                var validSize = Math.round(size / interval) * interval;
                return (Math.abs(validSize) < interval) ? interval : validSize;
            };
            /**
             * 修正输入的值为有效值
             * @method egret.gui.Range#nearestValidValue
             * @param value {number} 输入值。
             * @param interval {number} snapInterval 的值，或 snapInterval 的整数倍数。
             * @returns {number}
             */
            p.nearestValidValue = function (value, interval) {
                if (interval == 0)
                    return Math.max(this.minimum, Math.min(this.maximum, value));
                var maxValue = this.maximum - this.minimum;
                var scale = 1;
                value -= this.minimum;
                if (interval != Math.round(interval)) {
                    var parts = ((1 + interval).toString()).split(".");
                    scale = Math.pow(10, parts[1].length);
                    maxValue *= scale;
                    value = Math.round(value * scale);
                    interval = Math.round(interval * scale);
                }
                var lower = Math.max(0, Math.floor(value / interval) * interval);
                var upper = Math.min(maxValue, Math.floor((value + interval) / interval) * interval);
                var validValue = ((value - lower) >= ((upper - lower) / 2)) ? upper : lower;
                return (validValue / scale) + this.minimum;
            };
            /**
             * 设置当前值。此方法假定调用者已经使用了 nearestValidValue() 方法来约束 value 参数
             * @method egret.gui.Range#setValue
             * @param value {number} value属性的新值
             */
            p.setValue = function (value) {
                if (this._value == value)
                    return;
                if (isNaN(value))
                    value = 0;
                if (!isNaN(this.maximum) && !isNaN(this.minimum) && (this.maximum > this.minimum))
                    this._value = Math.min(this.maximum, Math.max(this.minimum, value));
                else
                    this._value = value;
                this.valueChanged = false;
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.VALUE_COMMIT);
            };
            /**
             * 按 stepSize增大或减小当前值
             * @method egret.gui.Range#changeValueByStep
             * @param increase {boolean} 若为 true，则向value增加stepSize，否则减去它。
             */
            p.changeValueByStep = function (increase) {
                if (increase === void 0) { increase = true; }
                if (this.stepSize == 0)
                    return;
                var newValue = (increase) ? this.value + this.stepSize : this.value - this.stepSize;
                this.setValue(this.nearestValidValue(newValue, this.snapInterval));
            };
            return Range;
        })(gui.SkinnableComponent);
        gui.Range = Range;
        egret.registerClass(Range,"egret.gui.Range");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TrackBase
         * @classdesc
         * TrackBase类是具有一个轨道和一个或多个滑块按钮的组件的一个基类，如 Slider 和 ScrollBar。
         * @extends egret.gui.Range
         */
        var TrackBase = (function (_super) {
            __extends(TrackBase, _super);
            /**
             * @method egret.gui.TrackBase#constructor
             */
            function TrackBase() {
                _super.call(this);
                this._slideDuration = 300;
                /**
                 * [SkinPart]实体滑块组件
                 * @member egret.gui.TrackBase#thumb
                 */
                this.thumb = null;
                /**
                 * [SkinPart]实体轨道组件
                 * @member egret.gui.TrackBase#track
                 */
                this.track = null;
                /**
                 * 记录鼠标在thumb上按下的位置
                 * @type {number}
                 * @private
                 */
                this._clickOffsetX = NaN;
                /**
                 *
                 * @type {number}
                 * @private
                 */
                this._clickOffsetY = NaN;
                /**
                 * 当鼠标拖动thumb时，需要更新value的标记。
                 */
                this.needUpdateValue = false;
                /**
                 *
                 * @type {number}
                 * @private
                 */
                this._moveStageX = NaN;
                /**
                 *
                 * @type {number}
                 * @private
                 */
                this._moveStageY = NaN;
                this.mouseDownTarget = null;
                this.addEventListener(egret.Event.ADDED_TO_STAGE, this.addedToStageHandler, this);
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.mouseDownHandler, this);
            }
            var d = __define,c=TrackBase;p=c.prototype;
            d(p, "slideDuration"
                /**
                 * 在轨道上单击以移动滑块时，滑动动画持续的时间（以毫秒为单位）。<br/>
                 * 此属性用于 Slider 和 ScrollBar。对于 Slider，在轨道上的任何单击将导致生成使用此样式的一个动画，同时滑块将移到单击的位置。<br/>
                 * 对于 ScrollBar，仅当按住 Shift 键并单击轨道时才使用此样式，这会导致滑块移到单击的位置。<br/>
                 * 未按下 Shift 键时单击 ScrollBar 轨道将导致出现分页行为。<br/>
                 * 按住 Shift 键并单击时，必须也对 ScrollBar 设置 smoothScrolling 属性才可以实现动画行为。<br/>
                 * 此持续时间是整个滑过轨道的总时间，实际滚动会根据距离相应缩短。
                 * @member egret.gui.TrackBase#slideDuration
                 */
                ,function () {
                    return this._slideDuration;
                }
                ,function (value) {
                    this._slideDuration = value;
                }
            );
            d(p, "maximum"
                /**
                 * 最大有效值
                 * @member egret.gui.TrackBase#maximum
                 */
                ,function () {
                    return this._maximum;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (value == this._maximum)
                        return;
                    this._setMaximun(value);
                    this.invalidateDisplayList();
                }
            );
            d(p, "minimum"
                /**
                 * 最小有效值
                 * @member egret.gui.TrackBase#minimum
                 */
                ,function () {
                    return this._minimum;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (value == this._minimum)
                        return;
                    this._setMinimun(value);
                    this.invalidateDisplayList();
                }
            );
            d(p, "value"
                /**
                 * 此范围的当前值。
                 * @member egret.gui.TrackBase#value
                 */
                ,function () {
                    return this._getValue();
                }
                /**
                 * @inheritDoc
                 */
                ,function (newValue) {
                    if (newValue == this._getValue())
                        return;
                    this._setValue(newValue);
                    this.invalidateDisplayList();
                }
            );
            /**
             * @method egret.gui.TrackBase#setValue
             * @param value {number}
             */
            p.setValue = function (value) {
                _super.prototype.setValue.call(this, value);
                this.invalidateDisplayList();
            };
            /**
             * 将相对于轨道的 x,y 像素位置转换为介于最小值和最大值（包括两者）之间的一个值。
             * @method egret.gui.TrackBase#pointToValue
             * @param x {number} 相对于轨道原点的位置的x坐标。
             * @param y {number} 相对于轨道原点的位置的y坐标。
             * @returns {number}
             */
            p.pointToValue = function (x, y) {
                return this.minimum;
            };
            /**
             * 按 stepSize 增大或减小 value
             * @method egret.gui.TrackBase#changeValueByStep
             * @param increase {boolean}
             */
            p.changeValueByStep = function (increase) {
                if (increase === void 0) { increase = true; }
                var prevValue = this.value;
                _super.prototype.changeValueByStep.call(this, increase);
                if (this.value != prevValue)
                    this.dispatchEventWith(egret.Event.CHANGE);
            };
            /**
             * 添加外观部件时调用
             * @method egret.gui.TrackBase#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.thumb) {
                    this.thumb.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.thumb_mouseDownHandler, this);
                    this.thumb.addEventListener(gui.ResizeEvent.RESIZE, this.thumb_resizeHandler, this);
                    this.thumb.addEventListener(gui.UIEvent.UPDATE_COMPLETE, this.thumb_updateCompleteHandler, this);
                    this.thumb.stickyHighlighting = true;
                }
                else if (instance == this.track) {
                    this.track.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.track_mouseDownHandler, this);
                    this.track.addEventListener(gui.ResizeEvent.RESIZE, this.track_resizeHandler, this);
                }
            };
            /**
             * 删除外观部件的实例时调用
             * @method egret.gui.TrackBase#partRemoved
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                _super.prototype.partRemoved.call(this, partName, instance);
                if (instance == this.thumb) {
                    this.thumb.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.thumb_mouseDownHandler, this);
                    this.thumb.removeEventListener(gui.ResizeEvent.RESIZE, this.thumb_resizeHandler, this);
                    this.thumb.removeEventListener(gui.UIEvent.UPDATE_COMPLETE, this.thumb_updateCompleteHandler, this);
                }
                else if (instance == this.track) {
                    this.track.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.track_mouseDownHandler, this);
                    this.track.removeEventListener(gui.ResizeEvent.RESIZE, this.track_resizeHandler, this);
                }
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @method egret.gui.TrackBase#updateDisplayList
             * @param w {number}
             * @param h {number}
             */
            p.updateDisplayList = function (w, h) {
                _super.prototype.updateDisplayList.call(this, w, h);
                this.updateSkinDisplayList();
            };
            /**
             * 更新皮肤部件（通常为滑块）的大小和可见性。<br/>
             * 子类覆盖此方法以基于 minimum、maximum 和 value 属性更新滑块的大小、位置和可见性。
             * @method egret.gui.TrackBase#updateSkinDisplayList
             */
            p.updateSkinDisplayList = function () {
            };
            /**
             * 添加到舞台时
             */
            p.addedToStageHandler = function (event) {
                this.updateSkinDisplayList();
            };
            /**
             * 轨道尺寸改变事件
             */
            p.track_resizeHandler = function (event) {
                this.updateSkinDisplayList();
            };
            /**
             * 滑块尺寸改变事件
             */
            p.thumb_resizeHandler = function (event) {
                this.updateSkinDisplayList();
            };
            /**
             * 滑块三个阶段的延迟布局更新完毕事件
             */
            p.thumb_updateCompleteHandler = function (event) {
                this.updateSkinDisplayList();
                this.thumb.removeEventListener(gui.UIEvent.UPDATE_COMPLETE, this.thumb_updateCompleteHandler, this);
            };
            /**
             * 滑块按下事件
             * @method egret.gui.TrackBase#thumb_mouseDownHandler
             * @param event {TouchEvent}
             */
            p.thumb_mouseDownHandler = function (event) {
                gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this);
                gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                gui.UIGlobals.stage.addEventListener(egret.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this);
                this.addEventListener(egret.Event.ENTER_FRAME, this.onEnterFrame, this);
                var clickOffset = this.thumb.globalToLocal(event.stageX, event.stageY, egret.$TempPoint);
                this._clickOffsetX = clickOffset.x;
                this._clickOffsetY = clickOffset.y;
                gui.TrackBaseEvent.dispatchTrackBaseEvent(this, gui.TrackBaseEvent.THUMB_PRESS);
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CHANGE_START);
            };
            /**
             * 拖动thumb过程中触发的EnterFrame事件
             */
            p.onEnterFrame = function (event) {
                if (!this.needUpdateValue || !this.track)
                    return;
                this.updateWhenMouseMove();
                this.needUpdateValue = false;
            };
            /**
             * 当thumb被拖动时更新值，此方法每帧只被调用一次，比直接在鼠标移动事件里更新性能更高。
             * @method egret.gui.TrackBase#updateWhenMouseMove
             */
            p.updateWhenMouseMove = function () {
                if (!this.track)
                    return;
                var p = this.track.globalToLocal(this._moveStageX, this._moveStageY, egret.$TempPoint);
                var newValue = this.pointToValue(p.x - this._clickOffsetX, p.y - this._clickOffsetY);
                newValue = this.nearestValidValue(newValue, this.snapInterval);
                if (newValue != this.value) {
                    this.setValue(newValue);
                    this.validateDisplayList();
                    gui.TrackBaseEvent.dispatchTrackBaseEvent(this, gui.TrackBaseEvent.THUMB_DRAG);
                    this.dispatchEventWith(egret.Event.CHANGE);
                }
            };
            /**
             * 鼠标移动事件
             * @method egret.gui.TrackBase#stage_mouseMoveHandler
             * @param event {TouchEvent}
             */
            p.stage_mouseMoveHandler = function (event) {
                this._moveStageX = event.stageX;
                this._moveStageY = event.stageY;
                if (this.needUpdateValue)
                    return;
                this.needUpdateValue = true;
            };
            /**
             * 鼠标弹起事件
             * @method egret.gui.TrackBase#stage_mouseUpHandler
             * @param event {Event}
             */
            p.stage_mouseUpHandler = function (event) {
                gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this);
                gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                gui.UIGlobals.stage.removeEventListener(egret.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this);
                this.removeEventListener(egret.Event.ENTER_FRAME, this.updateWhenMouseMove, this);
                if (this.needUpdateValue) {
                    this.updateWhenMouseMove();
                    this.needUpdateValue = false;
                }
                gui.TrackBaseEvent.dispatchTrackBaseEvent(this, gui.TrackBaseEvent.THUMB_RELEASE);
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CHANGE_END);
            };
            /**
             * 轨道被按下事件
             * @method egret.gui.TrackBase#track_mouseDownHandler
             * @param event {TouchEvent}
             */
            p.track_mouseDownHandler = function (event) {
            };
            /**
             * 当在组件上按下鼠标时记录被按下的子显示对象
             */
            p.mouseDownHandler = function (event) {
                gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpSomewhereHandler, this);
                gui.UIGlobals.stage.addEventListener(egret.Event.LEAVE_STAGE, this.stage_mouseUpSomewhereHandler, this);
                this.mouseDownTarget = (event.target);
            };
            /**
             * 当鼠标弹起时，若不是在mouseDownTarget上弹起，而是另外的子显示对象上弹起时，额外抛出一个鼠标单击事件。
             */
            p.stage_mouseUpSomewhereHandler = function (event) {
                gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpSomewhereHandler, this);
                gui.UIGlobals.stage.removeEventListener(egret.Event.LEAVE_STAGE, this.stage_mouseUpSomewhereHandler, this);
                if (this.mouseDownTarget != event.target && event instanceof egret.TouchEvent && this.contains((event.target))) {
                    var mEvent = event;
                    var mousePoint = (event.target).localToGlobal(mEvent.localX, mEvent.localY);
                    egret.TouchEvent.dispatchTouchEvent(this, egret.TouchEvent.TOUCH_TAP, false, false, mousePoint.x, mousePoint.y, mEvent.touchPointID, mEvent.touchDown);
                }
                this.mouseDownTarget = null;
            };
            return TrackBase;
        })(gui.Range);
        gui.TrackBase = TrackBase;
        egret.registerClass(TrackBase,"egret.gui.TrackBase");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SliderBase
         * @classdesc
         * 滑块控件基类
         * @extends egret.gui.TrackBase
         */
        var SliderBase = (function (_super) {
            __extends(SliderBase, _super);
            /**
             * 构造函数
             * @method egret.gui.SliderBase#constructor
             */
            function SliderBase() {
                _super.call(this);
                /**
                 * [SkinPart]轨道高亮显示对象
                 * @member egret.gui.SliderBase#trackHighlight
                 */
                this.trackHighlight = null;
                this._showTrackHighlight = true;
                /**
                 * 动画实例
                 */
                this.animator = null;
                this._pendingValue = 0;
                /**
                 * 动画播放结束时要到达的value。
                 */
                this.slideToValue = NaN;
                this._liveDragging = true;
                this.maximum = 10;
            }
            var d = __define,c=SliderBase;p=c.prototype;
            d(p, "showTrackHighlight"
                /**
                 * 是否启用轨道高亮效果。默认值为true。
                 * 注意，皮肤里的子部件trackHighlight要同时为非空才能显示高亮效果。
                 * @member egret.gui.SliderBase#showTrackHighlight
                 */
                ,function () {
                    return this._showTrackHighlight;
                }
                ,function (value) {
                    if (this._showTrackHighlight == value)
                        return;
                    this._showTrackHighlight = value;
                    if (this.trackHighlight)
                        this.trackHighlight.visible = value;
                    this.invalidateDisplayList();
                }
            );
            d(p, "pendingValue"
                /**
                 * 释放鼠标按键时滑块将具有的值。无论liveDragging是否为true，在滑块拖动期间始终更新此属性。
                 * 而value属性在当liveDragging为false时，只在鼠标释放时更新一次。
                 * @member egret.gui.SliderBase#pendingValue
                 */
                ,function () {
                    return this._pendingValue;
                }
                ,function (value) {
                    if (value == this._pendingValue)
                        return;
                    this._pendingValue = value;
                    this.invalidateDisplayList();
                }
            );
            /**
             * 在 value 属性改变时为该属性设置后备存储，并调度 valueCommit 事件
             * @method egret.gui.SliderBase#setValue
             * @param value {number}
             */
            p.setValue = function (value) {
                this._pendingValue = value;
                _super.prototype.setValue.call(this, value);
            };
            /**
             * 动画播放更新数值
             */
            p._animationUpdateHandler = function (animation) {
                this.pendingValue = animation.currentValue["value"];
            };
            /**
             * 动画播放完毕
             */
            p.animationEndHandler = function (animation) {
                this.setValue(this.slideToValue);
                this.dispatchEventWith(egret.Event.CHANGE);
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CHANGE_END);
            };
            /**
             * 停止播放动画
             */
            p.stopAnimation = function () {
                this.animator.stop();
                this.setValue(this.nearestValidValue(this.pendingValue, this.snapInterval));
                this.dispatchEventWith(egret.Event.CHANGE);
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CHANGE_END);
            };
            /**
             * @method egret.gui.SliderBase#thumb_mouseDownHandler
             * @param event {TouchEvent}
             */
            p.thumb_mouseDownHandler = function (event) {
                if (this.animator && this.animator.isPlaying)
                    this.stopAnimation();
                _super.prototype.thumb_mouseDownHandler.call(this, event);
            };
            d(p, "liveDragging"
                /**
                 * 如果为 true，则将在沿着轨道拖动滑块时，而不是在释放滑块按钮时，提交此滑块的值。
                 * @member egret.gui.SliderBase#liveDragging
                 */
                ,function () {
                    return this._liveDragging;
                }
                ,function (value) {
                    this._liveDragging = value;
                }
            );
            /**
             * @method egret.gui.SliderBase#updateWhenMouseMove
             */
            p.updateWhenMouseMove = function () {
                if (!this.track)
                    return;
                var pos = this.track.globalToLocal(this._moveStageX, this._moveStageY, egret.$TempPoint);
                var newValue = this.pointToValue(pos.x - this._clickOffsetX, pos.y - this._clickOffsetY);
                newValue = this.nearestValidValue(newValue, this.snapInterval);
                if (newValue != this.pendingValue) {
                    gui.TrackBaseEvent.dispatchTrackBaseEvent(this, gui.TrackBaseEvent.THUMB_DRAG);
                    if (this.liveDragging == true) {
                        this.setValue(newValue);
                        this.dispatchEventWith(egret.Event.CHANGE);
                    }
                    else {
                        this.pendingValue = newValue;
                    }
                }
            };
            /**
             * @method egret.gui.SliderBase#stage_mouseUpHandler
             * @param event {Event}
             */
            p.stage_mouseUpHandler = function (event) {
                _super.prototype.stage_mouseUpHandler.call(this, event);
                if ((this.liveDragging == false) && (this.value != this.pendingValue)) {
                    this.setValue(this.pendingValue);
                    this.dispatchEventWith(egret.Event.CHANGE);
                }
            };
            /**
             * @method egret.gui.SliderBase#track_mouseDownHandler
             * @param event {TouchEvent}
             */
            p.track_mouseDownHandler = function (event) {
                if (!this.enabled)
                    return;
                var thumbW = (this.thumb) ? this.thumb.width : 0;
                var thumbH = (this.thumb) ? this.thumb.height : 0;
                var offsetX = event.stageX - (thumbW / 2);
                var offsetY = event.stageY - (thumbH / 2);
                var p = this.track.globalToLocal(offsetX, offsetY, egret.$TempPoint);
                var newValue = this.pointToValue(p.x, p.y);
                newValue = this.nearestValidValue(newValue, this.snapInterval);
                if (newValue != this.pendingValue) {
                    if (this.slideDuration != 0) {
                        if (!this.animator) {
                            this.animator = new gui.Animation(this._animationUpdateHandler, this);
                            this.animator.endFunction = this.animationEndHandler;
                        }
                        if (this.animator.isPlaying)
                            this.stopAnimation();
                        this.slideToValue = newValue;
                        this.animator.duration = this.slideDuration * (Math.abs(this.pendingValue - this.slideToValue) / (this.maximum - this.minimum));
                        this.animator.motionPaths = [
                            new gui.SimpleMotionPath("value", this.pendingValue, this.slideToValue)
                        ];
                        gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CHANGE_START);
                        this.animator.play();
                    }
                    else {
                        this.setValue(newValue);
                        this.dispatchEventWith(egret.Event.CHANGE);
                    }
                }
            };
            /**
             * 正删除外观部件的实例时调用
             * @method egret.gui.SliderBase#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.trackHighlight) {
                    this.trackHighlight.touchEnabled = false;
                    if (this.trackHighlight instanceof egret.DisplayObjectContainer)
                        (this.trackHighlight).touchChildren = false;
                    this.trackHighlight.visible = this._showTrackHighlight;
                }
            };
            return SliderBase;
        })(gui.TrackBase);
        gui.SliderBase = SliderBase;
        egret.registerClass(SliderBase,"egret.gui.SliderBase");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.HSlider
         * @classdesc
         * 水平滑块控件
         * @extends egret.gui.SliderBase
         */
        var HSlider = (function (_super) {
            __extends(HSlider, _super);
            /**
             * 构造函数
             * @method egret.gui.HSlider#constructor
             */
            function HSlider() {
                _super.call(this);
            }
            var d = __define,c=HSlider;p=c.prototype;
            /**
             * 将相对于轨道的 x,y 像素位置转换为介于最小值和最大值（包括两者）之间的一个值
             * @param x
             * @param y
             * @returns {number}
             */
            p.pointToValue = function (x, y) {
                if (!this.thumb || !this.track)
                    return 0;
                var range = this.maximum - this.minimum;
                var thumbRange = this.track.layoutBoundsWidth - this.thumb.layoutBoundsWidth;
                return this.minimum + ((thumbRange != 0) ? (x / thumbRange) * range : 0);
            };
            /**
             * 设置外观部件的边界，这些外观部件的几何图形不是完全由外观的布局指定的
             */
            p.updateSkinDisplayList = function () {
                if (!this.thumb || !this.track)
                    return;
                var thumbRange = this.track.layoutBoundsWidth - this.thumb.layoutBoundsWidth;
                var range = this.maximum - this.minimum;
                var thumbPosTrackX = (range > 0) ? ((this.pendingValue - this.minimum) / range) * thumbRange : 0;
                var thumbPos = this.track.localToGlobal(thumbPosTrackX, 0);
                var thumbPosX = thumbPos.x;
                var thumbPosY = thumbPos.y;
                var thumbPosParentX = this.thumb.parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).x;
                this.thumb.setLayoutBoundsPosition(Math.round(thumbPosParentX), this.thumb.layoutBoundsY);
                if (this.showTrackHighlight && this.trackHighlight && this.trackHighlight.parent) {
                    var trackHighlightX = this.trackHighlight.parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).x - thumbPosTrackX;
                    this.trackHighlight.x = Math.round(trackHighlightX);
                    this.trackHighlight.width = Math.round(thumbPosTrackX);
                }
            };
            return HSlider;
        })(gui.SliderBase);
        gui.HSlider = HSlider;
        egret.registerClass(HSlider,"egret.gui.HSlider");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         *  @classdesc
         * HScrollBar（水平 ScrollBar）控件可以在因数据太多而不能在显示区域中以水平方向完全显示时控制显示的数据部分。
         尽管可以使用 HScrollBar 控件作为独立控件，但通常将其结合作为另一组组件的一部分来提供滚动功能
         */
        var HScrollBar = (function (_super) {
            __extends(HScrollBar, _super);
            function HScrollBar() {
                _super.apply(this, arguments);
                this._thumbLengthRatio = 1;
            }
            var d = __define,c=HScrollBar;p=c.prototype;
            /**
             *
             * @param width
             * @param contentWidth
             * @private
             */
            p._setViewportMetric = function (width, contentWidth) {
                var max = Math.max(0, contentWidth - width);
                this._setMaximun(max);
                this._setMinimun(0);
                this._thumbLengthRatio = (contentWidth > width) ? width / contentWidth : 1;
            };
            d(p, "trackAlpha"
                ,function () {
                    return 1;
                }
                /**
                 * @deprecated
                 */
                ,function (value) {
                    egret.$warn(1016, "HScrollBar.trackAlpha");
                }
            );
            d(p, "thumbAlpha"
                ,function () {
                    return 1;
                }
                /**
                 * @deprecated
                 */
                ,function (value) {
                    egret.$warn(1016, "HScrollBar.thumbAlpha");
                }
            );
            p.setPosition = function (value) {
                this._setValue(value);
            };
            p.getPosition = function () {
                return this._getValue();
            };
            /**
             *
             * @param value
             * @private
             */
            p._setValue = function (value) {
                value = Math.max(0, value);
                _super.prototype._setValue.call(this, value);
            };
            /**
             * [覆盖] 更新 value 属性，并且如果 viewport 为非 null，则将其 horizontalScrollPosition 设置为 value
             * @param value
             */
            p.setValue = function (value) {
                _super.prototype.setValue.call(this, value);
            };
            /**
             *
             * @param animation
             * @private
             */
            p._animationUpdateHandler = function (animation) {
                this.pendingValue = animation.currentValue["value"];
                this.value = animation.currentValue["value"];
                this.dispatchEventWith(egret.Event.CHANGE);
            };
            /**
             * 设置外观部件的边界，这些外观部件的几何图形不是完全由外观的布局指定的
             */
            p.updateSkinDisplayList = function () {
                if (!this.thumb || !this.track)
                    return;
                var thumbWidth = this.track.layoutBoundsWidth * this._thumbLengthRatio;
                var oldThumbWidth = this.thumb.layoutBoundsWidth;
                var thumbRange = this.track.layoutBoundsWidth - this.thumb.layoutBoundsWidth;
                var range = this.maximum - this.minimum;
                var thumbPosTrackX = (range > 0) ? ((this.pendingValue - this.minimum) / range) * thumbRange : 0;
                var thumbPos = this.track.localToGlobal(thumbPosTrackX, 0);
                var thumbPosX = thumbPos.x;
                var thumbPosY = thumbPos.y;
                var thumbPosParentX = this.thumb.parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).x;
                this.thumb.setLayoutBoundsPosition(Math.round(thumbPosParentX), this.thumb.layoutBoundsY);
                if (thumbWidth != oldThumbWidth)
                    this.thumb.setLayoutBoundsSize(thumbWidth, this.thumb.layoutBoundsHeight);
            };
            return HScrollBar;
        })(gui.HSlider);
        gui.HScrollBar = HScrollBar;
        egret.registerClass(HScrollBar,"egret.gui.HScrollBar");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Label
         * @classdesc
         * 一行或多行不可编辑的文本控件
         * @extends egret.gui.TextBase
         */
        var Label = (function (_super) {
            __extends(Label, _super);
            /**
             * @method egret.gui.Label#constructor
             */
            function Label() {
                _super.call(this);
                this._maxDisplayedLines = 0;
                /**
                 * 上一次测量的宽度
                 */
                this.lastUnscaledWidth = NaN;
                this.strokeColorChanged = false;
                this._strokeColor = 0x000000;
                this._stroke = 0;
                this.strokeChanged = false;
                this._padding = 0;
                this._paddingLeft = NaN;
                this._paddingRight = NaN;
                this._paddingTop = NaN;
                this._paddingBottom = NaN;
                this.addEventListener(gui.UIEvent.UPDATE_COMPLETE, this.updateCompleteHandler, this);
            }
            var d = __define,c=Label;p=c.prototype;
            /**
             * 一个验证阶段完成
             */
            p.updateCompleteHandler = function (event) {
                this.lastUnscaledWidth = NaN;
            };
            d(p, "maxDisplayedLines"
                /**
                 * 最大显示行数,0或负值代表不限制。
                 * @member egret.gui.Label#maxDisplayedLines
                 */
                ,function () {
                    return this._maxDisplayedLines;
                }
                ,function (value) {
                    if (this._maxDisplayedLines == value)
                        return;
                    this._maxDisplayedLines = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "strokeColor"
                /**
                 * 表示文本的描边颜色。
                 * 包含三个 8 位 RGB 颜色成分的数字；例如，0xFF0000 为红色，0x00FF00 为绿色。
                 * 默认值为 0x000000。
                 * @member {number} egret.TextField#strokeColor
                 */
                ,function () {
                    return this._strokeColor;
                }
                ,function (value) {
                    this._setStrokeColor(value);
                }
            );
            p._setStrokeColor = function (value) {
                if (this._strokeColor == value) {
                    return;
                }
                this._strokeColor = value;
                this.strokeColorChanged = true;
                this.invalidateProperties();
            };
            d(p, "stroke"
                /**
                 * 表示描边宽度。
                 * 0为没有描边。
                 * 默认值为 0。
                 * @member {number} egret.TextField#stroke
                 */
                ,function () {
                    return this._stroke;
                }
                ,function (value) {
                    if (this._stroke == value) {
                        return;
                    }
                    this._stroke = value;
                    this.strokeChanged = true;
                    this.invalidateProperties();
                }
            );
            d(p, "padding"
                /**
                 * 四个边缘的共同内边距。若单独设置了任一边缘的内边距，则该边缘的内边距以单独设置的值为准。
                 * 此属性主要用于快速设置多个边缘的相同内边距。默认值：0。
                 * @member egret.gui.Label#padding
                 */
                ,function () {
                    return this._padding;
                }
                ,function (value) {
                    if (this._padding == value)
                        return;
                    this._padding = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "paddingLeft"
                /**
                 * 文字距离左边缘的空白像素,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.Label#paddingLeft
                 */
                ,function () {
                    return this._paddingLeft;
                }
                ,function (value) {
                    if (this._paddingLeft == value)
                        return;
                    this._paddingLeft = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "paddingRight"
                /**
                 * 文字距离右边缘的空白像素,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.Label#paddingRight
                 */
                ,function () {
                    return this._paddingRight;
                }
                ,function (value) {
                    if (this._paddingRight == value)
                        return;
                    this._paddingRight = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "paddingTop"
                /**
                 * 文字距离顶部边缘的空白像素,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.Label#paddingTop
                 */
                ,function () {
                    return this._paddingTop;
                }
                ,function (value) {
                    if (this._paddingTop == value)
                        return;
                    this._paddingTop = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            d(p, "paddingBottom"
                /**
                 * 文字距离底部边缘的空白像素,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.Label#paddingBottom
                 */
                ,function () {
                    return this._paddingBottom;
                }
                ,function (value) {
                    if (this._paddingBottom == value)
                        return;
                    this._paddingBottom = value;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
            );
            /**
             * 处理对组件设置的属性
             * @method egret.gui.TextBase#commitProperties
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.strokeColorChanged) {
                    this._textField.strokeColor = this._strokeColor;
                    this.strokeColorChanged = false;
                }
                if (this.strokeChanged) {
                    this._textField.stroke = this._stroke;
                    this.strokeChanged = false;
                }
            };
            /**
             * 计算组件的默认大小和（可选）默认最小大小
             * @method egret.gui.Label#measure
             */
            p.measure = function () {
                //先提交属性，防止样式发生改变导致的测量不准确问题。
                if (this._UIC_Props_._invalidatePropertiesFlag)
                    this.validateProperties();
                if (this.isSpecialCase()) {
                    if (isNaN(this.lastUnscaledWidth)) {
                        this._UIC_Props_._oldPreferWidth = NaN;
                        this._UIC_Props_._oldPreferHeight = NaN;
                    }
                    else {
                        this.measureUsingWidth(this.lastUnscaledWidth);
                        return;
                    }
                }
                var availableWidth;
                if (!isNaN(this.$getExplicitWidth()))
                    availableWidth = this.$getExplicitWidth();
                else if (this.maxWidth != 10000)
                    availableWidth = this.maxWidth;
                this.measureUsingWidth(availableWidth);
            };
            /**
             * 特殊情况，组件尺寸由父级决定，要等到父级UpdateDisplayList的阶段才能测量
             */
            p.isSpecialCase = function () {
                return this._maxDisplayedLines != 1 && (!isNaN(this.percentWidth) || (!isNaN(this.left) && !isNaN(this.right))) && isNaN(this.$getExplicitHeight()) && isNaN(this.percentHeight);
            };
            /**
             * 使用指定的宽度进行测量
             */
            p.measureUsingWidth = function (w) {
                if (this._textChanged) {
                    this._textField.text = this._text;
                }
                if (this._textFlowChanged) {
                    this._textField.textFlow = this._textFlow;
                }
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                this._textField.width = NaN;
                this._textField.height = NaN;
                if (!isNaN(w)) {
                    this._textField.width = w - paddingL - paddingR;
                    this.measuredWidth = Math.ceil(this._textField.measuredWidth);
                    this.measuredHeight = Math.ceil(this._textField.measuredHeight);
                }
                else {
                    this.measuredWidth = Math.ceil(this._textField.measuredWidth);
                    this.measuredHeight = Math.ceil(this._textField.measuredHeight);
                }
                if (this._maxDisplayedLines > 0 && this._textField.numLines > this._maxDisplayedLines) {
                    var size = this._textField.size;
                    var lineSpacing = this._textField.lineSpacing;
                    this.measuredHeight = (size + lineSpacing) * this._maxDisplayedLines - lineSpacing;
                }
                this.measuredWidth += paddingL + paddingR;
                this.measuredHeight += paddingT + paddingB;
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @method egret.gui.Label#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                this.$updateDisplayList(unscaledWidth, unscaledHeight);
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                this._textField.x = paddingL;
                this._textField.y = paddingT;
                if (this.isSpecialCase()) {
                    var firstTime = isNaN(this.lastUnscaledWidth) || this.lastUnscaledWidth != unscaledWidth;
                    this.lastUnscaledWidth = unscaledWidth;
                    if (firstTime) {
                        this._UIC_Props_._oldPreferWidth = NaN;
                        this._UIC_Props_._oldPreferHeight = NaN;
                        this.invalidateSize();
                        return;
                    }
                }
                //防止在父级validateDisplayList()阶段改变的text属性值，
                //接下来直接调用自身的updateDisplayList()而没有经过measure(),使用的测量尺寸是上一次的错误值。
                if (this._UIC_Props_._invalidateSizeFlag)
                    this.validateSize();
                if (!this._textField.visible)
                    this._textField.visible = true;
                this._textField.width = unscaledWidth - paddingL - paddingR;
                var unscaledTextHeight = unscaledHeight - paddingT - paddingB;
                this._textField.height = unscaledTextHeight;
                if (this._maxDisplayedLines > 0 && this._textField.numLines > this._maxDisplayedLines) {
                    var size = this._textField.size;
                    var lineSpacing = this._textField.lineSpacing;
                    var h = (size + lineSpacing) * this._maxDisplayedLines - lineSpacing;
                    this._textField.height = Math.min(unscaledTextHeight, h);
                }
            };
            return Label;
        })(gui.TextBase);
        gui.Label = Label;
        egret.registerClass(Label,"egret.gui.Label");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.PopUpAnchor
         * @classdesc
         * PopUpAnchor组件用于定位布局中的弹出控件或下拉控件
         * @extends egret.gui.UIComponent
         */
        var PopUpAnchor = (function (_super) {
            __extends(PopUpAnchor, _super);
            /**
             * 构造函数
             * @method egret.gui.PopUpAnchor#constructor
             */
            function PopUpAnchor() {
                _super.call(this);
                /**
                 * popUp已经弹出的标志
                 */
                this.popUpIsDisplayed = false;
                /**
                 * 自身已经添加到舞台标志
                 */
                this.addedToStage = false;
                this._popUpHeightMatchesAnchorHeight = false;
                this._popUpWidthMatchesAnchorWidth = false;
                this._displayPopUp = false;
                this._popUp = null;
                this._relativeToStage = false;
                this._popUpPosition = gui.PopUpPosition.TOP_LEFT;
                /**
                 * 正在播放动画的标志
                 */
                this.inAnimation = false;
                /**
                 * 动画类实例
                 */
                this.animator = null;
                this._openDuration = 250;
                this._closeDuration = 150;
                this.valueRange = 1;
                this.addEventListener(egret.Event.ADDED_TO_STAGE, this.addedToStageHandler, this);
                this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.removedFromStageHandler, this);
            }
            var d = __define,c=PopUpAnchor;p=c.prototype;
            d(p, "popUpHeightMatchesAnchorHeight"
                /**
                 * 如果为 true，则将popUp控件的高度设置为 PopUpAnchor的高度值。
                 * @member egret.gui.PopUpAnchor#popUpHeightMatchesAnchorHeight
                 */
                ,function () {
                    return this._popUpHeightMatchesAnchorHeight;
                }
                ,function (value) {
                    if (this._popUpHeightMatchesAnchorHeight == value)
                        return;
                    this._popUpHeightMatchesAnchorHeight = value;
                    this.invalidateDisplayList();
                }
            );
            d(p, "popUpWidthMatchesAnchorWidth"
                /**
                 * 如果为true，则将popUp控件的宽度设置为PopUpAnchor的宽度值。
                 * @member egret.gui.PopUpAnchor#popUpWidthMatchesAnchorWidth
                 */
                ,function () {
                    return this._popUpWidthMatchesAnchorWidth;
                }
                ,function (value) {
                    if (this._popUpWidthMatchesAnchorWidth == value)
                        return;
                    this._popUpWidthMatchesAnchorWidth = value;
                    this.invalidateDisplayList();
                }
            );
            d(p, "displayPopUp"
                /**
                 * 如果为 true，则将popUp对象弹出。若为false，关闭弹出的popUp。
                 * @member egret.gui.PopUpAnchor#displayPopUp
                 */
                ,function () {
                    return this._displayPopUp;
                }
                ,function (value) {
                    if (this._displayPopUp == value)
                        return;
                    this._displayPopUp = value;
                    this.addOrRemovePopUp();
                }
            );
            d(p, "popUp"
                /**
                 * 要弹出或移除的目标显示对象。
                 * @member egret.gui.PopUpAnchor#popUp
                 */
                ,function () {
                    return this._popUp;
                }
                ,function (value) {
                    if (this._popUp == value)
                        return;
                    this._popUp = value;
                    this.dispatchEventWith("popUpChanged");
                }
            );
            d(p, "popUpPosition"
                /**
                 * popUp相对于PopUpAnchor的弹出位置。请使用PopUpPosition里定义的常量。默认值TOP_LEFT。
                 * @member egret.gui.PopUpAnchor#popUpPosition
                 */
                ,function () {
                    return this._popUpPosition;
                }
                ,function (value) {
                    if (this._popUpPosition == value)
                        return;
                    this._relativeToStage = value == gui.PopUpPosition.SCREEN_CENTER;
                    this._popUpPosition = value;
                    this.invalidateDisplayList();
                }
            );
            /**
             * @method egret.gui.PopUpAnchor#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                this.applyPopUpTransform(unscaledWidth, unscaledHeight);
            };
            /**
             * 手动刷新popUp的弹出位置和尺寸。
             * @method egret.gui.PopUpAnchor#updatePopUpTransform
             */
            p.updatePopUpTransform = function () {
                this.applyPopUpTransform(this.width, this.height);
            };
            /**
             * 计算popUp的弹出位置
             */
            p.calculatePopUpPosition = function () {
                var registrationPoint = egret.$TempPoint;
                switch (this._popUpPosition) {
                    case gui.PopUpPosition.SCREEN_CENTER:
                        break;
                    case gui.PopUpPosition.BELOW:
                        registrationPoint.x = 0;
                        registrationPoint.y = this.height;
                        break;
                    case gui.PopUpPosition.ABOVE:
                        registrationPoint.x = 0;
                        registrationPoint.y = -this.popUp.layoutBoundsHeight;
                        break;
                    case gui.PopUpPosition.LEFT:
                        registrationPoint.x = -this.popUp.layoutBoundsWidth;
                        registrationPoint.y = 0;
                        break;
                    case gui.PopUpPosition.RIGHT:
                        registrationPoint.x = this.width;
                        registrationPoint.y = 0;
                        break;
                    case gui.PopUpPosition.CENTER:
                        registrationPoint.x = (this.width - this.popUp.layoutBoundsWidth) * 0.5;
                        registrationPoint.y = (this.height - this.popUp.layoutBoundsHeight) * 0.5;
                        break;
                    case gui.PopUpPosition.TOP_LEFT:
                        break;
                }
                registrationPoint = this.localToGlobal(registrationPoint.x, registrationPoint.y, registrationPoint);
                registrationPoint = this.popUp.parent.globalToLocal(registrationPoint.x, registrationPoint.y, registrationPoint);
                return registrationPoint;
            };
            d(p, "openDuration"
                /**
                 * 窗口弹出的动画时间(以毫秒为单位)，设置为0则直接弹出窗口而不播放动画效果。默认值250。
                 * @member egret.gui.PopUpAnchor#openDuration
                 */
                ,function () {
                    return this._openDuration;
                }
                ,function (value) {
                    this._openDuration = value;
                }
            );
            d(p, "closeDuration"
                /**
                 * 窗口关闭的动画时间(以毫秒为单位)，设置为0则直接关闭窗口而不播放动画效果。默认值150。
                 * @member egret.gui.PopUpAnchor#closeDuration
                 */
                ,function () {
                    return this._closeDuration;
                }
                ,function (value) {
                    this._closeDuration = value;
                }
            );
            /**
             * 动画开始播放触发的函数
             */
            p.animationStartHandler = function (animation) {
                this.inAnimation = true;
                if (this.popUp && "enabled" in this.popUp)
                    (this.popUp).enabled = false;
            };
            /**
             * 动画播放过程中触发的更新数值函数
             */
            p.animationUpdateHandler = function (animation) {
                var rect = (this.popUp).scrollRect;
                var x = Math.round(animation.currentValue["x"]);
                var y = Math.round(animation.currentValue["y"]);
                if (rect) {
                    rect.x = x;
                    rect.y = y;
                    rect.width = this.popUp.width;
                    rect.height = this.popUp.height;
                    (this.popUp).scrollRect = (rect);
                }
                else {
                    (this.popUp).scrollRect = new egret.Rectangle(x, y, this.popUp.width, this.popUp.height);
                }
            };
            /**
             * 动画播放完成触发的函数
             */
            p.animationEndHandler = function (animation) {
                this.inAnimation = false;
                if (this.popUp && "enabled" in this.popUp)
                    (this.popUp).enabled = true;
                (this.popUp).scrollRect = null;
                if (!this.popUpIsDisplayed) {
                    gui.PopUpManager.removePopUp(this.popUp);
                    this.popUp.ownerChanged(null);
                }
            };
            /**
             * 添加或移除popUp
             */
            p.addOrRemovePopUp = function () {
                if (!this.addedToStage || !this.popUp)
                    return;
                if (this.popUp.parent == null && this.displayPopUp) {
                    gui.PopUpManager.addPopUp(this.popUp, this._relativeToStage, this._relativeToStage);
                    this.popUp.ownerChanged(this);
                    this.popUpIsDisplayed = true;
                    if (this.inAnimation)
                        this.animator.end();
                    if (this.initialized) {
                        this.applyPopUpTransform(this.width, this.height);
                        if (this._openDuration > 0)
                            this.startAnimation();
                    }
                    else {
                        egret.callLater(function () {
                            if (this.openDuration > 0)
                                this.startAnimation();
                        }, this);
                    }
                }
                else if (this.popUp.parent != null && !this.displayPopUp) {
                    this.removeAndResetPopUp();
                }
            };
            /**
             * 移除并重置popUp
             */
            p.removeAndResetPopUp = function () {
                if (this.inAnimation)
                    this.animator.end();
                this.popUpIsDisplayed = false;
                if (this._closeDuration > 0) {
                    this.startAnimation();
                }
                else {
                    gui.PopUpManager.removePopUp(this.popUp);
                    this.popUp.ownerChanged(null);
                }
            };
            /**
             * 对popUp应用尺寸和位置调整
             */
            p.applyPopUpTransform = function (unscaledWidth, unscaledHeight) {
                if (!this.popUpIsDisplayed)
                    return;
                if (this.popUpWidthMatchesAnchorWidth)
                    this.popUp.width = unscaledWidth;
                if (this.popUpHeightMatchesAnchorHeight)
                    this.popUp.height = unscaledHeight;
                if ("validateNow" in this.popUp)
                    (this.popUp).validateNow();
                var popUpPoint = this.calculatePopUpPosition();
                this.popUp.x = popUpPoint.x;
                this.popUp.y = popUpPoint.y;
            };
            /**
             * 开始播放动画
             */
            p.startAnimation = function () {
                if (!this.animator) {
                    this.animator = new gui.Animation(this.animationUpdateHandler, this);
                    this.animator.endFunction = this.animationEndHandler;
                    this.animator.startFunction = this.animationStartHandler;
                }
                this.animator.motionPaths = this.createMotionPath();
                if (this.popUpIsDisplayed) {
                    this.animator.duration = this._openDuration;
                }
                else {
                    this.animator.duration = this._closeDuration;
                }
                this.animator.play();
            };
            /**
             * 创建动画轨迹
             */
            p.createMotionPath = function () {
                var xPath = new gui.SimpleMotionPath("x");
                var yPath = new gui.SimpleMotionPath("y");
                var path = [xPath, yPath];
                switch (this._popUpPosition) {
                    case gui.PopUpPosition.TOP_LEFT:
                    case gui.PopUpPosition.CENTER:
                    case gui.PopUpPosition.BELOW:
                        xPath.valueFrom = xPath.valueTo = 0;
                        yPath.valueFrom = this.popUp.height;
                        yPath.valueTo = 0;
                        this.valueRange = this.popUp.height;
                        break;
                    case gui.PopUpPosition.ABOVE:
                        xPath.valueFrom = xPath.valueTo = 0;
                        yPath.valueFrom = -this.popUp.height;
                        yPath.valueTo = 0;
                        this.valueRange = this.popUp.height;
                        break;
                    case gui.PopUpPosition.LEFT:
                        yPath.valueFrom = yPath.valueTo = 0;
                        xPath.valueFrom = -this.popUp.width;
                        xPath.valueTo = 0;
                        this.valueRange = this.popUp.width;
                        break;
                    case gui.PopUpPosition.RIGHT:
                        yPath.valueFrom = yPath.valueTo = 0;
                        xPath.valueFrom = this.popUp.width;
                        xPath.valueTo = 0;
                        this.valueRange = this.popUp.width;
                        break;
                    default:
                        this.valueRange = 1;
                        break;
                }
                this.valueRange = Math.abs(this.valueRange);
                if (!this.popUpIsDisplayed) {
                    var tempValue = xPath.valueFrom;
                    xPath.valueFrom = xPath.valueTo;
                    xPath.valueTo = tempValue;
                    tempValue = yPath.valueFrom;
                    yPath.valueFrom = yPath.valueTo;
                    yPath.valueTo = tempValue;
                }
                return path;
            };
            /**
             * 添加到舞台事件
             */
            p.addedToStageHandler = function (event) {
                this.addedToStage = true;
                egret.callLater(this.checkPopUpState, this);
            };
            /**
             * 延迟检查弹出状态，防止堆栈溢出。
             */
            p.checkPopUpState = function () {
                if (this.addedToStage) {
                    this.addOrRemovePopUp();
                }
                else {
                    if (this.popUp != null && (this.popUp).parent != null)
                        this.removeAndResetPopUp();
                }
            };
            /**
             * 从舞台移除事件
             */
            p.removedFromStageHandler = function (event) {
                this.addedToStage = false;
                egret.callLater(this.checkPopUpState, this);
            };
            return PopUpAnchor;
        })(gui.UIComponent);
        gui.PopUpAnchor = PopUpAnchor;
        egret.registerClass(PopUpAnchor,"egret.gui.PopUpAnchor");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ProgressBar
         * @classdesc
         * 进度条控件。
         * @extends egret.gui.Range
         */
        var ProgressBar = (function (_super) {
            __extends(ProgressBar, _super);
            /**
             * @method egret.gui.ProgressBar#constructor
             */
            function ProgressBar() {
                _super.call(this);
                /**
                 * [SkinPart]进度高亮显示对象。
                 * @member egret.gui.ProgressBar#thumb
                 */
                this.thumb = null;
                /**
                 * [SkinPart]轨道显示对象，用于确定thumb要覆盖的区域。
                 * @member egret.gui.ProgressBar#track
                 */
                this.track = null;
                /**
                 * [SkinPart]进度条文本
                 * @member egret.gui.ProgressBar#labelDisplay
                 */
                this.labelDisplay = null;
                this._labelFunction = null;
                this._slideDuration = 500;
                this._direction = gui.ProgressBarDirection.LEFT_TO_RIGHT;
                /**
                 * 动画实例
                 */
                this.animator = null;
                /**
                 * 动画播放结束时要到达的value。
                 */
                this.slideToValue = NaN;
                this.animationValue = 0;
                this.trackResizedOrMoved = false;
            }
            var d = __define,c=ProgressBar;p=c.prototype;
            d(p, "labelFunction"
                /**
                 * 进度条文本格式化回调函数。示例：labelFunction(value:Number,maximum:Number):String;
                 * @member egret.gui.ProgressBar#labelFunction
                 */
                ,function () {
                    return this._labelFunction;
                }
                ,function (value) {
                    if (this._labelFunction == value)
                        return;
                    this._labelFunction = value;
                    this.invalidateDisplayList();
                }
            );
            /**
             * 将当前value转换成文本
             * @method egret.gui.ProgressBar#valueToLabel
             * @param value {number}
             * @param maximum {number}
             * @returns {string}
             */
            p.valueToLabel = function (value, maximum) {
                if (this.labelFunction != null) {
                    return this._labelFunction(value, maximum);
                }
                return value + " / " + maximum;
            };
            d(p, "slideDuration"
                /**
                 * value改变时调整thumb长度的缓动动画时间，单位毫秒。设置为0则不执行缓动。默认值500。
                 * @member egret.gui.ProgressBar#slideDuration
                 */
                ,function () {
                    return this._slideDuration;
                }
                ,function (value) {
                    if (this._slideDuration == value)
                        return;
                    this._slideDuration = value;
                    if (this.animator && this.animator.isPlaying) {
                        this.animator.stop();
                        this._setValue(this.slideToValue);
                    }
                }
            );
            d(p, "direction"
                /**
                 * 进度条增长方向。请使用ProgressBarDirection定义的常量。默认值：ProgressBarDirection.LEFT_TO_RIGHT。
                 * @member egret.gui.ProgressBar#direction
                 */
                ,function () {
                    return this._direction;
                }
                ,function (value) {
                    if (this._direction == value)
                        return;
                    this._direction = value;
                    this.invalidateDisplayList();
                }
            );
            d(p, "value"
                /**
                 * 进度条的当前值。
                 * 注意：当组件添加到显示列表后，若slideDuration不为0。设置此属性，并不会立即应用。而是作为目标值，开启缓动动画缓慢接近。
                 * 若需要立即重置属性，请先设置slideDuration为0，或者把组件从显示列表移除。
                 * @member egret.gui.ProgressBar#value
                 */
                ,function () {
                    return this._getValue();
                }
                ,function (newValue) {
                    if (this._getValue() == newValue)
                        return;
                    this._setValue(newValue);
                    if (this._slideDuration > 0 && this.stage) {
                        this.validateProperties(); //最大值最小值发生改变时要立即应用，防止当前起始值不正确。
                        if (!this.animator) {
                            this.animator = new gui.Animation(this.animationUpdateHandler, this);
                        }
                        if (this.animator.isPlaying) {
                            this.animationValue = this.slideToValue;
                            this.invalidateDisplayList();
                            this.animator.stop();
                        }
                        this.slideToValue = this.nearestValidValue(newValue, this.snapInterval);
                        if (this.slideToValue == this.animationValue)
                            return;
                        var duration = this._slideDuration * (Math.abs(this.animationValue - this.slideToValue) / (this.maximum - this.minimum));
                        this.animator.duration = duration === Infinity ? 0 : duration;
                        this.animator.motionPaths = [
                            new gui.SimpleMotionPath("value", this.animationValue, this.slideToValue)
                        ];
                        this.animator.play();
                    }
                    else {
                        this.animationValue = this._getValue();
                    }
                }
            );
            /**
             * 动画播放更新数值
             */
            p.animationUpdateHandler = function (animation) {
                var value = this.nearestValidValue(animation.currentValue["value"], this.snapInterval);
                this.animationValue = Math.min(this.maximum, Math.max(this.minimum, value));
                this.invalidateDisplayList();
            };
            /**
             * @method egret.gui.ProgressBar#setValue
             * @param value {number}
             */
            p.setValue = function (value) {
                _super.prototype.setValue.call(this, value);
                this.invalidateDisplayList();
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @method egret.gui.ProgressBar#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                this.updateSkinDisplayList();
            };
            /**
             * [覆盖] 添加外观部件时调用
             * @param partName
             * @param instance
             */
            p.partAdded = function (partName, instance) {
                if (instance == this.track) {
                    if (this.track instanceof gui.UIComponent) {
                        this.track.addEventListener(gui.ResizeEvent.RESIZE, this.onTrackResizeOrMove, this);
                        this.track.addEventListener(gui.MoveEvent.MOVE, this.onTrackResizeOrMove, this);
                    }
                }
            };
            /**
             * [覆盖] 正删除外观部件的实例时调用
             * @param partName
             * @param instance
             */
            p.partRemoved = function (partName, instance) {
                if (instance == this.track) {
                    if (this.track instanceof gui.UIComponent) {
                        this.track.removeEventListener(gui.ResizeEvent.RESIZE, this.onTrackResizeOrMove, this);
                        this.track.removeEventListener(gui.MoveEvent.MOVE, this.onTrackResizeOrMove, this);
                    }
                }
            };
            /**
             * track的位置或尺寸发生改变
             */
            p.onTrackResizeOrMove = function (event) {
                this.trackResizedOrMoved = true;
                this.invalidateProperties();
            };
            /**
             * 处理对组件设置的属性
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.trackResizedOrMoved) {
                    this.trackResizedOrMoved = false;
                    this.updateSkinDisplayList();
                }
            };
            /**
             * 更新皮肤部件大小和可见性。
             * @method egret.gui.ProgressBar#updateSkinDisplayList
             */
            p.updateSkinDisplayList = function () {
                this.trackResizedOrMoved = false;
                var currentValue = this.value;
                if (this.animator && this.animator.isPlaying) {
                    currentValue = this.animationValue;
                }
                else {
                    currentValue = this.value;
                    if (isNaN(currentValue)) {
                        currentValue = 0;
                    }
                }
                var maxValue = isNaN(this.maximum) ? 0 : this.maximum;
                if (this.thumb && this.track) {
                    var trackWidth = isNaN(this.track.width) ? 0 : this.track.width;
                    trackWidth *= this.track.scaleX;
                    var trackHeight = isNaN(this.track.height) ? 0 : this.track.height;
                    trackHeight *= this.track.scaleY;
                    var thumbWidth = Math.round((currentValue / maxValue) * trackWidth);
                    if (isNaN(thumbWidth) || thumbWidth < 0 || thumbWidth === Infinity)
                        thumbWidth = 0;
                    var thumbHeight = Math.round((currentValue / maxValue) * trackHeight);
                    if (isNaN(thumbHeight) || thumbHeight < 0 || thumbHeight === Infinity)
                        thumbHeight = 0;
                    var p = this.track.localToGlobal(0, 0);
                    var thumbPos = this.globalToLocal(p.x, p.y, egret.$TempPoint);
                    var thumbPosX = thumbPos.x;
                    var thumbPosY = thumbPos.y;
                    switch (this._direction) {
                        case gui.ProgressBarDirection.LEFT_TO_RIGHT:
                            this.thumb.width = thumbWidth;
                            this.thumb.height = trackHeight;
                            this.thumb.x = thumbPosX;
                            break;
                        case gui.ProgressBarDirection.RIGHT_TO_LEFT:
                            this.thumb.width = thumbWidth;
                            this.thumb.height = trackHeight;
                            this.thumb.x = thumbPosX + trackWidth - thumbWidth;
                            break;
                        case gui.ProgressBarDirection.TOP_TO_BOTTOM:
                            this.thumb.width = trackWidth;
                            this.thumb.height = thumbHeight;
                            this.thumb.y = thumbPosY;
                            break;
                        case gui.ProgressBarDirection.BOTTOM_TO_TOP:
                            this.thumb.width = trackWidth;
                            this.thumb.height = thumbHeight;
                            this.thumb.y = thumbPosY + trackHeight - thumbHeight;
                            break;
                    }
                }
                if (this.labelDisplay) {
                    this.labelDisplay.text = this.valueToLabel(currentValue, maxValue);
                }
            };
            return ProgressBar;
        })(gui.Range);
        gui.ProgressBar = ProgressBar;
        egret.registerClass(ProgressBar,"egret.gui.ProgressBar");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ProgressBarDirection
         * @classdesc
         * 定义进度条控件增长方向的常量
         */
        var ProgressBarDirection = (function () {
            function ProgressBarDirection() {
            }
            var d = __define,c=ProgressBarDirection;p=c.prototype;
            /**
             * 水平从左到右增长
             * @constant egret.gui.ProgressBarDirection.LEFT_TO_RIGHT
             */
            ProgressBarDirection.LEFT_TO_RIGHT = "leftToRight";
            /**
             * 水平从右到左增长
             * @constant egret.gui.ProgressBarDirection.RIGHT_TO_LEFT
             */
            ProgressBarDirection.RIGHT_TO_LEFT = "rightToLeft";
            /**
             * 竖直从上到下增长
             * @constant egret.gui.ProgressBarDirection.TOP_TO_BOTTOM
             */
            ProgressBarDirection.TOP_TO_BOTTOM = "topToBottom";
            /**
             * 竖直从下到上增长
             * @constant egret.gui.ProgressBarDirection.BOTTOM_TO_TOP
             */
            ProgressBarDirection.BOTTOM_TO_TOP = "bottomToTop";
            return ProgressBarDirection;
        })();
        gui.ProgressBarDirection = ProgressBarDirection;
        egret.registerClass(ProgressBarDirection,"egret.gui.ProgressBarDirection");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.RadioButton
         * @classdesc
         * RadioButton 组件使用户可在一组互相排斥的选择中做出一种选择
         * @extends egret.gui.ToggleButtonBase
         */
        var RadioButton = (function (_super) {
            __extends(RadioButton, _super);
            /**
             * 构造函数
             * @method egret.gui.RadioButton#constructor
             */
            function RadioButton() {
                _super.call(this);
                /**
                 * 在RadioButtonGroup中的索引
                 */
                this._indexNumber = 0;
                /**
                 * 所属的RadioButtonGroup
                 */
                this._radioButtonGroup = null;
                this._group = null;
                this.groupChanged = false;
                this._groupName = "radioGroup";
                this._value = null;
                this.groupName = "radioGroup";
            }
            var d = __define,c=RadioButton;p=c.prototype;
            d(p, "enabled"
                /**
                 * 组件是否可以接受用户交互。默认值为true。设置此属性将影响组内所有单选按钮
                 * @member egret.gui.RadioButton#enabled
                 */
                ,function () {
                    if (!this._UIC_Props_._enabled)
                        return false;
                    return !this._radioButtonGroup || this._radioButtonGroup.enabled;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    this.$setEnabled(value);
                }
            );
            d(p, "group"
                /**
                 * 此单选按钮所属的组。同一个组的多个单选按钮之间互斥。
                 * 若不设置此属性，则根据groupName属性自动创建一个唯一的RadioButtonGroup。
                 * @member egret.gui.RadioButton#group
                 */
                ,function () {
                    if (!this._group && this._groupName) {
                        if (!RadioButton.automaticRadioButtonGroups)
                            RadioButton.automaticRadioButtonGroups = {};
                        var g = RadioButton.automaticRadioButtonGroups[this._groupName];
                        if (!g) {
                            g = new gui.RadioButtonGroup();
                            g._name = this._groupName;
                            RadioButton.automaticRadioButtonGroups[this._groupName] = g;
                        }
                        this._group = g;
                    }
                    return this._group;
                }
                ,function (value) {
                    if (this._group == value)
                        return;
                    if (this._radioButtonGroup)
                        this._radioButtonGroup._removeInstance(this);
                    this._group = value;
                    this._groupName = value ? this.group._name : "radioGroup";
                    this.groupChanged = true;
                    this.invalidateProperties();
                    this.invalidateDisplayList();
                }
            );
            d(p, "groupName"
                /**
                 * 所属组的名称,具有相同组名的多个单选按钮之间互斥。默认值:"radioGroup"。
                 * 可以把此属性当做设置组的一个简便方式，作用与设置group属性相同,。
                 * @member egret.gui.RadioButton#groupName
                 */
                ,function () {
                    return this._groupName;
                }
                ,function (value) {
                    if (!value || value == "")
                        return;
                    this._groupName = value;
                    if (this._radioButtonGroup)
                        this._radioButtonGroup._removeInstance(this);
                    this._group = null;
                    this.groupChanged = true;
                    this.invalidateProperties();
                    this.invalidateDisplayList();
                }
            );
            /**
             *
             * @param value
             * @private
             */
            p._setSelected = function (value) {
                _super.prototype._setSelected.call(this, value);
                this.invalidateDisplayList();
            };
            d(p, "value"
                /**
                 * 与此单选按钮关联的自定义数据。
                 * 当被点击时，所属的RadioButtonGroup对象会把此属性赋值给ItemClickEvent.item属性并抛出事件。
                 * @member egret.gui.RadioButton#value
                 */
                ,function () {
                    return this._value;
                }
                ,function (value) {
                    if (this._value == value)
                        return;
                    this._value = value;
                    if (this.selected && this.group)
                        gui.UIEvent.dispatchUIEvent(this.group, gui.UIEvent.VALUE_COMMIT);
                }
            );
            /**
             * 处理对组件设置的属性
             * @method egret.gui.RadioButton#commitProperties
             */
            p.commitProperties = function () {
                if (this.groupChanged) {
                    this.addToGroup();
                    this.groupChanged = false;
                }
                _super.prototype.commitProperties.call(this);
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @method egret.gui.RadioButton#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                if (this.group) {
                    if (this.selected)
                        this._group.selection = this;
                    else if (this.group.selection == this)
                        this._group.selection = null;
                }
            };
            /**
             * 当在用户单击按钮之后处理 MouseEvent.MOUSE_UP 事件时，将调用此方法
             * @method egret.gui.RadioButton#buttonReleased
             */
            p.buttonReleased = function () {
                if (!this.enabled || this.selected)
                    return;
                if (!this._radioButtonGroup)
                    this.addToGroup();
                _super.prototype.buttonReleased.call(this);
                this.group._setSelection(this);
            };
            /**
             * 添此单选按钮加到组
             */
            p.addToGroup = function () {
                var g = this.group;
                if (g)
                    g._addInstance(this);
                return g;
            };
            /**
             * 存储根据groupName自动创建的RadioButtonGroup列表
             */
            RadioButton.automaticRadioButtonGroups = null;
            return RadioButton;
        })(gui.ToggleButtonBase);
        gui.RadioButton = RadioButton;
        egret.registerClass(RadioButton,"egret.gui.RadioButton");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.RadioButtonGroup
         * @classdesc
         * RadioButtonGroup 组件定义一组 RadioButton 组件，这些组件相互排斥；因此，用户每次只能选择一个 RadioButton 组件
         * @extends egret.EventDispatcher
         */
        var RadioButtonGroup = (function (_super) {
            __extends(RadioButtonGroup, _super);
            /**
             * 构造函数
             * @method egret.gui.RadioButtonGroup#constructor
             */
            function RadioButtonGroup() {
                _super.call(this);
                /**
                 * 组名
                 */
                this._name = null;
                /**
                 * 单选按钮列表
                 */
                this.radioButtons = [];
                this._enabled = true;
                this._selectedValue = null;
                this._selection = null;
                this._name = "_radioButtonGroup" + RadioButtonGroup.groupCount;
                RadioButtonGroup.groupCount++;
            }
            var d = __define,c=RadioButtonGroup;p=c.prototype;
            d(p, "enabled"
                /**
                 * 组件是否可以接受用户交互。默认值为true。设置此属性将影响组内所有单选按钮。
                 * @member egret.gui.RadioButtonGroup#enabled
                 */
                ,function () {
                    return this._enabled;
                }
                ,function (value) {
                    if (this._enabled == value)
                        return;
                    this._enabled = value;
                    for (var i = 0; i < this.numRadioButtons; i++)
                        this.getRadioButtonAt(i).invalidateSkinState();
                }
            );
            d(p, "numRadioButtons"
                /**
                 * 组内单选按钮数量
                 * @member egret.gui.RadioButtonGroup#numRadioButtons
                 */
                ,function () {
                    return this.radioButtons.length;
                }
            );
            d(p, "selectedValue"
                /**
                 * 当前被选中的单选按钮的value属性值。注意，此属性仅当目标RadioButton在显示列表时有效。
                 * @member egret.gui.RadioButtonGroup#selectedValue
                 */
                ,function () {
                    if (this.selection) {
                        return this.selection.value != null ? this.selection.value : this.selection.label;
                    }
                    return null;
                }
                ,function (value) {
                    this._selectedValue = value;
                    if (value == null) {
                        this._setSelection(null, false);
                        return;
                    }
                    var n = this.numRadioButtons;
                    for (var i = 0; i < n; i++) {
                        var radioButton = this.getRadioButtonAt(i);
                        if (radioButton.value == value || radioButton.label == value) {
                            this.changeSelection(i, false);
                            this._selectedValue = null;
                            gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.VALUE_COMMIT);
                            break;
                        }
                    }
                }
            );
            d(p, "selection"
                /**
                 * 当前被选中的单选按钮引用,注意，此属性仅当目标RadioButton在显示列表时有效。
                 * @member egret.gui.RadioButtonGroup#selection
                 */
                ,function () {
                    return this._selection;
                }
                ,function (value) {
                    if (this._selection == value)
                        return;
                    this._setSelection(value, false);
                }
            );
            /**
             * 获取指定索引的单选按钮
             * @method egret.gui.RadioButtonGroup#getRadioButtonAt
             * @param index {number} 单选按钮的索引
             * @returns {RadioButton}
             */
            p.getRadioButtonAt = function (index) {
                if (index >= 0 && index < this.numRadioButtons)
                    return this.radioButtons[index];
                return null;
            };
            /**
             * 添加单选按钮到组内
             * @param instance {RadioButton}
             */
            p._addInstance = function (instance) {
                instance.addEventListener(egret.Event.REMOVED, this.radioButton_removedHandler, this);
                this.radioButtons.push(instance);
                this.radioButtons.sort(breadthOrderCompare);
                for (var i = 0; i < this.radioButtons.length; i++)
                    this.radioButtons[i]._indexNumber = i;
                if (this._selectedValue)
                    this.selectedValue = this._selectedValue;
                if (instance.selected == true)
                    this.selection = instance;
                instance._radioButtonGroup = this;
                instance.invalidateSkinState();
                this.dispatchEventWith("numRadioButtonsChanged");
                function breadthOrderCompare(a, b) {
                    var aParent = a.parent;
                    var bParent = b.parent;
                    if (!aParent || !bParent)
                        return 0;
                    var aNestLevel = (a instanceof gui.UIComponent) ? a.nestLevel : -1;
                    var bNestLevel = (b instanceof gui.UIComponent) ? b.nestLevel : -1;
                    var aIndex = 0;
                    var bIndex = 0;
                    if (aParent == bParent) {
                        if ("getElementIndex" in aParent && "ownerChanged" in a)
                            aIndex = aParent.getElementIndex(a);
                        else
                            aIndex = aParent.getChildIndex(a);
                        if ("getElementIndex" in bParent && "ownerChanged" in b)
                            bIndex = bParent.getElementIndex(b);
                        else
                            bIndex = bParent.getChildIndex(b);
                    }
                    if (aNestLevel > bNestLevel || aIndex > bIndex)
                        return 1;
                    else if (aNestLevel < bNestLevel || bIndex > aIndex)
                        return -1;
                    else if (a == b)
                        return 0;
                    else
                        return breadthOrderCompare(aParent, bParent);
                }
            };
            /**
             * 从组里移除单选按钮
             * @param instance {RadioButton}
             */
            p._removeInstance = function (instance) {
                this.doRemoveInstance(instance, false);
            };
            /**
             * 执行从组里移除单选按钮
             */
            p.doRemoveInstance = function (instance, addListener) {
                if (addListener === void 0) { addListener = true; }
                if (instance) {
                    var foundInstance = false;
                    for (var i = 0; i < this.numRadioButtons; i++) {
                        var rb = this.getRadioButtonAt(i);
                        if (foundInstance) {
                            rb._indexNumber = rb._indexNumber - 1;
                        }
                        else if (rb == instance) {
                            if (addListener)
                                instance.addEventListener(egret.Event.ADDED, this.radioButton_addedHandler, this);
                            if (instance == this._selection)
                                this._selection = null;
                            instance._radioButtonGroup = null;
                            instance.invalidateSkinState();
                            this.radioButtons.splice(i, 1);
                            foundInstance = true;
                            i--;
                        }
                    }
                    if (foundInstance)
                        this.dispatchEventWith("numRadioButtonsChanged");
                }
            };
            /**
             * 设置选中的单选按钮
             * @param value {RadioButton}
             * @param fireChange {boolean}
             */
            p._setSelection = function (value, fireChange) {
                if (fireChange === void 0) { fireChange = true; }
                if (this._selection == value)
                    return;
                if (!value) {
                    if (this.selection) {
                        this._selection.selected = false;
                        this._selection = null;
                        if (fireChange)
                            this.dispatchEventWith(egret.Event.CHANGE);
                    }
                }
                else {
                    var n = this.numRadioButtons;
                    for (var i = 0; i < n; i++) {
                        if (value == this.getRadioButtonAt(i)) {
                            this.changeSelection(i, fireChange);
                            break;
                        }
                    }
                }
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.VALUE_COMMIT);
            };
            /**
             * 改变选中项
             */
            p.changeSelection = function (index, fireChange) {
                if (fireChange === void 0) { fireChange = true; }
                var rb = this.getRadioButtonAt(index);
                if (rb && rb != this._selection) {
                    if (this._selection)
                        this._selection.selected = false;
                    this._selection = rb;
                    this._selection.selected = true;
                    if (fireChange)
                        this.dispatchEventWith(egret.Event.CHANGE);
                }
            };
            /**
             * 单选按钮添加到显示列表
             */
            p.radioButton_addedHandler = function (event) {
                var rb = (event.target);
                if (rb) {
                    rb.removeEventListener(egret.Event.ADDED, this.radioButton_addedHandler, this);
                    this._addInstance(rb);
                }
            };
            /**
             * 单选按钮从显示列表移除
             */
            p.radioButton_removedHandler = function (event) {
                var rb = (event.target);
                if (rb) {
                    rb.removeEventListener(egret.Event.REMOVED, this.radioButton_removedHandler, this);
                    this.doRemoveInstance(rb);
                }
            };
            RadioButtonGroup.groupCount = 0;
            return RadioButtonGroup;
        })(egret.EventDispatcher);
        gui.RadioButtonGroup = RadioButtonGroup;
        egret.registerClass(RadioButtonGroup,"egret.gui.RadioButtonGroup");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Rect
         * @classdesc
         * 矩形绘图元素。此组件可响应鼠标事件。
         * @extends egret.gui.UIComponent
         */
        var Rect = (function (_super) {
            __extends(Rect, _super);
            /**
             * 构造函数
             * @method egret.gui.Rect#constructor
             */
            function Rect() {
                _super.call(this);
                this._fillColor = 0xFFFFFF;
                this._fillAlpha = 1;
                this._strokeColor = 0x444444;
                this._strokeAlpha = 0;
                this._strokeWeight = 1;
                this.touchChildren = false;
                this.$renderRegion = new egret.sys.Region();
            }
            var d = __define,c=Rect;p=c.prototype;
            d(p, "graphics"
                ,function () {
                    if (!this.$graphics) {
                        this.$graphics = new egret.Graphics();
                        this.$graphics.$renderContext.$targetDisplay = this;
                    }
                    return this.$graphics;
                }
            );
            p.$render = function (context) {
                if (this.$graphics)
                    this.$graphics.$render(context);
                _super.prototype.$render.call(this, context);
            };
            p.$hitTest = function (stageX, stageY) {
                var target = _super.prototype.$hitTest.call(this, stageX, stageY);
                if (target == this) {
                    target = this.$graphics.$hitTest(stageX, stageY);
                }
                return target;
            };
            /**
             * @private
             */
            p.$measureContentBounds = function (bounds) {
                if (this.$graphics) {
                    this.$graphics.$measureContentBounds(bounds);
                }
            };
            d(p, "fillColor"
                /**
                 * 填充颜色
                 * @member egret.gui.Rect#fillColor
                 */
                ,function () {
                    return this._fillColor;
                }
                ,function (value) {
                    if (this._fillColor == value)
                        return;
                    this._fillColor = value;
                    this.invalidateDisplayList();
                }
            );
            d(p, "fillAlpha"
                /**
                 * 填充透明度,默认值为0。
                 * @member egret.gui.Rect#fillAlpha
                 */
                ,function () {
                    return this._fillAlpha;
                }
                ,function (value) {
                    if (this._fillAlpha == value)
                        return;
                    this._fillAlpha = value;
                    this.invalidateDisplayList();
                }
            );
            d(p, "strokeColor"
                /**
                 * 边框颜色,注意：当strokeAlpha为0时，不显示边框。
                 * @member egret.gui.Rect#strokeColor
                 */
                ,function () {
                    return this._strokeColor;
                }
                ,function (value) {
                    if (this._strokeColor == value)
                        return;
                    this._strokeColor = value;
                    this.invalidateDisplayList();
                }
            );
            d(p, "strokeAlpha"
                /**
                 * 边框透明度，默认值为0。
                 * @member egret.gui.Rect#strokeAlpha
                 */
                ,function () {
                    return this._strokeAlpha;
                }
                ,function (value) {
                    if (this._strokeAlpha == value)
                        return;
                    this._strokeAlpha = value;
                    this.invalidateDisplayList();
                }
            );
            d(p, "strokeWeight"
                /**
                 * 边框粗细(像素),注意：当strokeAlpha为0时，不显示边框。
                 * @member egret.gui.Rect#strokeWeight
                 */
                ,function () {
                    return this._strokeWeight;
                }
                ,function (value) {
                    if (this._strokeWeight == value)
                        return;
                    this._strokeWeight = value;
                    this.invalidateDisplayList();
                }
            );
            /**
             * @see egret.DisplayObject.measureBounds
             * @returns {Rectangle}
             * @private
             */
            //public _measureBounds():egret.Rectangle {
            //    var bounds:Rectangle = super._measureBounds();
            //    var w:number = this.width;
            //    var h:number = this.height;
            //    var x:number = 0;
            //    var y:number = 0;
            //    if (x < bounds.x) {
            //        bounds.x = x;
            //    }
            //    if (y < bounds.y) {
            //        bounds.y = y;
            //    }
            //    if (x + w > bounds.right) {
            //        bounds.right = x + w;
            //    }
            //    if (y + h > bounds.bottom) {
            //        bounds.bottom = y + h;
            //    }
            //    return bounds;
            //}
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @method egret.gui.Rect#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledWidth);
                var g = this.graphics;
                g.clear();
                g.beginFill(this._fillColor, this._fillAlpha);
                if (this._strokeAlpha > 0) {
                    g.lineStyle(this._strokeWeight, this._strokeColor, this._strokeAlpha, true, "normal", "square", "miter");
                }
                g.drawRect(0, 0, unscaledWidth, unscaledHeight);
                g.endFill();
            };
            return Rect;
        })(gui.UIComponent);
        gui.Rect = Rect;
        egret.registerClass(Rect,"egret.gui.Rect");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @private
         */
        var ScrollerView = (function (_super) {
            __extends(ScrollerView, _super);
            /**
             * @language en_US
             * Create a egret.ScrollerView objects
             * @param content {egret.DisplayObject} You need to scroll object
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 创建一个 egret.ScrollerView 对象
             * @param content {egret.DisplayObject} 需要滚动的对象
             * @version Egret 2.4
             * @platform Web,Native
             */
            function ScrollerView(content) {
                if (content === void 0) { content = null; }
                _super.call(this);
                /**
                 * @language en_US
                 * Start rolling threshold when the touch point from the initial touch point at a distance exceeding this value will trigger roll
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                /**
                 * @language zh_CN
                 * 开始滚动的阈值，当触摸点偏离初始触摸点的距离超过这个值时才会触发滚动
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                this.scrollBeginThreshold = 10;
                /**
                 * @language en_US
                 * Scrolling speed, the speed is required and the default speed ratio.
                 * The range of scrollSpeed> 0 assigned to 2:00, the speed is 2 times the default speed
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                /**
                 * @language zh_CN
                 * 滚动速度，这个值为需要的速度与默认速度的比值。
                 * 取值范围为 scrollSpeed > 0 赋值为 2 时，速度是默认速度的 2 倍
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                this.scrollSpeed = 1;
                /**
                 * @private
                 */
                this._content = null;
                /**
                 * @private
                 */
                this.delayTouchBeginEvent = null;
                /**
                 * @private
                 */
                this.touchBeginTimer = null;
                this.touchEnabled = true;
                this._ScrV_Props_ = new gui.ScrollerViewProperties();
                if (content) {
                    this.setContent(content);
                }
            }
            var d = __define,c=ScrollerView;p=c.prototype;
            d(p, "bounces"
                /**
                 * @language en_US
                 * Whether to enable rebound, rebound When enabled, ScrollerView contents allowed to continue to drag the border after arriving at the end user drag operation, and then bounce back boundary position
                 * @default true
                 * @version Egret 2.4
                 */
                /**
                 * @language zh_CN
                 * 是否启用回弹，当启用回弹后，ScrollView中内容在到达边界后允许继续拖动，在用户拖动操作结束后，再反弹回边界位置
                 * @default true
                 * @version Egret 2.4
                 */
                ,function () {
                    return this._ScrV_Props_._bounces;
                }
                ,function (value) {
                    this._ScrV_Props_._bounces = !!value;
                }
            );
            /**
             * @language en_US
             * Set to scroll object
             * @param content {egret.DisplayObject} You need to scroll object
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 设置需要滚动的对象
             * @param content {egret.DisplayObject} 需要滚动的对象
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.setContent = function (content) {
                if (this._content === content)
                    return;
                this.removeContent();
                if (content) {
                    this._content = content;
                    _super.prototype.addChild.call(this, content);
                    this._addEvents();
                }
            };
            /**
             * @language en_US
             * Remove rolling objects
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 移除滚动的对象
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.removeContent = function () {
                if (this._content) {
                    this._removeEvents();
                    _super.prototype.removeChildAt.call(this, 0);
                }
                this._content = null;
            };
            d(p, "verticalScrollPolicy"
                /**
                 * @language en_US
                 * Vertical scroll bar display policy, on / off / auto.
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                /**
                 * @language zh_CN
                 * 垂直滚动条显示策略，on/off/auto。
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                ,function () {
                    return this._ScrV_Props_._verticalScrollPolicy;
                }
                ,function (value) {
                    if (value == this._ScrV_Props_._verticalScrollPolicy)
                        return;
                    this._ScrV_Props_._verticalScrollPolicy = value;
                }
            );
            d(p, "horizontalScrollPolicy"
                /**
                 * @language en_US
                 * The horizontal scroll bar display policy, on / off / auto.
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                /**
                 * @language zh_CN
                 * 水平滚动条显示策略，on/off/auto。
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                ,function () {
                    return this._ScrV_Props_._horizontalScrollPolicy;
                }
                ,function (value) {
                    if (value == this._ScrV_Props_._horizontalScrollPolicy)
                        return;
                    this._ScrV_Props_._horizontalScrollPolicy = value;
                }
            );
            d(p, "scrollLeft"
                /**
                 * @language en_US
                 * Gets or sets the horizontal scroll position
                 * @returns {number}
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                /**
                 * @language zh_CN
                 * 获取或设置水平滚动位置,
                 * @returns {number}
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                ,function () {
                    return this._ScrV_Props_._scrollLeft;
                }
                ,function (value) {
                    if (value == this._ScrV_Props_._scrollLeft)
                        return;
                    this._ScrV_Props_._scrollLeft = value;
                    this._validatePosition(false, true);
                    this._updateContentPosition();
                }
            );
            d(p, "scrollTop"
                /**
                 * @language en_US
                 * Gets or sets the vertical scroll position
                 * @returns {number}
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                /**
                 * @language zh_CN
                 * 获取或设置垂直滚动位置,
                 * @returns {number}
                 * @version Egret 2.4
                 * @platform Web,Native
                 */
                ,function () {
                    return this._ScrV_Props_._scrollTop;
                }
                ,function (value) {
                    if (value == this._ScrV_Props_._scrollTop)
                        return;
                    this._ScrV_Props_._scrollTop = value;
                    this._validatePosition(true, false);
                    this._updateContentPosition();
                }
            );
            /**
             * @language en_US
             * Set scroll position
             * @param top {number} The vertical scroll position
             * @param left {number} The horizontal scroll position
             * @param isOffset {boolean} Optional parameter, the default is false, whether it is the amount of scrolling increase as top = 1 on behalf of one pixel scroll up
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 设置滚动位置
             * @param top {number} 垂直滚动位置
             * @param left {number} 水平滚动位置
             * @param isOffset {boolean} 可选参数，默认是false，是否是滚动增加量，如 top=1 代表往上滚动1像素
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.setScrollPosition = function (top, left, isOffset) {
                if (isOffset === void 0) { isOffset = false; }
                if (isOffset && top == 0 && left == 0)
                    return;
                if (!isOffset && this._ScrV_Props_._scrollTop == top && this._ScrV_Props_._scrollLeft == left)
                    return;
                var oldTop = this._ScrV_Props_._scrollTop, oldLeft = this._ScrV_Props_._scrollLeft;
                if (isOffset) {
                    var maxLeft = this.getMaxScrollLeft();
                    var maxTop = this.getMaxScrollTop();
                    if (oldTop <= 0 || oldTop >= maxTop) {
                        top = top / 2;
                    }
                    if (oldLeft <= 0 || oldLeft >= maxLeft) {
                        left = left / 2;
                    }
                    var newTop = oldTop + top;
                    var newLeft = oldLeft + left;
                    //判断是否回弹
                    var bounces = this._ScrV_Props_._bounces;
                    if (!bounces) {
                        if (newTop <= 0 || newTop >= maxTop)
                            newTop = Math.max(0, Math.min(newTop, maxTop));
                        if (newLeft <= 0 || newLeft >= maxLeft)
                            newLeft = Math.max(0, Math.min(newLeft, maxLeft));
                    }
                    this._ScrV_Props_._scrollTop = newTop;
                    this._ScrV_Props_._scrollLeft = newLeft;
                }
                else {
                    this._ScrV_Props_._scrollTop = top;
                    this._ScrV_Props_._scrollLeft = left;
                }
                this._validatePosition(true, true);
                this._updateContentPosition();
            };
            /**
             * @private
             *
             * @param top
             * @param left
             */
            p._validatePosition = function (top, left) {
                if (top === void 0) { top = false; }
                if (left === void 0) { left = false; }
                if (top) {
                    var height = this.height;
                    var contentHeight = this._getContentHeight();
                    this._ScrV_Props_._scrollTop = Math.max(this._ScrV_Props_._scrollTop, (0 - height) / 2);
                    this._ScrV_Props_._scrollTop = Math.min(this._ScrV_Props_._scrollTop, contentHeight > height ? (contentHeight - height / 2) : height / 2);
                }
                if (left) {
                    var width = this.width;
                    var contentWidth = this._getContentWidth();
                    this._ScrV_Props_._scrollLeft = Math.max(this._ScrV_Props_._scrollLeft, (0 - width) / 2);
                    this._ScrV_Props_._scrollLeft = Math.min(this._ScrV_Props_._scrollLeft, contentWidth > width ? (contentWidth - width / 2) : width / 2);
                }
            };
            /**
             * @private
             * @inheritDoc
             */
            p.$setWidth = function (value) {
                if (this.$getExplicitWidth() == value) {
                    return false;
                }
                var result = _super.prototype.$setWidth.call(this, value);
                this._updateContentPosition();
                return result;
            };
            /**
             * @private
             * @inheritDoc
             */
            p.$setHeight = function (value) {
                if (this.$getExplicitHeight() == value)
                    return false;
                var result = _super.prototype.$setHeight.call(this, value);
                this._updateContentPosition();
                return result;
            };
            /**
             * @private
             *
             */
            p._updateContentPosition = function () {
                var height = this.height;
                var width = this.width;
                //这里将坐标取整，避免有些浏览器精度低产生“黑线”问题
                this.scrollRect = new egret.Rectangle(Math.round(this._ScrV_Props_._scrollLeft), Math.round(this._ScrV_Props_._scrollTop), width, height);
                this.dispatchEvent(new egret.Event(egret.Event.CHANGE));
            };
            /**
             * @private
             *
             * @returns
             */
            p._checkScrollPolicy = function () {
                var hpolicy = this._ScrV_Props_._horizontalScrollPolicy;
                var hCanScroll = this.__checkScrollPolicy(hpolicy, this._getContentWidth(), this.width);
                this._ScrV_Props_._hCanScroll = hCanScroll;
                var vpolicy = this._ScrV_Props_._verticalScrollPolicy;
                var vCanScroll = this.__checkScrollPolicy(vpolicy, this._getContentHeight(), this.height);
                this._ScrV_Props_._vCanScroll = vCanScroll;
                return hCanScroll || vCanScroll;
            };
            /**
             * @private
             *
             * @param policy
             * @param contentLength
             * @param viewLength
             * @returns
             */
            p.__checkScrollPolicy = function (policy, contentLength, viewLength) {
                if (policy == "on")
                    return true;
                if (policy == "off")
                    return false;
                return contentLength > viewLength;
            };
            /**
             * @private
             *
             * @returns
             */
            p._addEvents = function () {
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this._onTouchBegin, this);
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this._onTouchBeginCapture, this, true);
                this.addEventListener(egret.TouchEvent.TOUCH_END, this._onTouchEndCapture, this, true);
            };
            /**
             * @private
             *
             * @returns
             */
            p._removeEvents = function () {
                this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this._onTouchBegin, this);
                this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this._onTouchBeginCapture, this, true);
                this.removeEventListener(egret.TouchEvent.TOUCH_END, this._onTouchEndCapture, this, true);
            };
            /**
             * @private
             *
             * @param e
             */
            p._onTouchBegin = function (e) {
                if (e.$isDefaultPrevented) {
                    return;
                }
                var canScroll = this._checkScrollPolicy();
                if (!canScroll) {
                    return;
                }
                this._ScrV_Props_._touchStartPosition.x = e.stageX;
                this._ScrV_Props_._touchStartPosition.y = e.stageY;
                if (this._ScrV_Props_._isHTweenPlaying || this._ScrV_Props_._isVTweenPlaying) {
                    this._onScrollFinished();
                }
                this._tempStage = this.stage;
                this._tempStage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this._onTouchMove, this);
                this._tempStage.addEventListener(egret.TouchEvent.TOUCH_END, this._onTouchEnd, this);
                this._tempStage.addEventListener(egret.TouchEvent.LEAVE_STAGE, this._onTouchEnd, this);
                this.addEventListener(egret.Event.ENTER_FRAME, this._onEnterFrame, this);
                this._logTouchEvent(e);
                e.preventDefault();
            };
            /**
             * @private
             *
             * @param event
             */
            p._onTouchBeginCapture = function (event) {
                var canScroll = this._checkScrollPolicy();
                if (!canScroll) {
                    return;
                }
                var target = event.target;
                while (target != this) {
                    if ("_checkScrollPolicy" in target) {
                        canScroll = target._checkScrollPolicy();
                        if (canScroll) {
                            return;
                        }
                    }
                    target = target.parent;
                }
                event.stopPropagation();
                var evt = this.cloneTouchEvent(event);
                this.delayTouchBeginEvent = evt;
                if (!this.touchBeginTimer) {
                    this.touchBeginTimer = new egret.Timer(100, 1);
                    this.touchBeginTimer.addEventListener(egret.TimerEvent.TIMER_COMPLETE, this._onTouchBeginTimer, this);
                }
                this.touchBeginTimer.start();
                this._onTouchBegin(event);
            };
            /**
             * @private
             *
             * @param event
             * @returns
             */
            p._onTouchEndCapture = function (event) {
                if (!this.delayTouchBeginEvent) {
                    return;
                }
                this._onTouchBeginTimer();
            };
            /**
             * @private
             *
             */
            p._onTouchBeginTimer = function () {
                this.touchBeginTimer.stop();
                var event = this.delayTouchBeginEvent;
                this.delayTouchBeginEvent = null;
                //Dispatch event only if the scroll view is still on the stage
                if (this.stage)
                    this.dispatchPropagationEvent(event);
            };
            /**
             * @private
             *
             * @param event
             * @returns
             */
            p.dispatchPropagationEvent = function (event) {
                var target = event.$target;
                var list = this.$getPropagationList(target);
                var length = list.length;
                var targetIndex = list.length * 0.5;
                var startIndex = -1;
                for (var i = 0; i < length; i++) {
                    if (list[i] === this._content) {
                        startIndex = i;
                        break;
                    }
                }
                list.splice(0, startIndex + 1);
                targetIndex -= startIndex + 1;
                this.$dispatchPropagationEvent(event, list, targetIndex);
                egret.Event.release(event);
            };
            /**
             * @private
             *
             * @param event
             * @returns
             */
            p._onTouchMove = function (event) {
                if (this._ScrV_Props_._lastTouchPosition.x == event.stageX && this._ScrV_Props_._lastTouchPosition.y == event.stageY)
                    return;
                if (!this._ScrV_Props_._scrollStarted) {
                    var x = event.stageX - this._ScrV_Props_._touchStartPosition.x, y = event.stageY - this._ScrV_Props_._touchStartPosition.y;
                    var distance = Math.sqrt(x * x + y * y);
                    if (distance < this.scrollBeginThreshold) {
                        this._logTouchEvent(event);
                        return;
                    }
                }
                this._ScrV_Props_._scrollStarted = true;
                if (this.delayTouchBeginEvent) {
                    this.delayTouchBeginEvent = null;
                    this.touchBeginTimer.stop();
                }
                this.touchChildren = false;
                var offset = this._getPointChange(event);
                this.setScrollPosition(offset.y, offset.x, true);
                this._calcVelocitys(event);
                this._logTouchEvent(event);
            };
            /**
             * @private
             *
             * @param event
             * @returns
             */
            p._onTouchEnd = function (event) {
                this.touchChildren = true;
                this._ScrV_Props_._scrollStarted = false;
                this._tempStage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this._onTouchMove, this);
                this._tempStage.removeEventListener(egret.TouchEvent.TOUCH_END, this._onTouchEnd, this);
                this._tempStage.removeEventListener(egret.TouchEvent.LEAVE_STAGE, this._onTouchEnd, this);
                this.removeEventListener(egret.Event.ENTER_FRAME, this._onEnterFrame, this);
                this._moveAfterTouchEnd();
            };
            /**
             * @private
             *
             * @param event
             * @returns
             */
            p._onEnterFrame = function (event) {
                var time = egret.getTimer();
                if (time - this._ScrV_Props_._lastTouchTime > 100 && time - this._ScrV_Props_._lastTouchTime < 300) {
                    this._calcVelocitys(this._ScrV_Props_._lastTouchEvent);
                }
            };
            /**
             * @private
             *
             * @param e
             * @returns
             */
            p._logTouchEvent = function (e) {
                this._ScrV_Props_._lastTouchPosition.x = e.stageX;
                this._ScrV_Props_._lastTouchPosition.y = e.stageY;
                this._ScrV_Props_._lastTouchEvent = this.cloneTouchEvent(e);
                this._ScrV_Props_._lastTouchTime = egret.getTimer();
            };
            /**
             * @private
             *
             * @param e
             * @returns
             */
            p._getPointChange = function (e) {
                return {
                    x: this._ScrV_Props_._hCanScroll === false ? 0 : (this._ScrV_Props_._lastTouchPosition.x - e.stageX),
                    y: this._ScrV_Props_._vCanScroll === false ? 0 : (this._ScrV_Props_._lastTouchPosition.y - e.stageY)
                };
            };
            /**
             * @private
             *
             * @param e
             * @returns
             */
            p._calcVelocitys = function (e) {
                var time = egret.getTimer();
                if (this._ScrV_Props_._lastTouchTime == 0) {
                    this._ScrV_Props_._lastTouchTime = time;
                    return;
                }
                var change = this._getPointChange(e);
                var timeoffset = time - this._ScrV_Props_._lastTouchTime;
                change.x /= timeoffset;
                change.y /= timeoffset;
                this._ScrV_Props_._velocitys.push(change);
                if (this._ScrV_Props_._velocitys.length > 5)
                    this._ScrV_Props_._velocitys.shift();
                this._ScrV_Props_._lastTouchPosition.x = e.stageX;
                this._ScrV_Props_._lastTouchPosition.y = e.stageY;
            };
            /**
             * @private
             *
             * @returns
             */
            p._getContentWidth = function () {
                return this._content.$getExplicitWidth() || this._content.width;
            };
            /**
             * @private
             *
             * @returns
             */
            p._getContentHeight = function () {
                return this._content.$getExplicitHeight() || this._content.height;
            };
            /**
             * @language en_US
             * The left side of the maximum distance
             * @returns The left side of the maximum distance
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 距离左侧的最大值
             * @returns 距离左侧最大值
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.getMaxScrollLeft = function () {
                var max = this._getContentWidth() - this.width;
                return Math.max(0, max);
            };
            /**
             * @language en_US
             * Above the maximum distance
             * @returns Above the maximum distance
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 距离上方最大值
             * @returns 距离上方最大值
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.getMaxScrollTop = function () {
                var max = this._getContentHeight() - this.height;
                return Math.max(0, max);
            };
            /**
             * @private
             *
             */
            p._moveAfterTouchEnd = function () {
                if (this._ScrV_Props_._velocitys.length == 0)
                    return;
                var sum = { x: 0, y: 0 }, totalW = 0;
                for (var i = 0; i < this._ScrV_Props_._velocitys.length; i++) {
                    var v = this._ScrV_Props_._velocitys[i];
                    var w = ScrollerView.weight[i];
                    sum.x += v.x * w;
                    sum.y += v.y * w;
                    totalW += w;
                }
                this._ScrV_Props_._velocitys.length = 0;
                if (this.scrollSpeed <= 0)
                    this.scrollSpeed = 1;
                var x = sum.x / totalW * this.scrollSpeed, y = sum.y / totalW * this.scrollSpeed;
                var pixelsPerMSX = Math.abs(x), pixelsPerMSY = Math.abs(y);
                var maxLeft = this.getMaxScrollLeft();
                var maxTop = this.getMaxScrollTop();
                var datax = pixelsPerMSX > 0.02 ? this.getAnimationDatas(x, this._ScrV_Props_._scrollLeft, maxLeft) : {
                    position: this._ScrV_Props_._scrollLeft,
                    duration: 1
                };
                var datay = pixelsPerMSY > 0.02 ? this.getAnimationDatas(y, this._ScrV_Props_._scrollTop, maxTop) : {
                    position: this._ScrV_Props_._scrollTop,
                    duration: 1
                };
                this.setScrollLeft(datax.position, datax.duration);
                this.setScrollTop(datay.position, datay.duration);
            };
            /**
             * @private
             *
             * @param tw
             */
            p.onTweenFinished = function (tw) {
                if (tw == this._ScrV_Props_._vScrollTween)
                    this._ScrV_Props_._isVTweenPlaying = false;
                if (tw == this._ScrV_Props_._hScrollTween)
                    this._ScrV_Props_._isHTweenPlaying = false;
                if (this._ScrV_Props_._isHTweenPlaying == false && this._ScrV_Props_._isVTweenPlaying == false) {
                    this._onScrollFinished();
                }
            };
            /**
             * @private
             *
             * @returns
             */
            p._onScrollStarted = function () {
            };
            /**
             * @private
             *
             * @returns
             */
            p._onScrollFinished = function () {
                gui.ScrollerTween.removeTweens(this);
                this._ScrV_Props_._hScrollTween = null;
                this._ScrV_Props_._vScrollTween = null;
                this._ScrV_Props_._isHTweenPlaying = false;
                this._ScrV_Props_._isVTweenPlaying = false;
                this.dispatchEvent(new egret.Event(egret.Event.COMPLETE));
            };
            /**
             * @language en_US
             * Set the scroll position above the distance
             * @param scrollTop Position above distance
             * @param duration Easing of time, in milliseconds
             * @returns Get tween vertical scrolling
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 设置滚动距离上方的位置
             * @param scrollTop 距离上方的位置
             * @param duration 缓动时间，毫秒单位
             * @returns 获取垂直滚动的tween
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.setScrollTop = function (scrollTop, duration) {
                if (duration === void 0) { duration = 0; }
                var finalPosition = Math.min(this.getMaxScrollTop(), Math.max(scrollTop, 0));
                if (duration == 0) {
                    this.scrollTop = finalPosition;
                    return;
                }
                if (this._ScrV_Props_._bounces == false)
                    scrollTop = finalPosition;
                var vtween = gui.ScrollerTween.get(this).to({ scrollTop: scrollTop }, duration, gui.ScrollerEase.quartOut);
                if (finalPosition != scrollTop) {
                    vtween.to({ scrollTop: finalPosition }, 300, gui.ScrollerEase.quintOut);
                }
                this._ScrV_Props_._isVTweenPlaying = true;
                this._ScrV_Props_._vScrollTween = vtween;
                vtween.call(this.onTweenFinished, this, [vtween]);
                if (!this._ScrV_Props_._isHTweenPlaying)
                    this._onScrollStarted();
            };
            /**
             * @language en_US
             * Set the scroll position from the left side
             * @param scrollLeft From the position on the left side
             * @param duration Get tween vertical scrolling
             * @returns Gets the horizontal scroll tween
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 设置滚动距离左侧的位置
             * @param scrollLeft 距离左侧的位置
             * @param duration 缓动时间，毫秒单位
             * @returns 获取水平滚动的tween
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.setScrollLeft = function (scrollLeft, duration) {
                if (duration === void 0) { duration = 0; }
                var finalPosition = Math.min(this.getMaxScrollLeft(), Math.max(scrollLeft, 0));
                if (duration == 0) {
                    this.scrollLeft = finalPosition;
                    return;
                }
                if (this._ScrV_Props_._bounces == false)
                    scrollLeft = finalPosition;
                var htween = gui.ScrollerTween.get(this).to({ scrollLeft: scrollLeft }, duration, gui.ScrollerEase.quartOut);
                if (finalPosition != scrollLeft) {
                    htween.to({ scrollLeft: finalPosition }, 300, gui.ScrollerEase.quintOut);
                }
                this._ScrV_Props_._isHTweenPlaying = true;
                this._ScrV_Props_._hScrollTween = htween;
                htween.call(this.onTweenFinished, this, [htween]);
                if (!this._ScrV_Props_._isVTweenPlaying)
                    this._onScrollStarted();
            };
            /**
             * @private
             *
             * @param pixelsPerMS
             * @param curPos
             * @param maxPos
             * @returns
             */
            p.getAnimationDatas = function (pixelsPerMS, curPos, maxPos) {
                var absPixelsPerMS = Math.abs(pixelsPerMS);
                var extraFricition = 0.95;
                var duration = 0;
                var friction = 0.998;
                var minVelocity = 0.02;
                var posTo = curPos + pixelsPerMS * 500;
                if (posTo < 0 || posTo > maxPos) {
                    posTo = curPos;
                    while (Math.abs(pixelsPerMS) != Infinity && Math.abs(pixelsPerMS) > minVelocity) {
                        posTo += pixelsPerMS;
                        if (posTo < 0 || posTo > maxPos) {
                            pixelsPerMS *= friction * extraFricition;
                        }
                        else {
                            pixelsPerMS *= friction;
                        }
                        duration++;
                    }
                }
                else {
                    duration = -Math.log(minVelocity / absPixelsPerMS) * 500;
                }
                var result = {
                    position: Math.min(maxPos + 50, Math.max(posTo, -50)),
                    duration: duration
                };
                return result;
            };
            /**
             * @private
             *
             * @param event
             * @returns
             */
            p.cloneTouchEvent = function (event) {
                var evt = new egret.TouchEvent(event.type, event.bubbles, event.cancelable);
                evt.touchPointID = event.touchPointID;
                evt.$stageX = event.stageX;
                evt.$stageY = event.stageY;
                //evt.ctrlKey = event.ctrlKey;
                //evt.altKey = event.altKey;
                //evt.shiftKey = event.shiftKey;
                evt.touchDown = event.touchDown;
                evt.$isDefaultPrevented = false;
                evt.$target = event.target;
                return evt;
            };
            /**
             * @private
             *
             * @returns
             */
            p.throwNotSupportedError = function () {
                egret.$error(1023);
            };
            /**
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.addChild = function (child) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             * @returns {DisplayObject}
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.addChildAt = function (child, index) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.removeChild = function (child) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * @deprecated
             * @param index {number}
             * @returns {DisplayObject}
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.removeChildAt = function (index) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.setChildIndex = function (child, index) {
                this.throwNotSupportedError();
            };
            /**
             * @deprecated
             * @param child1 {DisplayObject}
             * @param child2 {DisplayObject}
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.swapChildren = function (child1, child2) {
                this.throwNotSupportedError();
            };
            /**
             * @deprecated
             * @param index1 {number}
             * @param index2 {number}
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.swapChildrenAt = function (index1, index2) {
                this.throwNotSupportedError();
            };
            /**
             * @private
             */
            ScrollerView.weight = [1, 1.33, 1.66, 2, 2.33];
            return ScrollerView;
        })(egret.DisplayObjectContainer);
        gui.ScrollerView = ScrollerView;
        egret.registerClass(ScrollerView,"egret.gui.ScrollerView");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="scroller/ScrollerView.ts" />
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Scroller
         * @classdesc
         * 滚动条组件
         * @extends egret.gui.UIComponent
         * @implements egret.gui.IVisualElementContainer
         */
        var Scroller = (function (_super) {
            __extends(Scroller, _super);
            /**
             * 构造函数
             * @method egret.gui.Scroller#constructor
             */
            function Scroller() {
                _super.call(this);
                /**
                 * [SkinPart]水平滚动条
                 */
                this.horizontalScrollBar = null;
                /**
                 * [SkinPart]垂直滚动条
                 */
                this.verticalScrollBar = null;
                gui.ScrollerView.call(this);
                this._Scr_Props_ = new egret.gui.ScrollerProperties();
            }
            var d = __define,c=Scroller;p=c.prototype;
            p.setContent = function (content) {
                this._content = content;
                this._removeEvents();
                this._addEvents();
                this._ScrV_Props_._scrollLeft = content.horizontalScrollPosition;
                this._ScrV_Props_._scrollTop = content.verticalScrollPosition;
            };
            p._updateContentPosition = function () {
                var content = this._content;
                content.horizontalScrollPosition = this._ScrV_Props_._scrollLeft;
                content.verticalScrollPosition = this._ScrV_Props_._scrollTop;
                content.setLayoutBoundsSize(this._UIC_Props_._uiWidth, this._UIC_Props_._uiHeight);
                this.dispatchEvent(new egret.Event(egret.Event.CHANGE));
            };
            p.getMaxScrollLeft = function () {
                var content = this._content;
                var max = content.contentWidth - content.width;
                var min = content.initialized ? 0 : (content.horizontalScrollPosition || 0);
                return Math.max(max, min);
            };
            p.getMaxScrollTop = function () {
                var content = this._content;
                var max = content.contentHeight - content.height;
                var min = content.initialized ? 0 : (content.verticalScrollPosition || 0);
                return Math.max(max, min);
            };
            p._getContentWidth = function () {
                return this._content.contentWidth;
            };
            p._getContentHeight = function () {
                return this._content.contentHeight;
            };
            p._onScrollStarted = function () {
                gui.ScrollerView.prototype._onScrollStarted.call(this);
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CHANGE_START);
            };
            p._onScrollFinished = function () {
                gui.ScrollerView.prototype._onScrollFinished.call(this);
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CHANGE_END);
            };
            /**
             * 计算组件的默认大小和（可选）默认最小大小
             * @method egret.gui.Scroller#measure
             */
            p.measure = function () {
                if (!this._Scr_Props_._viewport)
                    return;
                this.measuredWidth = this._Scr_Props_._viewport.preferredWidth;
                this.measuredHeight = this._Scr_Props_._viewport.preferredHeight;
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                this.viewport && this.viewport.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
                this._checkScrollPolicy();
                if (this._ScrV_Props_._horizontalScrollPolicy != "off") {
                    var pos = this.viewport.horizontalScrollPosition;
                    var maxPos = this.getMaxScrollLeft();
                    var pos = Math.min(pos, maxPos);
                    this.setViewportHScrollPosition(pos);
                    var hbar = this.horizontalScrollBar;
                    if (hbar) {
                        hbar._setViewportMetric(unscaledWidth, this._Scr_Props_._viewport.contentWidth);
                        hbar.$setWidth(unscaledWidth - (hbar.left || 0) - (hbar.right || 0));
                        hbar.x = hbar.left || 0;
                        hbar.y = unscaledHeight - this.horizontalScrollBar.layoutBoundsHeight;
                        hbar.visible = this._ScrV_Props_._horizontalScrollPolicy == gui.ScrollPolicy.ON || this._ScrV_Props_._hCanScroll;
                        if (this._Scr_Props_._autoHideScrollBars)
                            hbar.alpha = 0;
                    }
                }
                if (this._ScrV_Props_._verticalScrollPolicy != "off") {
                    var pos = this.viewport.verticalScrollPosition;
                    var maxPos = this.getMaxScrollTop();
                    pos = Math.min(pos, maxPos);
                    this.setViewportVScrollPosition(pos);
                    var vbar = this.verticalScrollBar;
                    if (vbar) {
                        vbar._setViewportMetric(unscaledHeight, this._Scr_Props_._viewport.contentHeight);
                        vbar.$setHeight(unscaledHeight - (vbar.top || 0) - (vbar.bottom || 0));
                        vbar.y = vbar.top || 0;
                        vbar.x = unscaledWidth - this.verticalScrollBar.layoutBoundsWidth;
                        vbar.visible = this._ScrV_Props_._verticalScrollPolicy == gui.ScrollPolicy.ON || this._ScrV_Props_._vCanScroll;
                        if (this._Scr_Props_._autoHideScrollBars)
                            vbar.alpha = 0;
                    }
                }
            };
            d(p, "verticalScrollPolicy"
                /**
                 * 垂直滚动条显示策略，参见ScrollPolicy类定义的常量。
                 * @member egret.gui.Scroller#verticalScrollPolicy
                 */
                ,function () {
                    return this._ScrV_Props_._verticalScrollPolicy;
                }
                ,function (value) {
                    if (value == this._ScrV_Props_._verticalScrollPolicy)
                        return;
                    this._ScrV_Props_._verticalScrollPolicy = value;
                    this._checkVbar();
                    this.verticalScrollPolicy = value;
                }
            );
            d(p, "horizontalScrollPolicy"
                /**
                 * 水平滚动条显示策略，参见ScrollPolicy类定义的常量。
                 * @member egret.gui.Scroller#horizontalScrollPolicy
                 */
                ,function () {
                    return this._ScrV_Props_._horizontalScrollPolicy;
                }
                ,function (value) {
                    if (value == this._ScrV_Props_._horizontalScrollPolicy)
                        return;
                    this._ScrV_Props_._horizontalScrollPolicy = value;
                    this._checkHbar();
                    this.horizontalScrollPolicy = value;
                }
            );
            d(p, "viewport"
                /**
                 * 要滚动的视域组件。
                 * @member egret.gui.Scroller#viewport
                 */
                ,function () {
                    return this._Scr_Props_._viewport;
                }
                ,function (value) {
                    if (value == this._Scr_Props_._viewport)
                        return;
                    this.uninstallViewport();
                    this._Scr_Props_._viewport = value;
                    this.installViewport();
                    this.dispatchEventWith("viewportChanged");
                }
            );
            /**
             * 安装并初始化视域组件
             */
            p.installViewport = function () {
                var viewport = this.viewport;
                this.addEventListener(egret.Event.CHANGE, this._scrollerChangedHandler, this);
                if (this._createChildrenCalled && viewport) {
                    viewport.clipAndEnableScrolling = true;
                    this.setContent(viewport);
                    this._addToDisplayListAt(viewport, 0);
                    viewport.addEventListener(egret.gui.PropertyChangeEvent.PROPERTY_CHANGE, this._viewportChangedHandler, this);
                }
            };
            /**
             * 卸载视域组件
             */
            p.uninstallViewport = function () {
                if (this.viewport) {
                    this.viewport.clipAndEnableScrolling = false;
                    this.viewport.removeEventListener(egret.gui.PropertyChangeEvent.PROPERTY_CHANGE, this._viewportChangedHandler, this);
                    this._removeFromDisplayList(this.viewport);
                }
            };
            /**
             *
             * @param e
             * @private
             */
            p._viewportChangedHandler = function (e) {
                if (e.property == "horizontalScrollPosition")
                    this.setViewportHScrollPosition(this.viewport.horizontalScrollPosition);
                if (e.property == "verticalScrollPosition")
                    this.setViewportVScrollPosition(this.viewport.verticalScrollPosition);
                if (e.property == "contentWidth" || e.property == "contentHeight") {
                    this.invalidateDisplayList();
                    this.invalidateSize();
                }
            };
            /**
             *
             * @param e
             * @private
             */
            p._scrollerChangedHandler = function (e) {
                this.setViewportHScrollPosition(this.scrollLeft);
                this.setViewportVScrollPosition(this.scrollTop);
            };
            /**
             *
             * @param pos
             */
            p.setViewportVScrollPosition = function (pos) {
                if (this.scrollTop != pos)
                    this.scrollTop = pos;
                if (this.verticalScrollBar && this.verticalScrollBar.value != pos) {
                    this.verticalScrollBar.setPosition(pos);
                    this.hideOrShow(true);
                    this.setAutoHideTimer();
                }
            };
            p.setViewportHScrollPosition = function (pos) {
                if (this.scrollLeft != pos)
                    this.scrollLeft = pos;
                if (this.horizontalScrollBar && this.horizontalScrollBar.value != pos) {
                    this.horizontalScrollBar._setValue(pos);
                    this.hideOrShow(true);
                    this.setAutoHideTimer();
                }
            };
            /**
             * 缓动到水平滚动位置
             * @method egret.gui.Scroller#throwHorizontally
             * @param hspTo {number}
             * @param duration {number}
             */
            p.throwHorizontally = function (hspTo, duration) {
                if (duration === void 0) { duration = 500; }
                this.setScrollLeft(hspTo, duration);
            };
            /**
             * 缓动到垂直滚动位置
             * @method egret.gui.Scroller#throwVertically
             * @param vspTo {number}
             * @param duration {number}
             */
            p.throwVertically = function (vspTo, duration) {
                if (duration === void 0) { duration = 500; }
                this.setScrollTop(vspTo, duration);
            };
            d(p, "autoHideScrollBars"
                /**
                 * 是否自动隐藏滚动条
                 * @member egret.gui.Scroller#autoHideScrollBars
                 */
                ,function () {
                    return this._Scr_Props_._autoHideScrollBars;
                }
                ,function (value) {
                    if (this._Scr_Props_._autoHideScrollBars == value)
                        return;
                    this._Scr_Props_._autoHideScrollBars = value;
                    if (value)
                        this.setAutoHideTimer();
                    else
                        this.hideOrShow(true);
                }
            );
            d(p, "autoHideDelay"
                /**
                 * 自动隐藏滚动条延时时间(毫秒)，当autoHideScrollBars为true时有效
                 * @member egret.gui.Scroller#autoHideDelay
                 */
                ,function () {
                    return this._Scr_Props_._autoHideDelay;
                }
                ,function (value) {
                    if (this._Scr_Props_._autoHideDelay == value)
                        return;
                    this._Scr_Props_._autoHideDelay = value;
                }
            );
            p.setAutoHideTimer = function () {
                if (!this._Scr_Props_._autoHideScrollBars || !this.initialized)
                    return;
                if (!this.horizontalScrollBar && !this.verticalScrollBar)
                    return;
                if (this._Scr_Props_._autoHideTimer != NaN) {
                    egret.gui.$clearTimer(this._Scr_Props_._autoHideTimer);
                }
                this._Scr_Props_._autoHideTimer = egret.gui.$addTimer(this.hideOrShow.bind(this, false), this, this._Scr_Props_._autoHideDelay);
            };
            p.hideOrShow = function (show) {
                var _this = this;
                if (!this.initialized || (!this.horizontalScrollBar && !this.verticalScrollBar))
                    return;
                if (this._Scr_Props_._autoHideShowAnimat == null) {
                    this._Scr_Props_._autoHideShowAnimat = new gui.Animation(function (b) {
                        var a = b.currentValue["alpha"];
                        if (_this.horizontalScrollBar)
                            _this.horizontalScrollBar.alpha = a;
                        if (_this.verticalScrollBar)
                            _this.verticalScrollBar.alpha = a;
                    }, this);
                }
                else {
                    if (this._Scr_Props_._animatTargetIsShow == show)
                        return;
                    this._Scr_Props_._autoHideShowAnimat.isPlaying && this._Scr_Props_._autoHideShowAnimat.stop();
                }
                this._Scr_Props_._animatTargetIsShow = show;
                var animat = this._Scr_Props_._autoHideShowAnimat;
                animat.motionPaths = [
                    new gui.SimpleMotionPath("alpha", show ? 0 : 1, show ? 1 : 0)
                ];
                animat.duration = show ? 100 : 300;
                animat.play();
            };
            d(p, "numElements"
                /**
                 * @member egret.gui.Scroller#numElements
                 */
                ,function () {
                    return this.viewport ? 1 : 0;
                }
            );
            /**
             * 抛出索引越界异常
             */
            p.throwRangeError = function (index) {
                egret.$error(3011, index);
            };
            /**
             * 如果存在视域，且传入的索引为 0，则返回该视域
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.getElementAt = function (index) {
                if (this.viewport && index == 0)
                    return this.viewport;
                else
                    this.throwRangeError(index);
                return null;
            };
            /**
             * 如果传入的元素是视域，则返回 0
             * @param element {IVisualElement}
             * @returns {number}
             */
            p.getElementIndex = function (element) {
                if (element != null && element == this.viewport)
                    return 0;
                else
                    return -1;
            };
            /**
             * 确定指定显示对象是 DisplayObjectContainer 实例的子项还是该实例本身
             * @param element {IVisualElement}
             * @returns {boolean}
             */
            p.containsElement = function (element) {
                if (element != null && element == this.viewport)
                    return true;
                return false;
            };
            p.throwNotSupportedError = function () {
                egret.$error(3012);
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.addElement = function (element) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param element {IVisualElement}
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.addElementAt = function (element, index) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.removeElement = function (element) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.removeElementAt = function (index) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             */
            p.removeAllElements = function () {
                this.throwNotSupportedError();
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param element {IVisualElement}
             * @param index {number}
             */
            p.setElementIndex = function (element, index) {
                this.throwNotSupportedError();
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param element1 {IVisualElement}
             * @param element2 {IVisualElement}
             */
            p.swapElements = function (element1, element2) {
                this.throwNotSupportedError();
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param index1 {number}
             * @param index2 {number}
             */
            p.swapElementsAt = function (index1, index2) {
                this.throwNotSupportedError();
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.addChild = function (child) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.addChildAt = function (child, index) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.removeChild = function (child) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.removeChildAt = function (index) {
                this.throwNotSupportedError();
                return null;
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             */
            p.setChildIndex = function (child, index) {
                this.throwNotSupportedError();
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param child1 {DisplayObject}
             * @param child2 {DisplayObject}
             */
            p.swapChildren = function (child1, child2) {
                this.throwNotSupportedError();
            };
            /**
             * Scroller 不支持该操作
             * @deprecated
             * @param index1 {number}
             * @param index2 {number}
             */
            p.swapChildrenAt = function (index1, index2) {
                this.throwNotSupportedError();
            };
            /**
             *
             * @private
             */
            p._checkHbar = function () {
                if (this._ScrV_Props_._horizontalScrollPolicy == "off") {
                    this._uninstallHorizontalScrollBar();
                    return;
                }
                if (!this.horizontalScrollBar)
                    return;
                var bar = this.horizontalScrollBar;
                bar.addEventListener(egret.Event.CHANGE, this.hBarChanged, this, false);
                bar._setViewportMetric(this._Scr_Props_._viewport.width, this._Scr_Props_._viewport.contentWidth);
                if (bar.owner && "removeElement" in bar.owner) {
                    bar.owner.removeElement(bar);
                }
                this._addToDisplayList(this.horizontalScrollBar);
            };
            /**
             *
             * @private
             */
            p._checkVbar = function () {
                if (this._ScrV_Props_._verticalScrollPolicy == "off") {
                    this._uninstallVerticalScrollBar();
                    return;
                }
                if (!this.verticalScrollBar)
                    return;
                if (this.verticalScrollBar.owner == this)
                    return;
                var vbar = this.verticalScrollBar;
                vbar.addEventListener(egret.Event.CHANGE, this.vBarChanged, this, false);
                vbar._setViewportMetric(this._Scr_Props_._viewport.height, this._Scr_Props_._viewport.contentHeight);
                if (vbar.owner && "removeElement" in vbar.owner) {
                    vbar.owner.removeElement(vbar);
                }
                this._addToDisplayList(this.verticalScrollBar);
            };
            /**
             * 创建容器的子元素
             */
            p.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.installViewport();
            };
            /**
             * 若皮肤是ISkin,则调用此方法附加皮肤中的公共部件
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.horizontalScrollBar) {
                    this._checkHbar();
                }
                if (instance == this.verticalScrollBar) {
                    this._checkVbar();
                }
            };
            /**
             * 若皮肤是ISkin，则调用此方法卸载皮肤之前注入的公共部件
             * @method egret.gui.Scroller#partRemoved
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                _super.prototype.partRemoved.call(this, partName, instance);
                if (this.horizontalScrollBar == instance) {
                    if (this.horizontalScrollBar.parent == this)
                        this._uninstallHorizontalScrollBar();
                    this.horizontalScrollBar = null;
                }
                if (this.verticalScrollBar == instance) {
                    if (this.verticalScrollBar.parent == this)
                        this._uninstallVerticalScrollBar();
                    this.verticalScrollBar = null;
                }
            };
            p._uninstallHorizontalScrollBar = function () {
                if (this.horizontalScrollBar == null)
                    return;
                this._removeFromDisplayList(this.horizontalScrollBar);
                this.horizontalScrollBar.removeEventListener(egret.Event.CHANGE, this.hBarChanged, this, false);
            };
            p._uninstallVerticalScrollBar = function () {
                if (this.verticalScrollBar == null)
                    return;
                this._removeFromDisplayList(this.verticalScrollBar);
                this.verticalScrollBar.removeEventListener(egret.Event.CHANGE, this.vBarChanged, this, false);
            };
            p.hBarChanged = function (e) {
                this.setViewportHScrollPosition(this.horizontalScrollBar._getValue());
            };
            p.vBarChanged = function (e) {
                this.setViewportVScrollPosition(this.verticalScrollBar.getPosition());
            };
            return Scroller;
        })(gui.SkinnableComponent);
        gui.Scroller = Scroller;
        egret.registerClass(Scroller,"egret.gui.Scroller",["egret.gui.IVisualElementContainer","egret.gui.IVisualElement","egret.gui.ILayoutElement","egret.IEventDispatcher","egret.gui.IContainer"]);
        for (var p in gui.ScrollerView.prototype) {
            //跳过Scroller，SkinnableComponent，UIComponent 重写的方法
            if (gui.ScrollerView.prototype.hasOwnProperty(p) && !Scroller.prototype.hasOwnProperty(p) && !gui.SkinnableComponent.prototype.hasOwnProperty(p) && !gui.UIComponent.prototype.hasOwnProperty(p)) {
                var desc = Object.getOwnPropertyDescriptor(gui.ScrollerView.prototype, p);
                if (desc && (desc.get || desc.set))
                    Object.defineProperty(Scroller.prototype, p, desc);
                else
                    Scroller.prototype[p] = gui.ScrollerView.prototype[p];
            }
        }
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @private
         */
        var ScrollerProperties = (function () {
            function ScrollerProperties() {
                this._viewport = null;
                this._autoHideScrollBars = true;
                this._autoHideTimer = NaN;
                this._autoHideDelay = 300;
                this._autoHideShowAnimat = null;
                this._animatTargetIsShow = false;
            }
            var d = __define,c=ScrollerProperties;p=c.prototype;
            return ScrollerProperties;
        })();
        gui.ScrollerProperties = ScrollerProperties;
        egret.registerClass(ScrollerProperties,"egret.gui.ScrollerProperties");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Spacer
         * @classdesc
         * 占位组件,一个布局辅助类。
         * 自身完全不可见，但可以在父级容器的布局中分配空间，通常用于垂直和水平布局中，推挤其他组件。
         * @extends egret.gui.UIComponent
         */
        var Spacer = (function (_super) {
            __extends(Spacer, _super);
            /**
             * 构造函数
             * @method egret.gui.Spacer#constructor
             */
            function Spacer() {
                _super.call(this);
            }
            var d = __define,c=Spacer;p=c.prototype;
            return Spacer;
        })(gui.UIComponent);
        gui.Spacer = Spacer;
        egret.registerClass(Spacer,"egret.gui.Spacer");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TabBar
         * @classdesc
         * 选项卡组件
         * @extends egret.gui.ListBase
         */
        var TabBar = (function (_super) {
            __extends(TabBar, _super);
            /**
             * 构造函数
             * @method egret.gui.TabBar#constructor
             */
            function TabBar() {
                _super.call(this);
                /**
                 * requireSelection改变标志
                 */
                this.requireSelectionChanged_tabBar = false;
                this.requireSelection = true;
            }
            var d = __define,c=TabBar;p=c.prototype;
            /**
             * 创建容器的子元素
             */
            p.createChildren = function () {
                gui.ListBase.prototype.createChildren.call(this);
            };
            d(p, "requireSelection"
                ,function () {
                    return this._requireSelection;
                }
                /**
                 * @method egret.gui.TabBar#requireSelection
                 * @param value {boolean}
                 */
                ,function (value) {
                    if (value == this._requireSelection)
                        return;
                    _super.prototype._setRequireSelection.call(this, value);
                    this.requireSelectionChanged_tabBar = true;
                    this.invalidateProperties();
                }
            );
            /**
             * @inheritDoc
             */
            p._setDataProvider = function (value) {
                if (this.dataProvider instanceof gui.ViewStack) {
                    this.dataProvider.removeEventListener("IndexChanged", this.onViewStackIndexChange, this);
                    this.removeEventListener(gui.IndexChangeEvent.CHANGE, this.onIndexChanged, this);
                }
                if (value instanceof gui.ViewStack) {
                    value.addEventListener("IndexChanged", this.onViewStackIndexChange, this);
                    this.addEventListener(gui.IndexChangeEvent.CHANGE, this.onIndexChanged, this);
                }
                _super.prototype._setDataProvider.call(this, value);
            };
            /**
             * 鼠标点击的选中项改变
             */
            p.onIndexChanged = function (event) {
                (this.dataProvider)._setSelectedIndex(event.newIndex, false);
            };
            /**
             * ViewStack选中项发生改变
             */
            p.onViewStackIndexChange = function (event) {
                this._setSelectedIndex((this.dataProvider).selectedIndex, false);
            };
            /**
             * 处理对组件设置的属性
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.requireSelectionChanged_tabBar && this.dataGroup) {
                    this.requireSelectionChanged_tabBar = false;
                    var n = this.dataGroup.numElements;
                    for (var i = 0; i < n; i++) {
                        var renderer = (this.dataGroup.getElementAt(i));
                        if (renderer)
                            renderer.allowDeselection = !this.requireSelection;
                    }
                }
            };
            p.dataGroup_rendererAddHandler = function (event) {
                _super.prototype.dataGroup_rendererAddHandler.call(this, event);
                if (event.renderer == null)
                    return;
                if (event.renderer instanceof gui.TabBarButton)
                    event.renderer.allowDeselection = !this.requireSelection;
            };
            /**
             * 鼠标在项呈示器上弹起，抛出ItemClick事件。
             */
            p._item_touchEndHandler = function (event) {
                var itemRenderer = (event.currentTarget);
                if (itemRenderer != this._mouseDownItemRenderer)
                    return;
                var newIndex;
                if (itemRenderer)
                    newIndex = itemRenderer.itemIndex;
                else
                    newIndex = this.dataGroup.getElementIndex((event.currentTarget));
                if (newIndex == this.selectedIndex) {
                    if (!this.requireSelection)
                        this._setSelectedIndex(gui.ListBase.NO_SELECTION, true);
                }
                else
                    this._setSelectedIndex(newIndex, true);
                if (!this._captureItemRenderer)
                    return;
                this._dispatchListEvent(event, gui.ListEvent.ITEM_CLICK, itemRenderer);
            };
            return TabBar;
        })(gui.List);
        gui.TabBar = TabBar;
        egret.registerClass(TabBar,"egret.gui.TabBar");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TabBarButton
         * @classdesc
         * 选项卡组件的按钮条目
         * @extends egret.gui.ToggleButtonBase
         * @implements egret.gui.IItemRenderer
         */
        var TabBarButton = (function (_super) {
            __extends(TabBarButton, _super);
            function TabBarButton() {
                _super.call(this);
                this._allowDeselection = true;
                this._data = null;
                this._itemIndex = NaN;
            }
            var d = __define,c=TabBarButton;p=c.prototype;
            d(p, "allowDeselection"
                /**
                 * 如果为 true，用户单击当前选定的按钮时即会将其取消选择。
                 * 如果为 false，用户必须选择不同的按钮才可取消选择当前选定的按钮。
                 * @member egret.gui.TabBarButton#allowDeselection
                 */
                ,function () {
                    return this._allowDeselection;
                }
                ,function (value) {
                    this._allowDeselection = value;
                }
            );
            d(p, "data"
                /**
                 * @member egret.gui.TabBarButton#data
                 */
                ,function () {
                    return this._data;
                }
                ,function (value) {
                    this._data = value;
                    this.dispatchEventWith("dataChange");
                }
            );
            d(p, "itemIndex"
                /**
                 * @member egret.gui.TabBarButton#itemIndex
                 */
                ,function () {
                    return this._itemIndex;
                }
                ,function (value) {
                    this._itemIndex = value;
                }
            );
            /**
             * @inheritDoc
             */
            p._setLabel = function (value) {
                if (value != this._getLabel()) {
                    _super.prototype._setLabel.call(this, value);
                    if (this.labelDisplay)
                        this.labelDisplay.text = this._getLabel();
                }
            };
            p.buttonReleased = function () {
                if (this.selected && !this.allowDeselection)
                    return;
                _super.prototype.buttonReleased.call(this);
            };
            return TabBarButton;
        })(gui.ToggleButtonBase);
        gui.TabBarButton = TabBarButton;
        egret.registerClass(TabBarButton,"egret.gui.TabBarButton",["egret.gui.IItemRenderer","egret.gui.ILayoutElement","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        var SkinnableTextBase = (function (_super) {
            __extends(SkinnableTextBase, _super);
            /**
             * 构造函数
             */
            function SkinnableTextBase() {
                _super.call(this);
                this._focusEnabled = true;
                this.isFocus = false;
                /**
                 * [SkinPart]实体文本输入组件
                 */
                this.textDisplay = null;
                /**
                 * textDisplay改变时传递的参数
                 */
                this.textDisplayProperties = {};
                /**
                 * [SkinPart]当text属性为空字符串时要显示的文本。
                 */
                this.promptDisplay = null;
                this._prompt = null;
                this.focusEnabled = true;
            }
            var d = __define,c=SkinnableTextBase;p=c.prototype;
            d(p, "focusEnabled"
                /**
                 * 是否能够自动获得焦点的标志
                 */
                ,function () {
                    return this._focusEnabled;
                }
                ,function (value) {
                    this._focusEnabled = value;
                }
            );
            /**
             * 焦点移入
             */
            p.focusInHandler = function (event) {
                this.isFocus = true;
                if (event.target == this) {
                    this.setFocus();
                    return;
                }
                this.invalidateSkinState();
            };
            /**
             * 焦点移出
             */
            p.focusOutHandler = function (event) {
                this.isFocus = false;
                if (event.target == this)
                    return;
                this.invalidateSkinState();
            };
            d(p, "prompt"
                /**
                 * 当text属性为空字符串时要显示的文本内容。 <p/>
                 * 先创建文本控件时将显示提示文本。控件获得焦点时或控件的 text 属性为非空字符串时，提示文本将消失。
                 * 控件失去焦点时提示文本将重新显示，但仅当未输入文本时（如果文本字段的值为空字符串）。<p/>
                 * 对于文本控件，如果用户输入文本，但随后又将其删除，则控件失去焦点后，提示文本将重新显示。
                 * 您还可以通过编程方式将文本控件的 text 属性设置为空字符串使提示文本重新显示。
                 */
                ,function () {
                    return this._prompt;
                }
                ,function (value) {
                    if (this._prompt == value)
                        return;
                    this._prompt = value;
                    if (this.promptDisplay) {
                        this.promptDisplay.text = value;
                    }
                    this.invalidateProperties();
                    this.invalidateSkinState();
                }
            );
            d(p, "maxWidth"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    if (this.textDisplay)
                        return this.textDisplay.maxWidth;
                    var v = this.textDisplayProperties.maxWidth;
                    return (v === undefined) ? _super.prototype._getMaxWidth.call(this) : v;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (this.textDisplay) {
                        this.textDisplay.maxWidth = value;
                        this.textDisplayProperties.maxWidth = true;
                    }
                    else {
                        this.textDisplayProperties.maxWidth = value;
                    }
                    this.invalidateProperties();
                }
            );
            d(p, "textColor"
                /**
                 * 文本颜色。
                 */
                ,function () {
                    if (this.textDisplay)
                        return this.textDisplay.textColor;
                    var v = this.textDisplayProperties.textColor;
                    return (v === undefined) ? 0 : v;
                }
                ,function (value) {
                    if (this.textDisplay) {
                        this.textDisplay.textColor = value;
                        this.textDisplayProperties.textColor = true;
                    }
                    else {
                        this.textDisplayProperties.textColor = value;
                    }
                    //触发一次UPDATE_COMPLETE事件.
                    this.invalidateProperties();
                }
            );
            d(p, "displayAsPassword"
                /**
                 * 指定文本字段是否是密码文本字段。如果此属性的值为 true，则文本字段被视为密码文本字段，并使用星号而不是实际字符来隐藏输入的字符。
                 * 如果为 false，则不会将文本字段视为密码文本字段。启用密码模式时，“剪切”和“复制”命令及其对应的键盘快捷键将不起作用。
                 * 此安全机制可防止不良用户使用快捷键在无人看管的计算机上破译密码。
                 */
                ,function () {
                    if (this.textDisplay)
                        return this.textDisplay.displayAsPassword;
                    var v = this.textDisplayProperties.displayAsPassword;
                    return (v === undefined) ? false : v;
                }
                ,function (value) {
                    if (this.textDisplay) {
                        this.textDisplay.displayAsPassword = value;
                        this.textDisplayProperties.displayAsPassword = true;
                    }
                    else {
                        this.textDisplayProperties.displayAsPassword = value;
                    }
                    this.invalidateProperties();
                }
            );
            d(p, "editable"
                /**
                 * 文本是否可编辑的标志。
                 */
                ,function () {
                    if (this.textDisplay)
                        return this.textDisplay.editable;
                    var v = this.textDisplayProperties.editable;
                    return (v === undefined) ? true : v;
                }
                ,function (value) {
                    if (this.textDisplay) {
                        this.textDisplay.editable = value;
                        this.textDisplayProperties.editable = true;
                    }
                    else {
                        this.textDisplayProperties.editable = value;
                    }
                    this.invalidateProperties();
                }
            );
            d(p, "maxChars"
                /**
                 * 文本字段中最多可包含的字符数（即用户输入的字符数）。脚本可以插入比 maxChars 允许的字符数更多的文本；
                 * maxChars 属性仅表示用户可以输入多少文本。如果此属性的值为 0，则用户可以输入无限数量的文本。
                 */
                ,function () {
                    if (this.textDisplay)
                        return this.textDisplay.maxChars;
                    var v = this.textDisplayProperties.maxChars;
                    return (v === undefined) ? 0 : v;
                }
                ,function (value) {
                    if (this.textDisplay) {
                        this.textDisplay.maxChars = value;
                        this.textDisplayProperties.maxChars = true;
                    }
                    else {
                        this.textDisplayProperties.maxChars = value;
                    }
                    this.invalidateProperties();
                }
            );
            d(p, "restrict"
                /**
                 * 表示用户可输入到文本字段中的字符集。如果 restrict 属性的值为 null，则可以输入任何字符。
                 * 如果 restrict 属性的值为空字符串，则不能输入任何字符。如果 restrict 属性的值为一串字符，
                 * 则只能在文本字段中输入该字符串中的字符。从左向右扫描该字符串。可以使用连字符 (-) 指定一个范围。
                 * 只限制用户交互；脚本可将任何文本放入文本字段中。此属性不与属性检查器中的“嵌入字体”选项同步。<p/>
                 * 如果字符串以尖号 (ˆ) 开头，则先接受所有字符，然后从接受字符集中排除字符串中 ˆ 之后的字符。
                 * 如果字符串不以尖号 (ˆ) 开头，则最初不接受任何字符，然后将字符串中的字符包括在接受字符集中。
                 */
                ,function () {
                    if (this.textDisplay)
                        return this.textDisplay.restrict;
                    var v = this.textDisplayProperties.restrict;
                    return (v === undefined) ? null : v;
                }
                ,function (value) {
                    if (this.textDisplay) {
                        this.textDisplay.restrict = value;
                        this.textDisplayProperties.restrict = true;
                    }
                    else {
                        this.textDisplayProperties.restrict = value;
                    }
                    this.invalidateProperties();
                }
            );
            d(p, "selectable"
                /**
                 * 一个布尔值，表示文本字段是否可选。值 true 表示文本可选。selectable 属性控制文本字段是否可选，
                 * 而不控制文本字段是否可编辑。动态文本字段即使不可编辑，它也可能是可选的。如果动态文本字段是不可选的，
                 * 则用户不能选择其中的文本。 <p/>
                 * 如果 selectable 设置为 false，则文本字段中的文本不响应来自鼠标或键盘的选择命令，
                 * 并且不能使用“复制”命令复制文本。如果 selectable 设置为 true，则可以使用鼠标或键盘选择文本字段中的文本，
                 * 并且可以使用“复制”命令复制文本。即使文本字段是动态文本字段而不是输入文本字段，您也可以用这种方式选择文本。
                 */
                ,function () {
                    if (this.textDisplay)
                        return this.textDisplay.selectable;
                    var v = this.textDisplayProperties.selectable;
                    return (v === undefined) ? true : v;
                }
                ,function (value) {
                    if (this.textDisplay) {
                        this.textDisplay.selectable = value;
                        this.textDisplayProperties.selectable = true;
                    }
                    else {
                        this.textDisplayProperties.selectable = value;
                    }
                    this.invalidateProperties();
                }
            );
            d(p, "selectionBeginIndex"
                /**
                 * 当前所选内容中第一个字符从零开始的字符索引值。例如，第一个字符的索引值是 0，
                 * 第二个字符的索引值是 1，依此类推。如果未选定任何文本，此属性为 caretIndex 的值
                 */
                ,function () {
                    if (this.textDisplay)
                        return this.textDisplay.selectionBeginIndex;
                    if (this.textDisplayProperties.selectionBeginIndex === undefined)
                        return -1;
                    return this.textDisplayProperties.selectionBeginIndex;
                }
            );
            d(p, "selectionEndIndex"
                /**
                 * 当前所选内容中最后一个字符从零开始的字符索引值。例如，第一个字符的索引值是 0，第二个字符的索引值是 1，
                 * 依此类推。如果未选定任何文本，此属性为 caretIndex 的值。
                 */
                ,function () {
                    if (this.textDisplay)
                        return this.textDisplay.selectionEndIndex;
                    if (this.textDisplayProperties.selectionEndIndex === undefined)
                        return -1;
                    return this.textDisplayProperties.selectionEndIndex;
                }
            );
            d(p, "caretIndex"
                /**
                 * 插入点（尖号）位置的索引。如果没有显示任何插入点，则在将焦点恢复到字段时，
                 * 值将为插入点所在的位置（通常为插入点上次所在的位置，如果字段不曾具有焦点，则为 0）。
                 */
                ,function () {
                    return this.textDisplay ? this.textDisplay.caretIndex : 0;
                }
            );
            /**
             * 将第一个字符和最后一个字符的索引值（使用 beginIndex 和 endIndex 参数指定）指定的文本设置为所选内容。
             * 如果两个参数值相同，则此方法会设置插入点，就如同设置 caretIndex 属性一样。
             */
            p.setSelection = function (beginIndex, endIndex) {
                if (endIndex === void 0) { endIndex = 0; }
                if (this.textDisplay) {
                    this.textDisplay.setSelection(beginIndex, endIndex);
                }
                else {
                    this.textDisplayProperties.selectionBeginIndex = beginIndex;
                    this.textDisplayProperties.selectionEndIndex = endIndex;
                }
            };
            /**
             * 选中所有文本。
             */
            p.selectAll = function () {
                if (this.textDisplay) {
                    this.textDisplay.selectAll();
                }
                else if (this.textDisplayProperties.text !== undefined) {
                    this.setSelection(0, this.textDisplayProperties.text.length - 1);
                }
            };
            d(p, "text"
                /**
                 * 此文本组件所显示的文本。
                 */
                ,function () {
                    return this._getText();
                }
                ,function (value) {
                    this._setText(value);
                }
            );
            p._getText = function () {
                if (this.textDisplay)
                    return this.textDisplay.text;
                var v = this.textDisplayProperties.text;
                return (v === undefined) ? "" : v;
            };
            p._setText = function (value) {
                if (this.textDisplay) {
                    this.textDisplay.text = value;
                    this.textDisplayProperties.text = true;
                }
                else {
                    this.textDisplayProperties.text = value;
                    this.textDisplayProperties.selectionBeginIndex = 0;
                    this.textDisplayProperties.selectionEndIndex = 0;
                }
                this.invalidateProperties();
                this.invalidateSkinState();
            };
            p._getWidthInChars = function () {
                var richEditableText = (this.textDisplay);
                if (richEditableText)
                    return richEditableText.widthInChars;
                var v = this.textDisplay ? undefined : this.textDisplayProperties.widthInChars;
                return (v === undefined) ? NaN : v;
            };
            p._setWidthInChars = function (value) {
                if (this.textDisplay) {
                    var richEditableText = (this.textDisplay);
                    if (richEditableText)
                        richEditableText.widthInChars = value;
                    this.textDisplayProperties.widthInChars = true;
                }
                else {
                    this.textDisplayProperties.widthInChars = value;
                }
                this.invalidateProperties();
            };
            p._getHeightInLines = function () {
                var richEditableText = (this.textDisplay);
                if (richEditableText)
                    return richEditableText.heightInLines;
                var v = this.textDisplay ? undefined : this.textDisplayProperties.heightInLines;
                return (v === undefined) ? NaN : v;
            };
            p._setHeightInLines = function (value) {
                if (this.textDisplay) {
                    var richEditableText = (this.textDisplay);
                    if (richEditableText)
                        richEditableText.heightInLines = value;
                    this.textDisplayProperties.heightInLines = true;
                }
                else {
                    this.textDisplayProperties.heightInLines = value;
                }
                this.invalidateProperties();
            };
            /**
             * 返回要应用到外观的状态的名称
             * @inheritDoc
             */
            p.getCurrentSkinState = function () {
                var skin = this.skin;
                if (this._prompt && !this.isFocus && this.text == "") {
                    if (this.enabled && skin.hasState("normalWithPrompt"))
                        return "normalWithPrompt";
                    if (!this.enabled && skin.hasState("disabledWithPrompt"))
                        return "disabledWithPrompt";
                }
                return _super.prototype.getCurrentSkinState.call(this);
            };
            /**
             * 添加外观部件时调用
             * @inheritDoc
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.textDisplay) {
                    this.textDisplayAdded();
                    if (this.textDisplay instanceof gui.EditableText) {
                        this.textDisplay._textField.addEventListener(egret.FocusEvent.FOCUS_IN, this.focusInHandler, this);
                        this.textDisplay._textField.addEventListener(egret.FocusEvent.FOCUS_OUT, this.focusOutHandler, this);
                    }
                    this.textDisplay.addEventListener("input", this.textDisplay_changingHandler, this);
                    this.textDisplay.addEventListener(egret.Event.CHANGE, this.textDisplay_changeHandler, this);
                }
                else if (instance == this.promptDisplay) {
                    this.promptDisplay.text = this._prompt;
                }
            };
            /**
             * 正删除外观部件的实例时调用
             * @inheritDoc
             */
            p.partRemoved = function (partName, instance) {
                _super.prototype.partRemoved.call(this, partName, instance);
                if (instance == this.textDisplay) {
                    this.textDisplayRemoved();
                    if (this.textDisplay instanceof gui.EditableText) {
                        this.textDisplay._textField.removeEventListener(egret.FocusEvent.FOCUS_IN, this.focusInHandler, this);
                        this.textDisplay._textField.removeEventListener(egret.FocusEvent.FOCUS_OUT, this.focusOutHandler, this);
                    }
                    this.textDisplay.removeEventListener("input", this.textDisplay_changingHandler, this);
                    this.textDisplay.removeEventListener(egret.Event.CHANGE, this.textDisplay_changeHandler, this);
                }
            };
            /**
             * 设置此组件的焦点
             * @inheritDoc
             */
            p.setFocus = function () {
                if (this._focusEnabled == false)
                    return;
                if (this.textDisplay)
                    this.textDisplay.setFocus();
                //else
                //	super.setFocus();
            };
            /**
             * 当皮肤不为ISkinPartHost时，创建TextDisplay显示对象
             */
            p._createTextDisplay = function () {
            };
            /**
             * @inheritDoc
             */
            p._removeSkinParts = function () {
                if (!this.textDisplay)
                    return;
                this.partRemoved("textDisplay", this.textDisplay);
                this._removeFromDisplayList((this.textDisplay));
                this.textDisplay = null;
            };
            /**
             * textDisplay附加
             */
            p.textDisplayAdded = function () {
                var newTextDisplayProperties = {};
                var richEditableText = (this.textDisplay);
                if (this.textDisplayProperties.displayAsPassword !== undefined) {
                    this.textDisplay.displayAsPassword = this.textDisplayProperties.displayAsPassword;
                    newTextDisplayProperties.displayAsPassword = true;
                }
                if (this.textDisplayProperties.textColor !== undefined) {
                    this.textDisplay.textColor = this.textDisplayProperties.textColor;
                    newTextDisplayProperties.textColor = true;
                }
                if (this.textDisplayProperties.editable !== undefined) {
                    this.textDisplay.editable = this.textDisplayProperties.editable;
                    newTextDisplayProperties.editable = true;
                }
                if (this.textDisplayProperties.maxChars !== undefined) {
                    this.textDisplay.maxChars = this.textDisplayProperties.maxChars;
                    newTextDisplayProperties.maxChars = true;
                }
                if (this.textDisplayProperties.maxHeight !== undefined) {
                    this.textDisplay.maxHeight = this.textDisplayProperties.maxHeight;
                    newTextDisplayProperties.maxHeight = true;
                }
                if (this.textDisplayProperties.maxWidth !== undefined) {
                    this.textDisplay.maxWidth = this.textDisplayProperties.maxWidth;
                    newTextDisplayProperties.maxWidth = true;
                }
                if (this.textDisplayProperties.restrict !== undefined) {
                    this.textDisplay.restrict = this.textDisplayProperties.restrict;
                    newTextDisplayProperties.restrict = true;
                }
                if (this.textDisplayProperties.selectable !== undefined) {
                    this.textDisplay.selectable = this.textDisplayProperties.selectable;
                    newTextDisplayProperties.selectable = true;
                }
                if (this.textDisplayProperties.text !== undefined) {
                    this.textDisplay.text = this.textDisplayProperties.text;
                    newTextDisplayProperties.text = true;
                }
                if (this.textDisplayProperties.selectionBeginIndex !== undefined) {
                    this.textDisplay.setSelection(this.textDisplayProperties.selectionBeginIndex, this.textDisplayProperties.selectionEndIndex);
                }
                if (this.textDisplayProperties.widthInChars !== undefined && richEditableText) {
                    richEditableText.widthInChars = this.textDisplayProperties.widthInChars;
                    newTextDisplayProperties.widthInChars = true;
                }
                if (this.textDisplayProperties.heightInLines !== undefined && richEditableText) {
                    richEditableText.heightInLines = this.textDisplayProperties.heightInLines;
                    newTextDisplayProperties.heightInLines = true;
                }
                this.textDisplayProperties = newTextDisplayProperties;
            };
            /**
             * textDisplay移除
             */
            p.textDisplayRemoved = function () {
                var newTextDisplayProperties = {};
                var richEditableText = (this.textDisplay);
                if (this.textDisplayProperties.displayAsPassword) {
                    newTextDisplayProperties.displayAsPassword = this.textDisplay.displayAsPassword;
                }
                if (this.textDisplayProperties.textColor) {
                    newTextDisplayProperties.textColor = this.textDisplay.textColor;
                }
                if (this.textDisplayProperties.editable) {
                    newTextDisplayProperties.editable = this.textDisplay.editable;
                }
                if (this.textDisplayProperties.maxChars) {
                    newTextDisplayProperties.maxChars = this.textDisplay.maxChars;
                }
                if (this.textDisplayProperties.maxHeight) {
                    newTextDisplayProperties.maxHeight = this.textDisplay.maxHeight;
                }
                if (this.textDisplayProperties.maxWidth) {
                    newTextDisplayProperties.maxWidth = this.textDisplay.maxWidth;
                }
                if (this.textDisplayProperties.restrict) {
                    newTextDisplayProperties.restrict = this.textDisplay.restrict;
                }
                if (this.textDisplayProperties.selectable) {
                    newTextDisplayProperties.selectable = this.textDisplay.selectable;
                }
                if (this.textDisplayProperties.text) {
                    newTextDisplayProperties.text = this.textDisplay.text;
                }
                if (this.textDisplayProperties.heightInLines && richEditableText) {
                    newTextDisplayProperties.heightInLines = richEditableText.heightInLines;
                }
                if (this.textDisplayProperties.widthInChars && richEditableText) {
                    newTextDisplayProperties.widthInChars = richEditableText.widthInChars;
                }
                this.textDisplayProperties = newTextDisplayProperties;
            };
            /**
             * textDisplay文字改变事件
             */
            p.textDisplay_changeHandler = function (event) {
                this.invalidateDisplayList();
                this.dispatchEvent(event);
            };
            /**
             * textDisplay文字即将改变事件
             */
            p.textDisplay_changingHandler = function (event) {
                var newEvent = new egret.Event(event.type, false, true);
                newEvent.data = event.data;
                this.dispatchEvent(newEvent);
                if (newEvent.isDefaultPrevented())
                    event.preventDefault();
            };
            return SkinnableTextBase;
        })(gui.SkinnableComponent);
        gui.SkinnableTextBase = SkinnableTextBase;
        egret.registerClass(SkinnableTextBase,"egret.gui.SkinnableTextBase");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        var TextArea = (function (_super) {
            __extends(TextArea, _super);
            /**
             * 构造函数
             */
            function TextArea() {
                _super.call(this);
                /**
                 * 水平滚动条策略改变标志
                 */
                this.horizontalScrollPolicyChanged = false;
                this._horizontalScrollPolicy = null;
                /**
                 * 垂直滚动条策略改变标志
                 */
                this.verticalScrollPolicyChanged = false;
                this._verticalScrollPolicy = null;
                /**
                 * [SkinPart]实体滚动条组件
                 */
                this.scroller = null;
            }
            var d = __define,c=TextArea;p=c.prototype;
            d(p, "widthInChars"
                /**
                 * 控件的默认宽度（使用字号：size为单位测量）。 若同时设置了maxChars属性，将会根据两者测量结果的最小值作为测量宽度。
                 */
                ,function () {
                    return this._getWidthInChars();
                }
                ,function (value) {
                    this._setWidthInChars(value);
                }
            );
            d(p, "heightInLines"
                /**
                 * 控件的默认高度（以行为单位测量）。
                 */
                ,function () {
                    return this._getHeightInLines();
                }
                ,function (value) {
                    this._setHeightInLines(value);
                }
            );
            d(p, "horizontalScrollPolicy"
                /**
                 * 水平滚动条显示策略，参见ScrollPolicy类定义的常量。
                 */
                ,function () {
                    return this._horizontalScrollPolicy;
                }
                ,function (value) {
                    if (this._horizontalScrollPolicy == value)
                        return;
                    this._horizontalScrollPolicy = value;
                    this.horizontalScrollPolicyChanged = true;
                    this.invalidateProperties();
                }
            );
            d(p, "verticalScrollPolicy"
                /**
                 * 垂直滚动条显示策略，参见ScrollPolicy类定义的常量。
                 */
                ,function () {
                    return this._verticalScrollPolicy;
                }
                ,function (value) {
                    if (this._verticalScrollPolicy == value)
                        return;
                    this._verticalScrollPolicy = value;
                    this.verticalScrollPolicyChanged = true;
                    this.invalidateProperties();
                }
            );
            p._setText = function (value) {
                _super.prototype._setText.call(this, value);
                this.dispatchEvent(new egret.Event(egret.Event.CHANGE));
            };
            /**
             * 处理对组件设置的属性
             * @inheritDoc
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.horizontalScrollPolicyChanged) {
                    if (this.scroller)
                        this.scroller.horizontalScrollPolicy = this.horizontalScrollPolicy;
                    this.horizontalScrollPolicyChanged = false;
                }
                if (this.verticalScrollPolicyChanged) {
                    if (this.scroller)
                        this.scroller.verticalScrollPolicy = this.verticalScrollPolicy;
                    this.verticalScrollPolicyChanged = false;
                }
            };
            /**
             * 添加外观部件时调用
             * @inheritDoc
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.textDisplay) {
                    this.textDisplay.multiline = true;
                }
                else if (instance == this.scroller) {
                }
            };
            /**
             * 创建外观部件的引用
             * @inheritDoc
             */
            p.createSkinParts = function () {
                this.textDisplay = new gui.EditableText();
                this.textDisplay.widthInChars = 15;
                this.textDisplay.heightInLines = 10;
                this._addToDisplayList((this.textDisplay));
                this.partAdded("textDisplay", this.textDisplay);
            };
            return TextArea;
        })(gui.SkinnableTextBase);
        gui.TextArea = TextArea;
        egret.registerClass(TextArea,"egret.gui.TextArea");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * TextInput 是一个文本输入控件，供用户输入和编辑单行统一格式文本
         * @classic
         */
        var TextInput = (function (_super) {
            __extends(TextInput, _super);
            /**
             * 构造函数
             */
            function TextInput() {
                _super.call(this);
            }
            var d = __define,c=TextInput;p=c.prototype;
            d(p, "widthInChars"
                /**
                 * 控件的默认宽度（使用字号：size为单位测量）。 若同时设置了maxChars属性，将会根据两者测量结果的最小值作为测量宽度。
                 */
                ,function () {
                    return _super.prototype._getWidthInChars.call(this);
                }
                ,function (value) {
                    _super.prototype._setWidthInChars.call(this, value);
                }
            );
            p._setText = function (value) {
                _super.prototype._setText.call(this, value);
                this.dispatchEvent(new egret.Event(egret.Event.CHANGE));
            };
            /**
             * 添加外观部件时调用
             * @inheritDoc
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.textDisplay) {
                    this.textDisplay.multiline = false;
                }
            };
            /**
             *  创建外观部件的引用
             * @inheritDoc
             */
            p.createSkinParts = function () {
                this.textDisplay = new gui.EditableText();
                this.textDisplay.widthInChars = 10;
                this.textDisplay.multiline = false;
                this.textDisplay.left = 1;
                this.textDisplay.right = 1;
                this.textDisplay.top = 1;
                this.textDisplay.bottom = 1;
                this._addToDisplayList((this.textDisplay));
                this.partAdded("textDisplay", this.textDisplay);
            };
            return TextInput;
        })(gui.SkinnableTextBase);
        gui.TextInput = TextInput;
        egret.registerClass(TextInput,"egret.gui.TextInput");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ToggleButton
         * @classdesc
         * 切换按钮
         * @extends egret.gui.ToggleButtonBase
         */
        var ToggleButton = (function (_super) {
            __extends(ToggleButton, _super);
            /**
             * 构造函数
             * @method egret.gui.ToggleButton#constructor
             */
            function ToggleButton() {
                _super.call(this);
                /**
                 * [SkinPart]按钮上的文本标签
                 * @member egret.gui.ButtonBase#labelDisplay
                 */
                this.iconDisplay = null;
                this._icon = null;
            }
            var d = __define,c=ToggleButton;p=c.prototype;
            d(p, "icon"
                /**
                 * 要在按钮上显示的图标
                 * @member egret.gui.ButtonBase#icon
                 */
                ,function () {
                    return this._getIcon();
                }
                ,function (value) {
                    this._setIcon(value);
                }
            );
            p._getIcon = function () {
                if (this.iconDisplay) {
                    return this.iconDisplay.source;
                }
                else {
                    return this._icon;
                }
            };
            p._setIcon = function (value) {
                this._icon = value;
                if (this.iconDisplay) {
                    this.iconDisplay.source = value;
                }
            };
            /**
             * [覆盖] 添加外观部件时调用
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.iconDisplay) {
                    this.iconDisplay.source = this._icon;
                }
            };
            return ToggleButton;
        })(gui.ToggleButtonBase);
        gui.ToggleButton = ToggleButton;
        egret.registerClass(ToggleButton,"egret.gui.ToggleButton");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ToggleSwitch
         * @classdesc
         * 开关按钮
         * @extends egret.gui.ToggleButtonBase
         */
        var ToggleSwitch = (function (_super) {
            __extends(ToggleSwitch, _super);
            /**
             * 构造函数
             * @method egret.gui.ToggleSwitch#constructor
             */
            function ToggleSwitch() {
                _super.call(this);
            }
            var d = __define,c=ToggleSwitch;p=c.prototype;
            return ToggleSwitch;
        })(gui.ToggleButtonBase);
        gui.ToggleSwitch = ToggleSwitch;
        egret.registerClass(ToggleSwitch,"egret.gui.ToggleSwitch");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TreeItemRenderer
         * @classdesc
         * Tree组件的项呈示器基类
         * @extends egret.gui.ItemRenderer
         * @implements egret.gui.ITreeItemRenderer
         */
        var TreeItemRenderer = (function (_super) {
            __extends(TreeItemRenderer, _super);
            /**
             * 构造函数
             * @method egret.gui.TreeItemRenderer#constructor
             */
            function TreeItemRenderer() {
                _super.call(this);
                /**
                 * [SkinPart]图标显示对象
                 * @member egret.gui.TreeItemRenderer#iconDisplay
                 */
                this.iconDisplay = null;
                /**
                 * [SkinPart]子节点开启按钮
                 * @member egret.gui.TreeItemRenderer#disclosureButton
                 */
                this.disclosureButton = null;
                /**
                 * [SkinPart]用于调整缩进值的容器对象。
                 * @member egret.gui.TreeItemRenderer#contentGroup
                 */
                this.contentGroup = null;
                /**
                 *
                 * @type {number}
                 * @private
                 */
                this._indentation = 17;
                /**
                 *
                 * @type {null}
                 * @private
                 */
                this._iconSkinName = null;
                /**
                 *
                 * @type {number}
                 * @private
                 */
                this._depth = 0;
                /**
                 *
                 * @type {boolean}
                 * @private
                 */
                this._hasChildren = false;
                /**
                 *
                 * @type {boolean}
                 * @private
                 */
                this._isOpen = false;
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onItemMouseDown, this, false, 1000);
            }
            var d = __define,c=TreeItemRenderer;p=c.prototype;
            p.onItemMouseDown = function (event) {
                if (event.target == this.disclosureButton) {
                    event.stopImmediatePropagation();
                }
            };
            d(p, "indentation"
                /**
                 * 子节点相对父节点的缩进值，以像素为单位。默认17。
                 * @member egret.gui.TreeItemRenderer#indentation
                 */
                ,function () {
                    return this._indentation;
                }
                ,function (value) {
                    this._indentation = value;
                }
            );
            d(p, "iconSkinName"
                /**
                 * @member egret.gui.TreeItemRenderer#iconSkinName
                 */
                ,function () {
                    return this._iconSkinName;
                }
                ,function (value) {
                    if (this._iconSkinName == value)
                        return;
                    this._iconSkinName = value;
                    if (this.iconDisplay) {
                        this.iconDisplay.source = this._iconSkinName;
                    }
                }
            );
            d(p, "depth"
                /**
                 * @member egret.gui.TreeItemRenderer#depth
                 */
                ,function () {
                    return this._depth;
                }
                ,function (value) {
                    if (value == this._depth)
                        return;
                    this._depth = value;
                    if (this.contentGroup) {
                        this.contentGroup.x = this._depth * this._indentation;
                    }
                }
            );
            d(p, "hasChildren"
                /**
                 * @member egret.gui.TreeItemRenderer#hasChildren
                 */
                ,function () {
                    return this._hasChildren;
                }
                ,function (value) {
                    if (this._hasChildren == value)
                        return;
                    this._hasChildren = value;
                    if (this.disclosureButton) {
                        this.disclosureButton.visible = this._hasChildren;
                    }
                }
            );
            d(p, "opened"
                /**
                 * @member egret.gui.TreeItemRenderer#opened
                 */
                ,function () {
                    return this._isOpen;
                }
                ,function (value) {
                    if (this._isOpen == value)
                        return;
                    this._isOpen = value;
                    if (this.disclosureButton) {
                        this.disclosureButton.selected = this._isOpen;
                    }
                }
            );
            /**
             * 添加外观部件时调用
             * @method egret.gui.TreeItemRenderer#partAdded
             * @param partName {string}
             * @param instance {any}
             */
            p.partAdded = function (partName, instance) {
                _super.prototype.partAdded.call(this, partName, instance);
                if (instance == this.iconDisplay) {
                    this.iconDisplay.source = this._iconSkinName;
                }
                else if (instance == this.disclosureButton) {
                    this.disclosureButton.visible = this._hasChildren;
                    this.disclosureButton.selected = this._isOpen;
                    this.disclosureButton._autoSelected = false;
                    this.disclosureButton.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.disclosureButton_mouseDownHandler, this);
                }
                else if (instance == this.contentGroup) {
                    this.contentGroup.x = this._depth * this._indentation;
                }
            };
            /**
             * 删除外观部件的实例时调用
             * @method egret.gui.TreeItemRenderer#partRemoved
             * @param partName {string}
             * @param instance {any}
             */
            p.partRemoved = function (partName, instance) {
                _super.prototype.partRemoved.call(this, partName, instance);
                if (instance == this.iconDisplay) {
                    this.iconDisplay.source = null;
                }
                else if (instance == this.disclosureButton) {
                    this.disclosureButton.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.disclosureButton_mouseDownHandler, this);
                    this.disclosureButton._autoSelected = true;
                    this.disclosureButton.visible = true;
                }
            };
            /**
             * 鼠标在disclosureButton上按下
             * @method egret.gui.TreeItemRenderer#disclosureButton_mouseDownHandler
             * @param event {TouchEvent}
             */
            p.disclosureButton_mouseDownHandler = function (event) {
                gui.TreeEvent.dispatchTreeEvent(this, gui.TreeEvent.ITEM_OPENING, this.itemIndex, this.data, this, !this._isOpen, false, true);
            };
            return TreeItemRenderer;
        })(gui.ItemRenderer);
        gui.TreeItemRenderer = TreeItemRenderer;
        egret.registerClass(TreeItemRenderer,"egret.gui.TreeItemRenderer",["egret.gui.ITreeItemRenderer","egret.gui.IItemRenderer","egret.gui.ILayoutElement","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="../core/ClassFactory.ts" />
/// <reference path="./supportClasses/TreeItemRenderer.ts" />
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Tree
         * @classdesc
         * 树状列表组件
         * @extends egret.gui.List
         */
        var Tree = (function (_super) {
            __extends(Tree, _super);
            /**
             * 构造函数
             * @method egret.gui.Tree#constructor
             */
            function Tree() {
                _super.call(this);
                /**
                 * 图标字段或函数改变标志
                 */
                this.iconFieldOrFunctionChanged = false;
                this._iconField = null;
                this._iconFunction = null;
            }
            var d = __define,c=Tree;p=c.prototype;
            /**
             * 创建该容器的子元素对象
             * @method egret.gui.Tree#createChildren
             */
            p.createChildren = function () {
                if (!this.itemRenderer)
                    this.itemRenderer = Tree.defaultTreeRendererFactory;
                _super.prototype.createChildren.call(this);
            };
            /**
             * 更新项呈示器，以备使用或重用
             * @method egret.gui.Tree#updateRenderer
             * @param renderer {IItemRenderer}
             * @param itemIndex {number}
             * @param data {any}
             * @returns {IItemRenderer}
             */
            p.updateRenderer = function (renderer, itemIndex, data) {
                if ("hasChildren" in renderer && "hasChildren" in this.dataProvider) {
                    var treeCollection = (this.dataProvider);
                    var treeRenderer = renderer;
                    treeRenderer.hasChildren = treeCollection.hasChildren(data);
                    treeRenderer.opened = treeCollection.isItemOpen(data);
                    treeRenderer.depth = treeCollection.getDepth(data);
                    treeRenderer.iconSkinName = this.itemToIcon(data);
                }
                return _super.prototype.updateRenderer.call(this, renderer, itemIndex, data);
            };
            /**
             * 根据数据项返回项呈示器中图标的skinName属性值
             * @method egret.gui.Tree#itemToIcon
             * @param data {any}
             * @returns {any}
             */
            p.itemToIcon = function (data) {
                if (!data)
                    return null;
                if (this._iconFunction != null)
                    return this._iconFunction(data);
                var skinName;
                if (data instanceof Object) {
                    try {
                        if (data[this.iconField]) {
                            skinName = data[this.iconField];
                        }
                    }
                    catch (e) {
                    }
                }
                return skinName;
            };
            /**
             * @method egret.gui.Tree#dataGroup_rendererAddHandler
             * @param event {RendererExistenceEvent}
             */
            p.dataGroup_rendererAddHandler = function (event) {
                _super.prototype.dataGroup_rendererAddHandler.call(this, event);
                if (event.renderer && "hasChildren" in event.renderer)
                    event.renderer.addEventListener(gui.TreeEvent.ITEM_OPENING, this.onItemOpening, this);
            };
            /**
             * 节点即将打开
             */
            p.onItemOpening = function (event) {
                var renderer = event.itemRenderer;
                var item = event.item;
                var dp = this._getDataProvider();
                if (!renderer || !dp || !("hasChildren" in dp))
                    return;
                if (this.dispatchEvent(event)) {
                    var opend = !renderer.opened;
                    dp.expandItem(item, opend);
                    var type = opend ? gui.TreeEvent.ITEM_OPEN : gui.TreeEvent.ITEM_CLOSE;
                    gui.TreeEvent.dispatchTreeEvent(this, type, renderer.itemIndex, item, renderer);
                }
            };
            /**
             * @method egret.gui.Tree#dataGroup_rendererRemoveHandler
             * @param event {RendererExistenceEvent}
             */
            p.dataGroup_rendererRemoveHandler = function (event) {
                _super.prototype.dataGroup_rendererRemoveHandler.call(this, event);
                if (event.renderer && "hasChildren" in event.renderer)
                    event.renderer.removeEventListener(gui.TreeEvent.ITEM_OPENING, this.onItemOpening, this);
            };
            d(p, "iconField"
                /**
                 * 数据项中用来确定图标skinName属性值的字段名称。另请参考UIAsset.skinName。
                 * 若设置了iconFunction，则设置此属性无效。
                 * @member egret.gui.Tree#iconField
                 */
                ,function () {
                    return this._iconField;
                }
                ,function (value) {
                    if (this._iconField == value)
                        return;
                    this._iconField = value;
                    this.iconFieldOrFunctionChanged = true;
                    this.invalidateProperties();
                }
            );
            d(p, "iconFunction"
                /**
                 * 用户提供的函数，在每个数据项目上运行以确定其图标的skinName值。另请参考UIAsset.skinName。
                 * 示例：iconFunction(item:Object):Object
                 * @member egret.gui.Tree#iconFunction
                 */
                ,function () {
                    return this._iconFunction;
                }
                ,function (value) {
                    if (this._iconFunction == value)
                        return;
                    this._iconFunction = value;
                    this.iconFieldOrFunctionChanged = true;
                    this.invalidateProperties();
                }
            );
            /**
             * 打开或关闭一个节点,注意，此操作不会抛出open或close事件。
             * @method egret.gui.Tree#expandItem
             * @param item {any} 要打开或关闭的节点
             * @param open {boolean} true表示打开节点，反之关闭。
             */
            p.expandItem = function (item, open) {
                if (open === void 0) { open = true; }
                var dp = this._getDataProvider();
                if (!dp || !("hasChildren" in dp))
                    return;
                (dp).expandItem(item, open);
            };
            /**
             * 指定的节点是否打开
             * @method egret.gui.Tree#isItemOpen
             * @param item {any}
             * @returns {boolean}
             */
            p.isItemOpen = function (item) {
                var dp = this._getDataProvider();
                if (!dp || !("hasChildren" in dp))
                    return false;
                return (dp).isItemOpen(item);
            };
            /**
             * @method egret.gui.Tree#dataProvider_collectionChangeHandler
             * @param event {CollectionEvent}
             */
            p.dataProvider_collectionChangeHandler = function (event) {
                _super.prototype.dataProvider_collectionChangeHandler.call(this, event);
                if (event.kind == gui.CollectionEventKind.OPEN || event.kind == gui.CollectionEventKind.CLOSE) {
                    var renderer = this.dataGroup ? (this.dataGroup.getElementAt(event.location)) : null;
                    if (renderer) {
                        this.updateRenderer(renderer, event.location, event.items[0]);
                        if (event.kind == gui.CollectionEventKind.CLOSE && this.layout && this.layout.useVirtualLayout) {
                            this.layout.clearVirtualLayoutCache();
                            this.invalidateSize();
                        }
                    }
                }
            };
            /**
             * 处理对组件设置的属性
             * @method egret.gui.Tree#commitProperties
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.iconFieldOrFunctionChanged) {
                    if (this.dataGroup != null) {
                        var itemIndex;
                        if (this.layout && this.layout.useVirtualLayout) {
                            var list = this.dataGroup.getElementIndicesInView();
                            var length = list.length;
                            for (var i = 0; i < length; i++) {
                                var itemIndex = list[i];
                                this.updateRendererIconProperty(itemIndex);
                            }
                        }
                        else {
                            var n = this.dataGroup.numElements;
                            for (itemIndex = 0; itemIndex < n; itemIndex++) {
                                this.updateRendererIconProperty(itemIndex);
                            }
                        }
                    }
                    this.iconFieldOrFunctionChanged = false;
                }
            };
            /**
             * 更新指定索引项的图标
             */
            p.updateRendererIconProperty = function (itemIndex) {
                var renderer = (this.dataGroup.getElementAt(itemIndex));
                if (renderer)
                    renderer.iconSkinName = this.itemToIcon(renderer.data);
            };
            Tree.defaultTreeRendererFactory = new gui.ClassFactory(gui.TreeItemRenderer);
            return Tree;
        })(gui.List);
        gui.Tree = Tree;
        egret.registerClass(Tree,"egret.gui.Tree");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.UIAsset
         * @classdesc
         * 素材和非GUI显示对象包装器。<p/>
         * @extends egret.gui.UIComponent
         * @implements egret.gui.ISkinnableClient
         */
        var UIAsset = (function (_super) {
            __extends(UIAsset, _super);
            /**
             * @method egret.gui.UIAsset#constructor
             * @param source {any} 素材标识符
             */
            function UIAsset(source, autoScale) {
                if (autoScale === void 0) { autoScale = true; }
                _super.call(this);
                /**
                 * 矩形区域，它定义素材对象的九个缩放区域。
                 * 注意:此属性仅在source的解析结果为Texture并且fileMode为BitmapFillMode.SCALE时有效。
                 * @member {egret.Texture} egret.gui.UIAsset#scale9Grid
                 */
                this.scale9Grid = null;
                /**
                 * 确定位图填充尺寸的方式。默认值：BitmapFillMode.SCALE。
                 * 设置为 BitmapFillMode.REPEAT时，位图将重复以填充区域。
                 * 设置为 BitmapFillMode.SCALE时，位图将拉伸以填充区域。
                 * 注意:此属性仅在source的解析结果为Texture时有效
                 * @member {egret.Texture} egret.gui.UIAsset#fillMode
                 */
                this.fillMode = "scale";
                this.sourceChanged = false;
                this._source = null;
                this._content = null;
                this._contentIsTexture = false;
                this.createChildrenCalled = false;
                this.contentReused = false;
                /**
                 * 是自动否缩放content对象，以符合UIAsset的尺寸。默认值true。
                 */
                this.autoScale = true;
                this.touchChildren = false;
                if (source) {
                    this.source = source;
                }
                this.$renderRegion = new egret.sys.Region();
                this.autoScale = autoScale;
            }
            var d = __define,c=UIAsset;p=c.prototype;
            d(p, "source"
                /**
                 * 素材标识符。可以为Class,String,或DisplayObject实例等任意类型，具体规则由项目注入的素材适配器决定，
                 * 适配器根据此属性值解析获取对应的显示对象，并赋值给content属性。
                 * @member egret.gui.UIAsset#source
                 */
                ,function () {
                    return this._source;
                }
                ,function (value) {
                    if (this._source == value)
                        return;
                    this._source = value;
                    if (this.createChildrenCalled) {
                        this.parseSource();
                    }
                    else {
                        this.sourceChanged = true;
                    }
                    this.$invalidateContentBounds();
                }
            );
            d(p, "content"
                /**
                 * 解析source得到的对象，通常为显示对象或Texture。
                 * @member egret.gui.UIAsset#content
                 */
                ,function () {
                    return this._content;
                }
            );
            /**
             * 创建该容器的子元素对象
             */
            p.createChildren = function () {
                _super.prototype.createChildren.call(this);
                if (this.sourceChanged) {
                    this.parseSource();
                }
                this.createChildrenCalled = true;
            };
            /**
             * 解析source
             */
            p.parseSource = function () {
                this.sourceChanged = false;
                var adapter = UIAsset.assetAdapter;
                if (!adapter) {
                    adapter = this.getAdapter();
                }
                if (!this._source) {
                    this.contentChanged(null, null);
                }
                else {
                    var reuseContent = this.contentReused ? null : this._content;
                    this.contentReused = true;
                    adapter.getAsset(this._source, this.contentChanged, this, reuseContent);
                }
            };
            /**
             * 获取资源适配器
             */
            p.getAdapter = function () {
                var adapter;
                try {
                    adapter = gui.$getAdapter("egret.gui.IAssetAdapter");
                }
                catch (e) {
                    adapter = new gui.DefaultAssetAdapter();
                }
                UIAsset.assetAdapter = adapter;
                return adapter;
            };
            /**
             * 皮肤发生改变
             */
            p.contentChanged = function (content, source) {
                if (source !== this._source)
                    return;
                var oldContent = this._content;
                this._content = content;
                if (this._content instanceof egret.Texture) {
                    this._contentIsTexture = true;
                }
                else {
                    this._contentIsTexture = false;
                }
                if (oldContent !== content) {
                    if (oldContent instanceof egret.DisplayObject) {
                        if (oldContent.parent == this) {
                            //(<DisplayObject> oldContent)._sizeChangeCallBack = null;
                            //(<DisplayObject> oldContent)._sizeChangeCallTarget = null;
                            this._removeFromDisplayList(oldContent);
                        }
                    }
                    if (content instanceof egret.DisplayObject) {
                        //(<DisplayObject> content)._sizeChangeCallBack = this.invalidateSize;
                        //(<DisplayObject> content)._sizeChangeCallTarget = this;
                        this._addToDisplayListAt(content, 0);
                    }
                }
                this.invalidateSize();
                this.invalidateDisplayList();
                this.contentReused = false;
                if (this.hasEventListener(gui.UIEvent.CONTENT_CHANGED)) {
                    gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.CONTENT_CHANGED);
                }
            };
            /**
             * 计算组件的默认大小和（可选）默认最小大小
             */
            p.measure = function () {
                _super.prototype.measure.call(this);
                var content = this._content;
                if (content instanceof egret.DisplayObject) {
                    if ("preferredWidth" in content) {
                        this.measuredWidth = (content).preferredWidth;
                        this.measuredHeight = (content).preferredHeight;
                    }
                    else {
                        var oldW = content.explicitWidth;
                        var oldH = content.explicitHeight;
                        content.width = NaN;
                        content.height = NaN;
                        this.measuredWidth = content.measuredWidth * content.scaleX;
                        this.measuredHeight = content.measuredHeight * content.scaleY;
                        content.width = oldW;
                        content.height = oldH;
                    }
                }
                else if (this._contentIsTexture) {
                    this.measuredWidth = content.$getTextureWidth();
                    this.measuredHeight = content.$getTextureHeight();
                }
            };
            /**
             * 绘制对象和/或设置其子项的大小和位置
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                var content = this._content;
                if (this.autoScale && content instanceof egret.DisplayObject) {
                    if ("setLayoutBoundsSize" in content) {
                        (content).setLayoutBoundsSize(unscaledWidth, unscaledHeight);
                    }
                    else {
                        content.width = unscaledWidth / content.scaleX;
                        content.height = unscaledHeight / content.scaleY;
                    }
                }
                this.$invalidateContentBounds();
            };
            /**
             * @private
             */
            p.$render = function (context) {
                if (this._contentIsTexture) {
                    var bitmapData = this._content;
                    context.imageSmoothingEnabled = false;
                    var destW;
                    var destH;
                    if (this.autoScale) {
                        destW = this._UIC_Props_._uiWidth;
                        destH = this._UIC_Props_._uiHeight;
                    }
                    else {
                        destW = bitmapData.$getTextureWidth();
                        destH = bitmapData.$getTextureHeight();
                    }
                    egret.Bitmap.$drawImage(context, bitmapData._bitmapData, bitmapData._bitmapX, bitmapData._bitmapY, bitmapData._bitmapWidth, bitmapData._bitmapHeight, bitmapData._offsetX, bitmapData._offsetY, bitmapData.$getTextureWidth(), bitmapData.$getTextureHeight(), destW, destH, this.scale9Grid || bitmapData["scale9Grid"], this.fillMode, true);
                }
                _super.prototype.$render.call(this, context);
            };
            /**
             * @private
             */
            p.$measureContentBounds = function (bounds) {
                if (this._contentIsTexture) {
                    var texture = this._content;
                    var w = NaN;
                    var h = NaN;
                    if (this.autoScale) {
                        w = this._UIC_Props_._uiWidth == 10000 ? this.$getExplicitWidth() : this._UIC_Props_._uiWidth;
                        h = this._UIC_Props_._uiHeight == 10000 ? this.$getExplicitHeight() : this._UIC_Props_._uiHeight;
                    }
                    if (isNaN(w)) {
                        w = texture.$getTextureWidth();
                    }
                    if (isNaN(h)) {
                        h = texture.$getTextureHeight();
                    }
                    bounds.setTo(0, 0, w, h);
                }
                else {
                    _super.prototype.$measureContentBounds.call(this, bounds);
                }
            };
            /**
             * 此方法不支持
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.addChild = function (child) {
                egret.$error(3004, egret.sys.tr(3003));
                return null;
            };
            /**
             * 此方法不支持
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.addChildAt = function (child, index) {
                egret.$error(3005, egret.sys.tr(3003));
                return null;
            };
            /**
             * 此方法不支持
             * @deprecated
             * @param child {DisplayObject}
             * @returns {DisplayObject}
             */
            p.removeChild = function (child) {
                egret.$error(3006, egret.sys.tr(3003));
                return null;
            };
            /**
             * 此方法不支持
             * @deprecated
             * @param index {number}
             * @returns {DisplayObject}
             */
            p.removeChildAt = function (index) {
                egret.$error(3007, egret.sys.tr(3003));
                return null;
            };
            /**
             * 此方法不支持
             * @deprecated
             * @param child {DisplayObject}
             * @param index {number}
             */
            p.setChildIndex = function (child, index) {
                egret.$error(3008, egret.sys.tr(3003));
            };
            /**
             * 此方法不支持
             * @deprecated
             * @param child1 {DisplayObject}
             * @param child2 {DisplayObject}
             */
            p.swapChildren = function (child1, child2) {
                egret.$error(3009, egret.sys.tr(3003));
            };
            /**
             * 此方法不支持
             * @deprecated
             * @param index1 {number}
             * @param index2 {number}
             */
            p.swapChildrenAt = function (index1, index2) {
                egret.$error(3010, egret.sys.tr(3003));
            };
            /**
             * 皮肤解析适配器
             */
            UIAsset.assetAdapter = null;
            return UIAsset;
        })(gui.UIComponent);
        gui.UIAsset = UIAsset;
        egret.registerClass(UIAsset,"egret.gui.UIAsset");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.VSlider
         * @classdesc
         * 垂直滑块控件
         * @extends egret.gui.SliderBase
         */
        var VSlider = (function (_super) {
            __extends(VSlider, _super);
            /**
             * 构造函数
             * @method egret.gui.VSlider#constructor
             */
            function VSlider() {
                _super.call(this);
            }
            var d = __define,c=VSlider;p=c.prototype;
            /**
             * 将相对于轨道的 x,y 像素位置转换为介于最小值和最大值（包括两者）之间的一个值
             * @param x {number}
             * @param y {number}
             * @returns {number}
             */
            p.pointToValue = function (x, y) {
                if (!this.thumb || !this.track)
                    return 0;
                var range = this.maximum - this.minimum;
                var thumbRange = this.track.layoutBoundsHeight - this.thumb.layoutBoundsHeight;
                return this.minimum + ((thumbRange != 0) ? ((thumbRange - y) / thumbRange) * range : 0);
            };
            /**
             * 设置外观部件（通常为滑块）的边界，这些外观部件的几何图形不是完全由外观的布局指定的
             */
            p.updateSkinDisplayList = function () {
                if (!this.thumb || !this.track)
                    return;
                var thumbHeight = this.thumb.layoutBoundsHeight;
                var thumbRange = this.track.layoutBoundsHeight - thumbHeight;
                var range = this.maximum - this.minimum;
                var thumbPosTrackY = (range > 0) ? thumbRange - (((this.pendingValue - this.minimum) / range) * thumbRange) : 0;
                var thumbPos = this.track.localToGlobal(0, thumbPosTrackY);
                var thumbPosX = thumbPos.x;
                var thumbPosY = thumbPos.y;
                var thumbPosParentY = this.thumb.parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).y;
                this.thumb.setLayoutBoundsPosition(this.thumb.layoutBoundsX, Math.round(thumbPosParentY));
                if (this.showTrackHighlight && this.trackHighlight && this.trackHighlight.$parent) {
                    var trackHighlightY = this.trackHighlight.$parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).y;
                    this.trackHighlight.y = Math.round(trackHighlightY + thumbHeight);
                    this.trackHighlight.height = Math.round(thumbRange - trackHighlightY);
                }
            };
            return VSlider;
        })(gui.SliderBase);
        gui.VSlider = VSlider;
        egret.registerClass(VSlider,"egret.gui.VSlider");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @classic
         * VScrollBar（垂直 ScrollBar）控件可以在因数据太多而不能在显示区域中以垂直方向完全显示时控制显示的数据部分
         */
        var VScrollBar = (function (_super) {
            __extends(VScrollBar, _super);
            function VScrollBar() {
                _super.call(this);
                this._thumbLengthRatio = 1;
            }
            var d = __define,c=VScrollBar;p=c.prototype;
            /**
             *
             * @param height
             * @param contentHeight
             * @private
             */
            p._setViewportMetric = function (height, contentHeight) {
                var max = Math.max(0, contentHeight - height);
                this._thumbLengthRatio = contentHeight <= height ? 1 : height / contentHeight;
                this._setMaximun(max);
                this._setMinimun(0);
            };
            d(p, "trackAlpha"
                ,function () {
                    return 1;
                }
                /**
                 * @deprecated
                 */
                ,function (value) {
                    egret.$warn(1016, "VScrollBar.trackAlpha");
                }
            );
            d(p, "thumbAlpha"
                ,function () {
                    return 1;
                }
                /**
                 * @deprecated
                 */
                ,function (value) {
                    egret.$warn(1016, "VScrollBar.thumbAlpha");
                }
            );
            p.setPosition = function (value) {
                this._setValue(value);
            };
            p.getPosition = function () {
                return this._getValue();
            };
            p._setValue = function (value) {
                value = Math.max(0, value);
                _super.prototype._setValue.call(this, value);
            };
            p.setValue = function (value) {
                _super.prototype.setValue.call(this, value);
            };
            p._animationUpdateHandler = function (animation) {
                this.pendingValue = animation.currentValue["value"];
                this.value = animation.currentValue["value"];
                this.dispatchEventWith(egret.Event.CHANGE);
            };
            /**
             * 将相对于轨道的 x,y 像素位置转换为介于最小值和最大值（包括两者）之间的一个值
             * @param x {number}
             * @param y {number}
             * @returns {number}
             */
            p.pointToValue = function (x, y) {
                if (!this.thumb || !this.track)
                    return 0;
                var range = this.maximum - this.minimum;
                var thumbRange = this.track.layoutBoundsHeight - this.thumb.layoutBoundsHeight;
                return this.minimum + ((thumbRange != 0) ? (y / thumbRange) * range : 0);
            };
            /**
             * 设置外观部件（通常为滑块）的边界，这些外观部件的几何图形不是完全由外观的布局指定的
             */
            p.updateSkinDisplayList = function () {
                if (!this.thumb || !this.track)
                    return;
                var thumbHeight = this.track.layoutBoundsHeight * this._thumbLengthRatio;
                var oldThumbHeight = this.thumb.layoutBoundsHeight;
                var thumbRange = this.track.layoutBoundsHeight - thumbHeight;
                var range = this.maximum - this.minimum;
                var thumbPosTrackY = (range > 0) ? ((this.pendingValue - this.minimum) / range) * thumbRange : 0;
                var thumbPos = this.track.localToGlobal(0, thumbPosTrackY);
                var thumbPosX = thumbPos.x;
                var thumbPosY = thumbPos.y;
                var thumbPosParentY = this.thumb.parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).y;
                this.thumb.setLayoutBoundsPosition(this.thumb.layoutBoundsX, Math.round(thumbPosParentY));
                if (thumbHeight != oldThumbHeight)
                    this.thumb.setLayoutBoundsSize(this.thumb.layoutBoundsWidth, thumbHeight);
            };
            return VScrollBar;
        })(gui.VSlider);
        gui.VScrollBar = VScrollBar;
        egret.registerClass(VScrollBar,"egret.gui.VScrollBar");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ViewStack
         * @classdesc
         * 层级堆叠容器,一次只显示一个子对象。
         * @extends egret.gui.Group
         * @implements egret.gui.IViewStack
         * @implements egret.gui.ICollection
         */
        var ViewStack = (function (_super) {
            __extends(ViewStack, _super);
            /**
             * 构造函数
             * @method egret.gui.ViewStack#constructor
             */
            function ViewStack() {
                _super.call(this);
                this._createAllChildren = false;
                this._selectedChild = null;
                /**
                 * 在属性提交前缓存选中项索引
                 */
                this.proposedSelectedIndex = ViewStack.NO_PROPOSED_SELECTION;
                this._selectedIndex = -1;
                this.notifyTabBar = false;
                /**
                 * 子项显示列表顺序发生改变。
                 */
                this.childOrderingChanged = false;
                this._setLayout(new gui.BasicLayout());
            }
            var d = __define,c=ViewStack;p=c.prototype;
            d(p, "layout"
                /**
                 * 此容器的布局对象为只读,默认限制为BasicLayout。
                 * @member egret.gui.ViewStack#layout
                 */
                ,function () {
                    return this._layout;
                }
                ,function (value) {
                }
            );
            d(p, "createAllChildren"
                /**
                 * 是否立即初始化化所有子项。false表示当子项第一次被显示时再初始化它。默认值false。
                 * @member egret.gui.ViewStack#createAllChildren
                 */
                ,function () {
                    return this._createAllChildren;
                }
                ,function (value) {
                    if (this._createAllChildren == value)
                        return;
                    this._createAllChildren = value;
                    if (this._createAllChildren) {
                        var elements = this._getElementsContent();
                        var length = elements.length;
                        for (var i = 0; i < length; i++) {
                            var element = elements[i];
                            if (element instanceof egret.DisplayObject && element.parent != this) {
                                this.childOrderingChanged = true;
                                this._addToDisplayList(element);
                            }
                        }
                        if (this.childOrderingChanged)
                            this.invalidateProperties();
                    }
                }
            );
            d(p, "selectedChild"
                /**
                 * 当前选中的子项
                 * @member egret.gui.ViewStack#selectedChild
                 */
                ,function () {
                    var index = this.selectedIndex;
                    if (index >= 0 && index < this.numElements)
                        return this.getElementAt(index);
                    return null;
                }
                ,function (value) {
                    var index = this.getElementIndex(value);
                    if (index >= 0 && index < this.numElements)
                        this._setSelectedIndex(index);
                }
            );
            d(p, "selectedIndex"
                /**
                 * 当前选中子项的索引
                 * @member egret.gui.ViewStack#selectedIndex
                 */
                ,function () {
                    return this.proposedSelectedIndex != ViewStack.NO_PROPOSED_SELECTION ? this.proposedSelectedIndex : this._selectedIndex;
                }
                ,function (value) {
                    this._setSelectedIndex(value);
                }
            );
            /**
             * 设置选中项索引
             * @method egret.gui.ViewStack#_setSelectedIndex
             * @param value {number}
             * @param notifyListeners {boolean}
             */
            p._setSelectedIndex = function (value, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                if (value == this.selectedIndex) {
                    return;
                }
                this.proposedSelectedIndex = value;
                this.invalidateProperties();
                gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.VALUE_COMMIT);
                this.notifyTabBar = this.notifyTabBar || notifyListeners;
            };
            /**
             * 添加一个显示元素到容器
             * @param element {IVisualElement}
             * @param index {number}
             * @param notifyListeners {boolean}
             */
            p._elementAdded = function (element, index, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                if (this._createAllChildren) {
                    if (element instanceof egret.DisplayObject) {
                        var childDO = element;
                        this._addToDisplayListAt(childDO, index, notifyListeners);
                    }
                }
                if (notifyListeners) {
                    if (this.hasEventListener(gui.ElementExistenceEvent.ELEMENT_ADD))
                        gui.ElementExistenceEvent.dispatchElementExistenceEvent(this, gui.ElementExistenceEvent.ELEMENT_ADD, element, index);
                }
                element.visible = false;
                element.includeInLayout = false;
                if (this.selectedIndex == -1) {
                    this._setSelectedIndex(index, false);
                }
                else if (index <= this.selectedIndex && this.initialized) {
                    this._setSelectedIndex(this.selectedIndex + 1);
                }
                this.dispatchCoEvent(gui.CollectionEventKind.ADD, index, -1, [element.name]);
            };
            /**
             * 从容器移除一个显示元素
             * @param element {IVisualElement}
             * @param index {number}
             * @param notifyListeners {boolean}
             */
            p._elementRemoved = function (element, index, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                _super.prototype._elementRemoved.call(this, element, index, notifyListeners);
                element.visible = true;
                element.includeInLayout = true;
                if (index == this.selectedIndex) {
                    if (this.numElements > 0) {
                        if (index == 0) {
                            this.proposedSelectedIndex = 0;
                            this.invalidateProperties();
                        }
                        else
                            this._setSelectedIndex(0, false);
                    }
                    else
                        this._setSelectedIndex(-1);
                }
                else if (index < this.selectedIndex) {
                    this._setSelectedIndex(this.selectedIndex - 1);
                }
                this.dispatchCoEvent(gui.CollectionEventKind.REMOVE, index, -1, [element.name]);
            };
            /**
             * 处理对组件设置的属性
             */
            p.commitProperties = function () {
                _super.prototype.commitProperties.call(this);
                if (this.proposedSelectedIndex != ViewStack.NO_PROPOSED_SELECTION) {
                    this.commitSelection(this.proposedSelectedIndex);
                    this.proposedSelectedIndex = ViewStack.NO_PROPOSED_SELECTION;
                }
                if (this.childOrderingChanged) {
                    this.childOrderingChanged = false;
                    var elements = this._getElementsContent();
                    var length = elements.length;
                    for (var i = 0; i < length; i++) {
                        var element = elements[i];
                        if (element instanceof egret.DisplayObject && element.parent == this) {
                            this._addToDisplayList(element);
                        }
                    }
                }
                if (this.notifyTabBar) {
                    this.notifyTabBar = true;
                    this.dispatchEventWith("IndexChanged"); //通知TabBar自己的选中项发生改变
                }
            };
            /**
             *
             * @param newIndex
             */
            p.commitSelection = function (newIndex) {
                var oldIndex = this._selectedIndex;
                if (newIndex >= 0 && newIndex < this.numElements) {
                    this._selectedIndex = newIndex;
                    if (this._selectedChild && this._selectedChild.parent == this) {
                        this._selectedChild.visible = false;
                        this._selectedChild.includeInLayout = false;
                    }
                    this._selectedChild = this.getElementAt(this._selectedIndex);
                    this._selectedChild.visible = true;
                    this._selectedChild.includeInLayout = true;
                    if (this._selectedChild.parent != this && this._selectedChild instanceof egret.DisplayObject) {
                        this._addToDisplayList((this._selectedChild));
                        if (!this.childOrderingChanged) {
                            this.childOrderingChanged = true;
                        }
                    }
                }
                else {
                    this._selectedChild = null;
                    this._selectedIndex = -1;
                }
                this.invalidateSize();
                this.invalidateDisplayList();
            };
            d(p, "length"
                /**
                 * 子项数量
                 * @member egret.gui.ViewStack#length
                 */
                ,function () {
                    return this.numElements;
                }
            );
            /**
             * @param index {number}
             * @returns {any}
             */
            p.getItemAt = function (index) {
                var element = this.getElementAt(index);
                if (element)
                    return element.name;
                return "";
            };
            /**
             * @param item {any}
             * @returns {number}
             */
            p.getItemIndex = function (item) {
                var list = this._getElementsContent();
                var length = list.length;
                for (var i = 0; i < length; i++) {
                    if (list[i].name === item) {
                        return i;
                    }
                }
                return -1;
            };
            /**
             * 抛出事件
             */
            p.dispatchCoEvent = function (kind, location, oldLocation, items, oldItems) {
                if (kind === void 0) { kind = null; }
                if (location === void 0) { location = -1; }
                if (oldLocation === void 0) { oldLocation = -1; }
                if (items === void 0) { items = null; }
                if (oldItems === void 0) { oldItems = null; }
                gui.CollectionEvent.dispatchCollectionEvent(this, gui.CollectionEvent.COLLECTION_CHANGE, kind, location, oldLocation, items, oldItems);
            };
            /**
             * 未设置缓存选中项的值
             */
            ViewStack.NO_PROPOSED_SELECTION = -2;
            return ViewStack;
        })(gui.Group);
        gui.ViewStack = ViewStack;
        egret.registerClass(ViewStack,"egret.gui.ViewStack",["egret.gui.IViewStack","egret.gui.ICollection","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        var setTimeoutCache = {};
        var setTimeoutIndex = 0;
        var setTimeoutCount = 0;
        var lastTime = 0;
        /**
         * @private
         */
        function $addTimer(listener, thisObject, delay) {
            var args = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args[_i - 3] = arguments[_i];
            }
            var data = { listener: listener, thisObject: thisObject, delay: delay, params: args };
            setTimeoutCount++;
            if (setTimeoutCount == 1 && egret.sys.$ticker) {
                lastTime = egret.getTimer();
                egret.sys.$ticker.$startTick(timeoutUpdate, null);
            }
            setTimeoutIndex++;
            setTimeoutCache[setTimeoutIndex] = data;
            return setTimeoutIndex;
        }
        gui.$addTimer = $addTimer;
        /**
         * @private
         */
        function $clearTimer(key) {
            if (setTimeoutCache[key]) {
                setTimeoutCount--;
                delete setTimeoutCache[key];
                if (setTimeoutCount == 0 && egret.sys.$ticker) {
                    egret.sys.$ticker.$stopTick(timeoutUpdate, null);
                }
            }
        }
        gui.$clearTimer = $clearTimer;
        /**
         * @private
         *
         * @param dt
         */
        function timeoutUpdate(timeStamp) {
            var dt = timeStamp - lastTime;
            lastTime = timeStamp;
            for (var key in setTimeoutCache) {
                var data = setTimeoutCache[key];
                data.delay -= dt;
                if (data.delay <= 0) {
                    data.listener.apply(data.thisObject, data.params);
                    egret.clearTimeout(key);
                }
            }
            return false;
        }
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @private
         */
        var ScrollerEase = (function () {
            /**
             * @version Egret 2.4
             * @platform Web,Native
             */
            function ScrollerEase() {
                egret.$error(1014);
            }
            var d = __define,c=ScrollerEase;p=c.prototype;
            /**
             *
             * @param amount
             * @returns
             * @version Egret 2.4
             * @platform Web,Native
             */
            ScrollerEase.get = function (amount) {
                if (amount < -1) {
                    amount = -1;
                }
                if (amount > 1) {
                    amount = 1;
                }
                return function (t) {
                    if (amount == 0) {
                        return t;
                    }
                    if (amount < 0) {
                        return t * (t * -amount + 1 + amount);
                    }
                    return t * ((2 - t) * amount + (1 - amount));
                };
            };
            /**
             *
             * @param pow
             * @returns
             * @version Egret 2.4
             * @platform Web,Native
             */
            ScrollerEase.getPowOut = function (pow) {
                return function (t) {
                    return 1 - Math.pow(1 - t, pow);
                };
            };
            /**
             * @version Egret 2.4
             * @platform Web,Native
             */
            ScrollerEase.quintOut = ScrollerEase.getPowOut(5);
            /**
             * @version Egret 2.4
             * @platform Web,Native
             */
            ScrollerEase.quartOut = ScrollerEase.getPowOut(4);
            return ScrollerEase;
        })();
        gui.ScrollerEase = ScrollerEase;
        egret.registerClass(ScrollerEase,"egret.gui.ScrollerEase");
        /**
         * @private
         */
        var ScrollerTween = (function (_super) {
            __extends(ScrollerTween, _super);
            /**
             * 创建一个 egret.ScrollerTween 对象
             * @private
             * @version Egret 2.4
             * @platform Web,Native
             */
            function ScrollerTween(target, props, pluginData) {
                _super.call(this);
                /**
                 * @private
                 */
                this._target = null;
                /**
                 * @private
                 */
                this._useTicks = false;
                /**
                 * @private
                 */
                this.ignoreGlobalPause = false;
                /**
                 * @private
                 */
                this.loop = false;
                /**
                 * @private
                 */
                this.pluginData = null;
                /**
                 * @private
                 */
                this._steps = null;
                /**
                 * @private
                 */
                this._actions = null;
                /**
                 * @private
                 */
                this.paused = false;
                /**
                 * @private
                 */
                this.duration = 0;
                /**
                 * @private
                 */
                this._prevPos = -1;
                /**
                 * @private
                 */
                this.position = null;
                /**
                 * @private
                 */
                this._prevPosition = 0;
                /**
                 * @private
                 */
                this._stepPosition = 0;
                /**
                 * @private
                 */
                this.passive = false;
                this.initialize(target, props, pluginData);
            }
            var d = __define,c=ScrollerTween;p=c.prototype;
            /**
             * @language en_US
             * Activate an object and add a ScrollerTween animation to the object
             * @param target {any} The object to be activated
             * @param props {any} Parameters, support loop onChange onChangeObj
             * @param pluginData {any} Write realized
             * @param override {boolean} Whether to remove the object before adding a tween, the default value false
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 激活一个对象，对其添加 ScrollerTween 动画
             * @param target {any} 要激活 ScrollerTween 的对象
             * @param props {any} 参数，支持loop(循环播放) onChange(变化函数) onChangeObj(变化函数作用域)
             * @param pluginData {any} 暂未实现
             * @param override {boolean} 是否移除对象之前添加的tween，默认值false
             * @version Egret 2.4
             * @platform Web,Native
             */
            ScrollerTween.get = function (target, props, pluginData, override) {
                if (props === void 0) { props = null; }
                if (pluginData === void 0) { pluginData = null; }
                if (override === void 0) { override = false; }
                if (override) {
                    ScrollerTween.removeTweens(target);
                }
                return new ScrollerTween(target, props, pluginData);
            };
            /**
             * @language en_US
             * Delete all ScrollerTween animations from an object
             * @param target The object whose ScrollerTween to be deleted
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 删除一个对象上的全部 ScrollerTween 动画
             * @param target  需要移除 ScrollerTween 的对象
             * @version Egret 2.4
             * @platform Web,Native
             */
            ScrollerTween.removeTweens = function (target) {
                if (!target.tween_count) {
                    return;
                }
                var tweens = ScrollerTween._tweens;
                for (var i = tweens.length - 1; i >= 0; i--) {
                    if (tweens[i]._target == target) {
                        tweens[i].paused = true;
                        tweens.splice(i, 1);
                    }
                }
                target.tween_count = 0;
            };
            /**
             * @private
             *
             * @param delta
             * @param paused
             */
            ScrollerTween.tick = function (timeStamp, paused) {
                if (paused === void 0) { paused = false; }
                var delta = timeStamp - ScrollerTween._lastTime;
                ScrollerTween._lastTime = timeStamp;
                var tweens = ScrollerTween._tweens.concat();
                for (var i = tweens.length - 1; i >= 0; i--) {
                    var tween = tweens[i];
                    if ((paused && !tween.ignoreGlobalPause) || tween.paused) {
                        continue;
                    }
                    tween.tick(tween._useTicks ? 1 : delta);
                }
                return false;
            };
            /**
             * @private
             *
             * @param tween
             * @param value
             */
            ScrollerTween._register = function (tween, value) {
                var target = tween._target;
                var tweens = ScrollerTween._tweens;
                if (value) {
                    if (target) {
                        target.tween_count = target.tween_count > 0 ? target.tween_count + 1 : 1;
                    }
                    tweens.push(tween);
                    if (!ScrollerTween._inited) {
                        ScrollerTween._lastTime = egret.getTimer();
                        egret.sys.$ticker.$startTick(ScrollerTween.tick, null);
                        ScrollerTween._inited = true;
                    }
                }
                else {
                    if (target) {
                        target.tween_count--;
                    }
                    var i = tweens.length;
                    while (i--) {
                        if (tweens[i] == tween) {
                            tweens.splice(i, 1);
                            return;
                        }
                    }
                }
            };
            /**
             * @private
             *
             * @param target
             * @param props
             * @param pluginData
             */
            p.initialize = function (target, props, pluginData) {
                this._target = target;
                if (props) {
                    this._useTicks = props.useTicks;
                    this.ignoreGlobalPause = props.ignoreGlobalPause;
                    this.loop = props.loop;
                    props.onChange && this.addEventListener("change", props.onChange, props.onChangeObj);
                    if (props.override) {
                        ScrollerTween.removeTweens(target);
                    }
                }
                this.pluginData = pluginData || {};
                this._curQueueProps = {};
                this._initQueueProps = {};
                this._steps = [];
                this._actions = [];
                if (props && props.paused) {
                    this.paused = true;
                }
                else {
                    ScrollerTween._register(this, true);
                }
                if (props && props.position != null) {
                    this.setPosition(props.position);
                }
            };
            /**
             * @private
             *
             * @param value
             * @param actionsMode
             * @returns
             */
            p.setPosition = function (value) {
                if (value < 0) {
                    value = 0;
                }
                //正常化位置
                var t = value;
                var end = false;
                if (t >= this.duration) {
                    if (this.loop) {
                        t = t % this.duration;
                    }
                    else {
                        t = this.duration;
                        end = true;
                    }
                }
                if (t == this._prevPos) {
                    return end;
                }
                this.position = this._prevPos = t;
                this._prevPosition = value;
                if (this._target) {
                    if (end) {
                        //结束
                        this._updateTargetProps(null, 1);
                    }
                    else if (this._steps.length > 0) {
                        for (var i = 0, l = this._steps.length; i < l; i++) {
                            if (this._steps[i].t > t) {
                                break;
                            }
                        }
                        var step = this._steps[i - 1];
                        this._updateTargetProps(step, (this._stepPosition = t - step.t) / step.d);
                    }
                }
                if (end) {
                    this.setPaused(true);
                }
                this.dispatchEventWith("change");
                return end;
            };
            /**
             * @private
             *
             * @param startPos
             * @param endPos
             * @param includeStart
             */
            p._runActions = function (startPos, endPos, includeStart) {
                if (includeStart === void 0) { includeStart = false; }
                var sPos = startPos;
                var ePos = endPos;
                var i = -1;
                var j = this._actions.length;
                var k = 1;
                if (startPos > endPos) {
                    //把所有的倒置
                    sPos = endPos;
                    ePos = startPos;
                    i = j;
                    j = k = -1;
                }
                while ((i += k) != j) {
                    var action = this._actions[i];
                    var pos = action.t;
                    if (pos == ePos || (pos > sPos && pos < ePos) || (includeStart && pos == startPos)) {
                        action.f.apply(action.o, action.p);
                    }
                }
            };
            /**
             * @private
             *
             * @param step
             * @param ratio
             */
            p._updateTargetProps = function (step, ratio) {
                var p0, p1, v, v0, v1, arr;
                if (!step && ratio == 1) {
                    this.passive = false;
                    p0 = p1 = this._curQueueProps;
                }
                else {
                    this.passive = !!step.v;
                    //不更新props.
                    if (this.passive) {
                        return;
                    }
                    //使用ease
                    if (step.e) {
                        ratio = step.e(ratio, 0, 1, 1);
                    }
                    p0 = step.p0;
                    p1 = step.p1;
                }
                for (var n in this._initQueueProps) {
                    if ((v0 = p0[n]) == null) {
                        p0[n] = v0 = this._initQueueProps[n];
                    }
                    if ((v1 = p1[n]) == null) {
                        p1[n] = v1 = v0;
                    }
                    if (v0 == v1 || ratio == 0 || ratio == 1 || (typeof (v0) != "number")) {
                        v = ratio == 1 ? v1 : v0;
                    }
                    else {
                        v = v0 + (v1 - v0) * ratio;
                    }
                    var ignore = false;
                    if (arr = ScrollerTween._plugins[n]) {
                        for (var i = 0, l = arr.length; i < l; i++) {
                            var v2 = arr[i].tween(this, n, v, p0, p1, ratio, !!step && p0 == p1, !step);
                            if (v2 == ScrollerTween.IGNORE) {
                                ignore = true;
                            }
                            else {
                                v = v2;
                            }
                        }
                    }
                    if (!ignore) {
                        this._target[n] = v;
                    }
                }
            };
            /**
             * @language en_US
             * Whether setting is paused
             * @param value {boolean} Whether to pause
             * @returns ScrollerTween object itself
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 设置是否暂停
             * @param value {boolean} 是否暂停
             * @returns Tween对象本身
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.setPaused = function (value) {
                this.paused = value;
                ScrollerTween._register(this, !value);
                return this;
            };
            /**
             * @private
             *
             * @param props
             * @returns
             */
            p._cloneProps = function (props) {
                var o = {};
                for (var n in props) {
                    o[n] = props[n];
                }
                return o;
            };
            /**
             * @private
             *
             * @param o
             * @returns
             */
            p._addStep = function (o) {
                if (o.d > 0) {
                    this._steps.push(o);
                    o.t = this.duration;
                    this.duration += o.d;
                }
                return this;
            };
            /**
             * @private
             *
             * @param o
             * @returns
             */
            p._appendQueueProps = function (o) {
                var arr, oldValue, i, l, injectProps;
                for (var n in o) {
                    if (egret.sys.isUndefined(this._initQueueProps[n])) {
                        oldValue = this._target[n];
                        //设置plugins
                        if (arr = ScrollerTween._plugins[n]) {
                            for (i = 0, l = arr.length; i < l; i++) {
                                oldValue = arr[i].init(this, n, oldValue);
                            }
                        }
                        this._initQueueProps[n] = this._curQueueProps[n] = (oldValue === undefined) ? null : oldValue;
                    }
                    else {
                        oldValue = this._curQueueProps[n];
                    }
                }
                for (var n in o) {
                    oldValue = this._curQueueProps[n];
                    if (arr = ScrollerTween._plugins[n]) {
                        injectProps = injectProps || {};
                        for (i = 0, l = arr.length; i < l; i++) {
                            if (arr[i].step) {
                                arr[i].step(this, n, oldValue, o[n], injectProps);
                            }
                        }
                    }
                    this._curQueueProps[n] = o[n];
                }
                if (injectProps) {
                    this._appendQueueProps(injectProps);
                }
                return this._curQueueProps;
            };
            /**
             * @private
             *
             * @param o
             * @returns
             */
            p._addAction = function (o) {
                o.t = this.duration;
                this._actions.push(o);
                return this;
            };
            /**
             * @language en_US
             * Modify the property of the specified display object to a specified value
             * @param props {Object} Property set of an object
             * @param duration {number} Duration
             * @param ease {egret.ScrollerEase} Easing algorithm
             * @returns {egret.ScrollerTween} ScrollerTween object itself
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 将指定显示对象的属性修改为指定值
             * @param props {Object} 对象的属性集合
             * @param duration {number} 持续时间
             * @param ease {egret.ScrollerEase} 缓动算法
             * @returns {egret.ScrollerTween} Tween对象本身
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.to = function (props, duration, ease) {
                if (ease === void 0) { ease = undefined; }
                if (isNaN(duration) || duration < 0) {
                    duration = 0;
                }
                return this._addStep({ d: duration || 0, p0: this._cloneProps(this._curQueueProps), e: ease, p1: this._cloneProps(this._appendQueueProps(props)) });
            };
            /**
             * @language en_US
             * Execute callback function
             * @param callback {Function} Callback method
             * @param thisObj {any} this action scope of the callback method
             * @param params {Array<any>} Parameter of the callback method
             * @returns {egret.ScrollerTween} ScrollerTween object itself
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 执行回调函数
             * @param callback {Function} 回调方法
             * @param thisObj {any} 回调方法this作用域
             * @param params {Array<any>} 回调方法参数
             * @returns {egret.ScrollerTween} Tween对象本身
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.call = function (callback, thisObj, params) {
                if (thisObj === void 0) { thisObj = undefined; }
                if (params === void 0) { params = undefined; }
                return this._addAction({ f: callback, p: params ? params : [], o: thisObj ? thisObj : this._target });
            };
            /**
             * @method egret.ScrollerTween#tick
             * @param delta {number}
             * @private
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.tick = function (delta) {
                if (this.paused) {
                    return;
                }
                this.setPosition(this._prevPosition + delta);
            };
            /**
             * @private
             */
            ScrollerTween._tweens = [];
            /**
             * @private
             */
            ScrollerTween.IGNORE = {};
            /**
             * @private
             */
            ScrollerTween._plugins = {};
            /**
             * @private
             */
            ScrollerTween._inited = false;
            ScrollerTween._lastTime = 0;
            return ScrollerTween;
        })(egret.EventDispatcher);
        gui.ScrollerTween = ScrollerTween;
        egret.registerClass(ScrollerTween,"egret.gui.ScrollerTween");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @private
         */
        var ScrollerViewProperties = (function () {
            function ScrollerViewProperties() {
                /**
                 * @private
                 */
                this._verticalScrollPolicy = "auto";
                /**
                 * @private
                 */
                this._horizontalScrollPolicy = "auto";
                /**
                 * @private
                 */
                this._scrollLeft = 0;
                /**
                 * @private
                 */
                this._scrollTop = 0;
                /**
                 * @private
                 */
                this._hCanScroll = false;
                /**
                 * @private
                 */
                this._vCanScroll = false;
                /**
                 * @private
                 */
                this._lastTouchPosition = new egret.Point(0, 0);
                /**
                 * @private
                 */
                this._touchStartPosition = new egret.Point(0, 0);
                /**
                 * @private
                 */
                this._scrollStarted = false;
                /**
                 * @private
                 */
                this._lastTouchTime = 0;
                /**
                 * @private
                 */
                this._lastTouchEvent = null;
                /**
                 * @private
                 */
                this._velocitys = [];
                /**
                 * @private
                 */
                this._isHTweenPlaying = false;
                /**
                 * @private
                 */
                this._isVTweenPlaying = false;
                /**
                 * @private
                 */
                this._hScrollTween = null;
                /**
                 * @private
                 */
                this._vScrollTween = null;
                /**
                 * @private
                 */
                this._bounces = true;
            }
            var d = __define,c=ScrollerViewProperties;p=c.prototype;
            return ScrollerViewProperties;
        })();
        gui.ScrollerViewProperties = ScrollerViewProperties;
        egret.registerClass(ScrollerViewProperties,"egret.gui.ScrollerViewProperties");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.DefaultAssetAdapter
         * @classdesc
         * 默认的IAssetAdapter接口实现
         * @implements egret.gui.IAssetAdapter
         */
        var DefaultAssetAdapter = (function () {
            /**
             * 构造函数
             * @method egret.gui.DefaultSkinAdapter#constructor
             */
            function DefaultAssetAdapter() {
            }
            var d = __define,c=DefaultAssetAdapter;p=c.prototype;
            /**
             * 解析素材
             * @method egret.gui.DefaultAssetAdapter#getAsset
             * @param source {any} 待解析的新素材标识符
             * @param compFunc {Function} 解析完成回调函数，示例：compFunc(content:any,source:any):void;
             * 回调参数content接受两种类型：DisplayObject或Texture。
             * @param thisObject {any} compFunc的this引用
             * @param oldContent any 旧的内容对象,传入值有可能为null。
             * 对于某些类型素材，例如MovieClip，可以重用传入的显示对象,只修改其数据再返回。
             */
            p.getAsset = function (source, compFunc, thisObject, oldContent) {
                var content = source;
                if (source.prototype) {
                    content = new source();
                }
                if (content instanceof egret.DisplayObject || content instanceof egret.Texture) {
                    compFunc.call(thisObject, content, source);
                }
                else if (typeof (source) == "string") {
                    var url = source;
                    var loader = new egret.ImageLoader();
                    loader.addEventListener(egret.Event.COMPLETE, function (event) {
                        content = new egret.Texture();
                        content._setBitmapData(loader.data);
                        compFunc.call(thisObject, content, source);
                    }, this);
                    loader.load(url);
                }
                else {
                    compFunc.call(thisObject, content, source);
                }
            };
            return DefaultAssetAdapter;
        })();
        gui.DefaultAssetAdapter = DefaultAssetAdapter;
        egret.registerClass(DefaultAssetAdapter,"egret.gui.DefaultAssetAdapter",["egret.gui.IAssetAdapter"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.DefaultSkinAdapter
         * @classdesc
         * 默认的ISkinAdapter接口实现
         * @implements egret.gui.ISkinAdapter
         */
        var DefaultSkinAdapter = (function () {
            /**
             * 构造函数
             * @method egret.gui.DefaultSkinAdapter#constructor
             */
            function DefaultSkinAdapter() {
            }
            var d = __define,c=DefaultSkinAdapter;p=c.prototype;
            /**
             * 获取皮肤显示对象
             * @method egret.gui.ISkinAdapter#getSkin
             * @param skinName {any} 待解析的皮肤标识符
             * @param hostComponentKey {string} 主机组件标识符
             * @returns {any} 皮肤对象实例
             */
            p.getSkin = function (skinName, hostComponentKey) {
                if (!skinName)
                    return null;
                if (skinName.prototype) {
                    return new skinName();
                }
                else if (typeof (skinName) == "string") {
                    var clazz = egret.getDefinitionByName(skinName);
                    if (clazz) {
                        return new clazz();
                    }
                    else {
                        return null;
                    }
                }
                else {
                    return skinName;
                }
            };
            return DefaultSkinAdapter;
        })();
        gui.DefaultSkinAdapter = DefaultSkinAdapter;
        egret.registerClass(DefaultSkinAdapter,"egret.gui.DefaultSkinAdapter",["egret.gui.ISkinAdapter"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.DropDownController
         * @classdesc
         * 用于处理因用户交互而打开和关闭下拉列表的操作的控制器
         * @extends egret.EventDispatcher
         */
        var DropDownController = (function (_super) {
            __extends(DropDownController, _super);
            /**
             * 构造函数
             * @method egret.gui.DropDownController#constructor
             */
            function DropDownController() {
                _super.call(this);
                /**
                 * 鼠标按下标志
                 */
                this.mouseIsDown = false;
                this._openButton = null;
                this._dropDown = null;
                this._isOpen = false;
                this._closeOnResize = true;
                this._rollOverOpenDelay = NaN;
                this.rollOverOpenDelayTimer = null;
            }
            var d = __define,c=DropDownController;p=c.prototype;
            d(p, "openButton"
                /**
                 * 下拉按钮实例
                 * @member egret.gui.DropDownController#openButton
                 */
                ,function () {
                    return this._openButton;
                }
                ,function (value) {
                    if (this._openButton === value)
                        return;
                    this.removeOpenTriggers();
                    this._openButton = value;
                    this.addOpenTriggers();
                }
            );
            d(p, "dropDown"
                /**
                 * 下拉区域显示对象
                 * @member egret.gui.DropDownController#dropDown
                 */
                ,function () {
                    return this._dropDown;
                }
                ,function (value) {
                    if (this._dropDown === value)
                        return;
                    this._dropDown = value;
                }
            );
            d(p, "isOpen"
                /**
                 * 下拉列表已经打开的标志
                 * @member egret.gui.DropDownController#isOpen
                 */
                ,function () {
                    return this._isOpen;
                }
            );
            d(p, "closeOnResize"
                /**
                 * 如果为 true，则在调整舞台大小时会关闭下拉列表。
                 * @member egret.gui.DropDownController#closeOnResize
                 */
                ,function () {
                    return this._closeOnResize;
                }
                ,function (value) {
                    if (this._closeOnResize == value)
                        return;
                    if (this.isOpen)
                        this.removeCloseOnResizeTrigger();
                    this._closeOnResize = value;
                    this.addCloseOnResizeTrigger();
                }
            );
            d(p, "rollOverOpenDelay"
                /**
                 * 指定滑过锚点按钮时打开下拉列表要等待的延迟（以毫秒为单位）。
                 * 如果设置为 NaN，则下拉列表会在单击时打开，而不是在滑过时打开。默认值NaN
                 * @member egret.gui.DropDownController#rollOverOpenDelay
                 */
                ,function () {
                    return this._rollOverOpenDelay;
                }
                ,function (value) {
                    if (this._rollOverOpenDelay == value)
                        return;
                    this.removeOpenTriggers();
                    this._rollOverOpenDelay = value;
                    this.addOpenTriggers();
                }
            );
            /**
             * 添加触发下拉列表打开的事件监听
             */
            p.addOpenTriggers = function () {
                if (this.openButton) {
                    if (isNaN(this.rollOverOpenDelay))
                        this.openButton.addEventListener(gui.UIEvent.BUTTON_DOWN, this._openButton_buttonDownHandler, this);
                    else
                        this.openButton.addEventListener(egret.TouchEvent.TOUCH_ROLL_OVER, this._openButton_rollOverHandler, this);
                }
            };
            /**
             * 移除触发下拉列表打开的事件监听
             */
            p.removeOpenTriggers = function () {
                if (this.openButton) {
                    if (isNaN(this.rollOverOpenDelay))
                        this.openButton.removeEventListener(gui.UIEvent.BUTTON_DOWN, this._openButton_buttonDownHandler, this);
                    else
                        this.openButton.removeEventListener(egret.TouchEvent.TOUCH_ROLL_OVER, this._openButton_rollOverHandler, this);
                }
            };
            /**
             * 添加触发下拉列表关闭的事件监听
             */
            p.addCloseTriggers = function () {
                if (gui.UIGlobals.stage) {
                    if (isNaN(this.rollOverOpenDelay)) {
                        gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.stage_mouseDownHandler, this);
                        gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler_noRollOverOpenDelay, this);
                    }
                    else {
                        gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this);
                    }
                    this.addCloseOnResizeTrigger();
                }
            };
            /**
             * 移除触发下拉列表关闭的事件监听
             */
            p.removeCloseTriggers = function () {
                if (gui.UIGlobals.stage) {
                    if (isNaN(this.rollOverOpenDelay)) {
                        gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.stage_mouseDownHandler, this);
                        gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler_noRollOverOpenDelay, this);
                    }
                    else {
                        gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this);
                        gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                        gui.UIGlobals.stage.removeEventListener(egret.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this);
                    }
                    this.removeCloseOnResizeTrigger();
                }
            };
            /**
             * 添加舞台尺寸改变的事件监听
             */
            p.addCloseOnResizeTrigger = function () {
                if (this.closeOnResize)
                    gui.UIGlobals.stage.addEventListener(egret.Event.RESIZE, this.stage_resizeHandler, this);
            };
            /**
             * 移除舞台尺寸改变的事件监听
             */
            p.removeCloseOnResizeTrigger = function () {
                if (this.closeOnResize)
                    gui.UIGlobals.stage.removeEventListener(egret.Event.RESIZE, this.stage_resizeHandler, this);
            };
            /**
             * 检查鼠标是否在DropDown或者openButton区域内。
             */
            p.isTargetOverDropDownOrOpenButton = function (target) {
                if (target) {
                    if (this.openButton && this.openButton.contains(target))
                        return true;
                    if (this.hitAreaAdditions != null) {
                        for (var i = 0; i < this.hitAreaAdditions.length; i++) {
                            if (this.hitAreaAdditions[i] == target || ((this.hitAreaAdditions[i] instanceof egret.DisplayObjectContainer) && (this.hitAreaAdditions[i]).contains(target)))
                                return true;
                        }
                    }
                    if (this.dropDown instanceof egret.DisplayObjectContainer) {
                        if ((this.dropDown).contains(target))
                            return true;
                    }
                    else {
                        if (target == this.dropDown)
                            return true;
                    }
                }
                return false;
            };
            /**
             * 打开下拉列表
             * @method egret.gui.DropDownController#openDropDown
             */
            p.openDropDown = function () {
                this.openDropDownHelper();
            };
            /**
             * 执行打开下拉列表
             */
            p.openDropDownHelper = function () {
                if (!this.isOpen) {
                    this.addCloseTriggers();
                    this._isOpen = true;
                    if (this.openButton)
                        this.openButton._setKeepDown(true);
                    gui.UIEvent.dispatchUIEvent(this, gui.UIEvent.OPEN);
                }
            };
            /**
             * 关闭下拉列表
             * @method egret.gui.DropDownController#closeDropDown
             * @param commit {boolean}
             */
            p.closeDropDown = function (commit) {
                if (this.isOpen) {
                    this._isOpen = false;
                    if (this.openButton)
                        this.openButton._setKeepDown(false);
                    var dde = new gui.UIEvent(gui.UIEvent.CLOSE, false, true);
                    if (!commit)
                        dde.preventDefault();
                    this.dispatchEvent(dde);
                    this.removeCloseTriggers();
                }
            };
            /**
             * openButton上按下鼠标事件
             * @method egret.gui.DropDownController#_openButton_buttonDownHandler
             * @param event {Event}
             */
            p._openButton_buttonDownHandler = function (event) {
                if (this.isOpen)
                    this.closeDropDown(true);
                else {
                    this.mouseIsDown = true;
                    this.openDropDownHelper();
                }
            };
            /**
             * openButton上鼠标经过事件
             * @method egret.gui.DropDownController#_openButton_rollOverHandler
             * @param event {TouchEvent}
             */
            p._openButton_rollOverHandler = function (event) {
                if (this.rollOverOpenDelay == 0)
                    this.openDropDownHelper();
                else {
                    this.openButton.addEventListener(egret.TouchEvent.TOUCH_ROLL_OUT, this.openButton_rollOutHandler, this);
                    this.rollOverOpenDelayTimer = new egret.Timer(this.rollOverOpenDelay, 1);
                    this.rollOverOpenDelayTimer.addEventListener(egret.TimerEvent.TIMER_COMPLETE, this.rollOverDelay_timerCompleteHandler, this);
                    this.rollOverOpenDelayTimer.start();
                }
            };
            /**
             * openButton上鼠标移出事件
             */
            p.openButton_rollOutHandler = function (event) {
                if (this.rollOverOpenDelayTimer && this.rollOverOpenDelayTimer.running) {
                    this.rollOverOpenDelayTimer.stop();
                    this.rollOverOpenDelayTimer = null;
                }
                this.openButton.removeEventListener(egret.TouchEvent.TOUCH_ROLL_OUT, this.openButton_rollOutHandler, this);
            };
            /**
             * 到达鼠标移入等待延迟打开的时间。
             */
            p.rollOverDelay_timerCompleteHandler = function (event) {
                this.openButton.removeEventListener(egret.TouchEvent.TOUCH_ROLL_OUT, this.openButton_rollOutHandler, this);
                this.rollOverOpenDelayTimer = null;
                this.openDropDownHelper();
            };
            /**
             * 舞台上鼠标按下事件
             * @method egret.gui.DropDownController#stage_mouseDownHandler
             * @param event {Event}
             */
            p.stage_mouseDownHandler = function (event) {
                if (this.mouseIsDown) {
                    this.mouseIsDown = false;
                    return;
                }
                if (!this.dropDown || (this.dropDown && (event.target == this.dropDown || (this.dropDown instanceof egret.DisplayObjectContainer && !(this.dropDown).contains((event.target)))))) {
                    var target = (event.target);
                    if (this.openButton && target && this.openButton.contains(target))
                        return;
                    if (this.hitAreaAdditions != null) {
                        for (var i = 0; i < this.hitAreaAdditions.length; i++) {
                            if (this.hitAreaAdditions[i] == event.target || ((this.hitAreaAdditions[i] instanceof egret.DisplayObjectContainer) && (this.hitAreaAdditions[i]).contains((event.target))))
                                return;
                        }
                    }
                    this.closeDropDown(true);
                }
            };
            /**
             * 舞台上鼠标移动事件
             * @method egret.gui.DropDownController#stage_mouseMoveHandler
             * @param event {Event}
             */
            p.stage_mouseMoveHandler = function (event) {
                var target = (event.target);
                var containedTarget = this.isTargetOverDropDownOrOpenButton(target);
                if (containedTarget)
                    return;
                if (event instanceof egret.TouchEvent && event.touchDown) {
                    gui.UIGlobals.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                    gui.UIGlobals.stage.addEventListener(egret.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this);
                    return;
                }
                this.closeDropDown(true);
            };
            /**
             * 舞台上鼠标弹起事件
             * @method egret.gui.DropDownController#stage_mouseUpHandler_noRollOverOpenDelay
             * @param event {Event}
             */
            p.stage_mouseUpHandler_noRollOverOpenDelay = function (event) {
                if (this.mouseIsDown) {
                    this.mouseIsDown = false;
                    return;
                }
            };
            /**
             * 舞台上鼠标弹起事件
             * @method egret.gui.DropDownController#stage_mouseUpHandler
             * @param event {Event}
             */
            p.stage_mouseUpHandler = function (event) {
                var target = (event.target);
                var containedTarget = this.isTargetOverDropDownOrOpenButton(target);
                if (containedTarget) {
                    gui.UIGlobals.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                    gui.UIGlobals.stage.removeEventListener(egret.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this);
                    return;
                }
                this.closeDropDown(true);
            };
            /**
             * 舞台尺寸改变事件
             * @method egret.gui.DropDownController#stage_resizeHandler
             * @param event {Event}
             */
            p.stage_resizeHandler = function (event) {
                this.closeDropDown(true);
            };
            /**
             * 舞台上鼠标滚轮事件
             */
            p.stage_mouseWheelHandler = function (event) {
                if (this.dropDown && !((this.dropDown).contains((event.target)) && event.isDefaultPrevented()))
                    this.closeDropDown(false);
            };
            return DropDownController;
        })(egret.EventDispatcher);
        gui.DropDownController = DropDownController;
        egret.registerClass(DropDownController,"egret.gui.DropDownController");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SkinBasicLayout
         * @classdesc
         * 皮肤简单布局类。
         * @extends egret.HashObject
         */
        var SkinBasicLayout = (function (_super) {
            __extends(SkinBasicLayout, _super);
            /**
             * 构造函数
             * @method egret.gui.SkinBasicLayout#constructor
             */
            function SkinBasicLayout() {
                _super.call(this);
                this._target = null;
            }
            var d = __define,c=SkinBasicLayout;p=c.prototype;
            d(p, "target"
                /**
                 * 目标布局对象
                 * @member egret.gui.SkinBasicLayout#target
                 */
                ,function () {
                    return this._target;
                }
                ,function (value) {
                    this._target = value;
                }
            );
            /**
             * 测量组件尺寸大小
             * @method egret.gui.SkinBasicLayout#measure
             */
            p.measure = function () {
                if (this.target == null)
                    return;
                var measureW = 0;
                var measureH = 0;
                var target = this._target;
                var count = target.numElements;
                for (var i = 0; i < count; i++) {
                    var layoutElement = target.getElementAt(i);
                    if (!layoutElement || !layoutElement.includeInLayout)
                        continue;
                    var hCenter = layoutElement.horizontalCenter;
                    var vCenter = layoutElement.verticalCenter;
                    var left = layoutElement.left;
                    var right = layoutElement.right;
                    var top = layoutElement.top;
                    var bottom = layoutElement.bottom;
                    var extX;
                    var extY;
                    if (!isNaN(left) && !isNaN(right)) {
                        extX = left + right;
                    }
                    else if (!isNaN(hCenter)) {
                        extX = Math.abs(hCenter) * 2;
                    }
                    else if (!isNaN(left) || !isNaN(right)) {
                        extX = isNaN(left) ? 0 : left;
                        extX += isNaN(right) ? 0 : right;
                    }
                    else {
                        extX = layoutElement.preferredX;
                    }
                    if (!isNaN(top) && !isNaN(bottom)) {
                        extY = top + bottom;
                    }
                    else if (!isNaN(vCenter)) {
                        extY = Math.abs(vCenter) * 2;
                    }
                    else if (!isNaN(top) || !isNaN(bottom)) {
                        extY = isNaN(top) ? 0 : top;
                        extY += isNaN(bottom) ? 0 : bottom;
                    }
                    else {
                        extY = layoutElement.preferredY;
                    }
                    var preferredWidth = layoutElement.preferredWidth;
                    var preferredHeight = layoutElement.preferredHeight;
                    measureW = Math.ceil(Math.max(measureW, extX + preferredWidth));
                    measureH = Math.ceil(Math.max(measureH, extY + preferredHeight));
                }
                this.target.measuredWidth = measureW;
                this.target.measuredHeight = measureH;
            };
            /**
             * 更新显示列表
             * @method egret.gui.SkinBasicLayout#updateDisplayList
             * @param unscaledWidth {number}
             * @param unscaledHeight {number}
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                if (this.target == null)
                    return;
                var count = this.target.numElements;
                for (var i = 0; i < count; i++) {
                    var layoutElement = this.target.getElementAt(i);
                    if (layoutElement == null || !layoutElement.includeInLayout)
                        continue;
                    var hCenter = layoutElement.horizontalCenter;
                    var vCenter = layoutElement.verticalCenter;
                    var left = layoutElement.left;
                    var right = layoutElement.right;
                    var top = layoutElement.top;
                    var bottom = layoutElement.bottom;
                    var percentWidth = layoutElement.percentWidth;
                    var percentHeight = layoutElement.percentHeight;
                    var childWidth = NaN;
                    var childHeight = NaN;
                    if (!isNaN(left) && !isNaN(right)) {
                        childWidth = unscaledWidth - right - left;
                    }
                    else if (!isNaN(percentWidth)) {
                        childWidth = Math.round(unscaledWidth * Math.min(percentWidth * 0.01, 1));
                    }
                    if (!isNaN(top) && !isNaN(bottom)) {
                        childHeight = unscaledHeight - bottom - top;
                    }
                    else if (!isNaN(percentHeight)) {
                        childHeight = Math.round(unscaledHeight * Math.min(percentHeight * 0.01, 1));
                    }
                    layoutElement.setLayoutBoundsSize(childWidth, childHeight);
                    var elementWidth = layoutElement.layoutBoundsWidth;
                    var elementHeight = layoutElement.layoutBoundsHeight;
                    var childX = NaN;
                    var childY = NaN;
                    if (!isNaN(hCenter))
                        childX = Math.round((unscaledWidth - elementWidth) / 2 + hCenter);
                    else if (!isNaN(left))
                        childX = left;
                    else if (!isNaN(right))
                        childX = unscaledWidth - elementWidth - right;
                    else
                        childX = layoutElement.layoutBoundsX;
                    if (!isNaN(vCenter))
                        childY = Math.round((unscaledHeight - elementHeight) / 2 + vCenter);
                    else if (!isNaN(top))
                        childY = top;
                    else if (!isNaN(bottom))
                        childY = unscaledHeight - elementHeight - bottom;
                    else
                        childY = layoutElement.layoutBoundsY;
                    layoutElement.setLayoutBoundsPosition(childX, childY);
                }
            };
            return SkinBasicLayout;
        })(egret.HashObject);
        gui.SkinBasicLayout = SkinBasicLayout;
        egret.registerClass(SkinBasicLayout,"egret.gui.SkinBasicLayout");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        var Theme = (function () {
            /**
             * 构造函数
             * @method egret.gui.PopUpManager#constructor
             */
            function Theme(configURL) {
                this.skinMap = {};
                this.delyList = [];
                this.loadConfig(configURL);
            }
            var d = __define,c=Theme;p=c.prototype;
            Theme.load = function (configURL) {
                if (this.initialized) {
                    return;
                }
                this.initialized = true;
                gui.SkinnableComponent._defaultTheme = new Theme(configURL);
            };
            p.loadConfig = function (configURL) {
                this._configURL = configURL;
                var loader = new egret.HttpRequest();
                loader.addEventListener(egret.Event.COMPLETE, this.onLoadComplete, this);
                loader.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onLoadError, this);
                loader.responseType = egret.HttpResponseType.TEXT;
                loader.open(configURL);
                loader.send();
            };
            p.onLoadComplete = function (event) {
                var loader = (event.target);
                try {
                    var str = loader.response;
                    var data = JSON.parse(str);
                    this.skinMap = data.skins;
                }
                catch (e) {
                    egret.$warn(1017, this._configURL, loader.response);
                }
                this.handleDelyList();
            };
            p.onLoadError = function (event) {
                var loader = (event.target);
                egret.$warn(3000, this._configURL);
                this.handleDelyList();
            };
            p.handleDelyList = function () {
                if (!this.skinMap) {
                    this.skinMap = {};
                    this.delyList = [];
                    return;
                }
                var list = this.delyList;
                this.delyList = [];
                var length = list.length;
                for (var i = 0; i < length; i++) {
                    var client = list[i];
                    if (!client._skin) {
                        var skin = this.getDefaultSkin(client);
                        client._setSkin(skin);
                    }
                }
            };
            p.getDefaultSkin = function (client) {
                var skinMap = this.skinMap;
                if (!skinMap) {
                    if (this.delyList.indexOf(client) == -1) {
                        this.delyList.push(client);
                    }
                    return null;
                }
                var skinName;
                var hostKey = client.hostComponentKey;
                if (hostKey) {
                    skinName = skinMap[hostKey];
                }
                else {
                    var superClass = client;
                    while (superClass) {
                        hostKey = egret.getQualifiedClassName(superClass);
                        skinName = skinMap[hostKey];
                        if (skinName) {
                            break;
                        }
                        superClass = egret.getDefinitionByName(egret.getQualifiedSuperclassName(superClass));
                    }
                }
                if (!skinName) {
                    return null;
                }
                var skinClass = egret.getDefinitionByName(skinName);
                if (!skinClass) {
                    egret.$warn(3001, skinName);
                    return null;
                }
                return new skinClass();
            };
            Theme.initialized = false;
            return Theme;
        })();
        gui.Theme = Theme;
        egret.registerClass(Theme,"egret.gui.Theme");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        var NavigationUnit = (function () {
            function NavigationUnit() {
            }
            var d = __define,c=NavigationUnit;p=c.prototype;
            NavigationUnit.DOWN = 40;
            NavigationUnit.END = 35;
            NavigationUnit.HOME = 36;
            NavigationUnit.LEFT = 37;
            NavigationUnit.PAGE_DOWN = 34;
            NavigationUnit.PAGE_LEFT = 0x2397;
            NavigationUnit.PAGE_RIGHT = 0x2398;
            NavigationUnit.PAGE_UP = 33;
            NavigationUnit.RIGHT = 39;
            NavigationUnit.UP = 38;
            return NavigationUnit;
        })();
        gui.NavigationUnit = NavigationUnit;
        egret.registerClass(NavigationUnit,"egret.gui.NavigationUnit");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.PopUpPosition
         * @classdesc
         * 定义弹出位置的常量值。
         * 该常量决定目标对象相对于父级组件的弹出位置。
         */
        var PopUpPosition = (function () {
            function PopUpPosition() {
            }
            var d = __define,c=PopUpPosition;p=c.prototype;
            /**
             * 在组件上方弹出
             * @constant egret.gui.PopUpPosition.ABOVE
             */
            PopUpPosition.ABOVE = "above";
            /**
             * 在组件下方弹出
             * @constant egret.gui.PopUpPosition.BELOW
             */
            PopUpPosition.BELOW = "below";
            /**
             * 在组件中心弹出
             * @constant egret.gui.PopUpPosition.CENTER
             */
            PopUpPosition.CENTER = "center";
            /**
             * 在组件左上角弹出
             * @constant egret.gui.PopUpPosition.TOP_LEFT
             */
            PopUpPosition.TOP_LEFT = "topLeft";
            /**
             * 在组件左边弹出
             * @constant egret.gui.PopUpPosition.LEFT
             */
            PopUpPosition.LEFT = "left";
            /**
             * 在组件右边弹出
             * @constant egret.gui.PopUpPosition.RIGHT
             */
            PopUpPosition.RIGHT = "right";
            /**
             * 在屏幕中心弹出
             * @constant egret.gui.PopUpPosition.SCREEN_CENTER
             */
            PopUpPosition.SCREEN_CENTER = "screenCenter";
            return PopUpPosition;
        })();
        gui.PopUpPosition = PopUpPosition;
        egret.registerClass(PopUpPosition,"egret.gui.PopUpPosition");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ScrollPolicy
         * @classdesc
         * 滚动条显示策略常量
         */
        var ScrollPolicy = (function () {
            function ScrollPolicy() {
            }
            var d = __define,c=ScrollPolicy;p=c.prototype;
            /**
             * 如果子项超出父级的尺寸，则允许滚动，反之不允许滚动。
             * @constant egret.gui.ScrollPolicy.AUTO
             */
            ScrollPolicy.AUTO = "auto";
            /**
             * 从不允许滚动。
             * @constant egret.gui.ScrollPolicy.OFF
             */
            ScrollPolicy.OFF = "off";
            /**
             * 总是允许滚动。
             * @constant egret.gui.ScrollPolicy.ON
             */
            ScrollPolicy.ON = "on";
            return ScrollPolicy;
        })();
        gui.ScrollPolicy = ScrollPolicy;
        egret.registerClass(ScrollPolicy,"egret.gui.ScrollPolicy");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * UIStage的虚拟子容器
         */
        var UILayer = (function () {
            /**
             * 构造函数
             * @param owner {IUIStage}
             * @param lowerBoundReference {string}
             * @param upperBoundReference {strin}
             */
            function UILayer(owner, lowerBoundReference, upperBoundReference) {
                /**
                 * 实体容器
                 */
                this.owner = null;
                /**
                 * 容器下边界属性
                 */
                this.lowerBoundReference = null;
                /**
                 * 容器上边界属性
                 */
                this.upperBoundReference = null;
                this.raw_getElementAt = "raw_getElementAt";
                this.raw_addElementAt = "raw_addElementAt";
                this.raw_getElementIndex = "raw_getElementIndex";
                this.raw_removeElement = "raw_removeElement";
                this.raw_removeElementAt = "raw_removeElementAt";
                this.raw_setElementIndex = "raw_setElementIndex";
                this.owner = owner;
                this.lowerBoundReference = lowerBoundReference;
                this.upperBoundReference = upperBoundReference;
            }
            var d = __define,c=UILayer;p=c.prototype;
            d(p, "numElements"
                ,function () {
                    return this.owner[this.upperBoundReference] - this.owner[this.lowerBoundReference];
                }
            );
            /**
             * 返回指定索引处的可视元素
             * @param index
             * @returns {IVisualElement}
             */
            p.getElementAt = function (index) {
                var retval = this.owner[this.raw_getElementAt](this.owner[this.lowerBoundReference] + index);
                return retval;
            };
            /**
             * 将可视元素添加到此容器中
             * @param element
             * @returns {IVisualElement}
             */
            p.addElement = function (element) {
                var index = this.owner[this.upperBoundReference];
                if (element.parent === this.owner)
                    index--;
                this.owner[this.upperBoundReference]++;
                this.owner[this.raw_addElementAt](element, index);
                element.ownerChanged(this);
                return element;
            };
            /**
             * 将可视元素添加到此容器中
             * @param element
             * @param index
             * @returns {IVisualElement}
             */
            p.addElementAt = function (element, index) {
                this.owner[this.upperBoundReference]++;
                this.owner[this.raw_addElementAt](element, this.owner[this.lowerBoundReference] + index);
                element.ownerChanged(this);
                return element;
            };
            /**
             * 从此容器的子列表中删除指定的可视元素
             * @param element
             * @returns {IVisualElement}
             */
            p.removeElement = function (element) {
                var index = this.owner[this.raw_getElementIndex](element);
                if (this.owner[this.lowerBoundReference] <= index && index < this.owner[this.upperBoundReference]) {
                    this.owner[this.raw_removeElement](element);
                    this.owner[this.upperBoundReference]--;
                }
                element.ownerChanged(null);
                return element;
            };
            /**
             * 从容器中的指定索引位置删除可视元素
             * @param index
             * @returns {IVisualElement}
             */
            p.removeElementAt = function (index) {
                index += this.owner[this.lowerBoundReference];
                var element;
                if (this.owner[this.lowerBoundReference] <= index && index < this.owner[this.upperBoundReference]) {
                    element = this.owner[this.raw_removeElementAt](index);
                    this.owner[this.upperBoundReference]--;
                }
                element.ownerChanged(null);
                return element;
            };
            /**
             * 返回可视元素的索引位置
             * @param element
             * @returns {number}
             */
            p.getElementIndex = function (element) {
                var retval = this.owner[this.raw_getElementIndex](element);
                retval -= this.owner[this.lowerBoundReference];
                return retval;
            };
            /**
             * 在可视容器中更改现有可视元素的位置
             * @param element
             * @param index
             */
            p.setElementIndex = function (element, index) {
                this.owner[this.raw_setElementIndex](element, this.owner[this.lowerBoundReference] + index);
            };
            return UILayer;
        })();
        gui.UILayer = UILayer;
        egret.registerClass(UILayer,"egret.gui.UILayer",["egret.gui.IContainer"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.UIStage
         * @classdesc
         * 系统管理器，应用程序顶级容器。
         * 通常情况下，一个程序应该只含有唯一的系统管理器,并且所有的组件都包含在它内部。
         * 它负责管理弹窗，鼠标样式，工具提示的显示层级，以及过滤鼠标和键盘事件为可以取消的。
         * @extends egret.gui.Group
         * @implements egret.gui.IUIStage
         */
        var UIStage = (function (_super) {
            __extends(UIStage, _super);
            /**
             * 构造函数
             * @method egret.gui.UIStage#constructor
             */
            function UIStage() {
                _super.call(this);
                this._autoResize = true;
                this._popUpContainer = null;
                this._toolTipContainer = null;
                this._cursorContainer = null;
                this._noTopMostIndex = 0;
                this._topMostIndex = 0;
                this._toolTipIndex = 0;
                this._cursorIndex = 0;
                this.touchEnabled = false;
                this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
                this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this);
            }
            var d = __define,c=UIStage;p=c.prototype;
            /**
             * 添加到舞台
             */
            p.onAddToStage = function (event) {
                if (event === void 0) { event = null; }
                if (gui.UIGlobals._uiStage) {
                    egret.$error(3013);
                }
                gui.UIGlobals._uiStage = this;
                if (this._autoResize) {
                    this.stage.addEventListener(egret.Event.RESIZE, this.onResize, this);
                    this.onResize();
                }
            };
            /**
             * 从舞台移除
             */
            p.onRemoveFromStage = function (event) {
                gui.UIGlobals._uiStage = null;
                if (this._autoResize) {
                    this.stage.removeEventListener(egret.Event.RESIZE, this.onResize, this);
                }
            };
            /**
             * 舞台尺寸改变
             */
            p.onResize = function (event) {
                if (event === void 0) { event = null; }
                this.$setWidth(this.stage.stageWidth);
                this.$setHeight(this.stage.stageHeight);
            };
            d(p, "autoResize"
                /**
                 * 是否自动跟随舞台缩放。当此属性为true时，将强制让UIState始终与舞台保持相同大小。
                 * 反之需要外部手动同步大小。默认值为true。
                 * @member egret.gui.UIStage#autoResize
                 */
                ,function () {
                    return this._autoResize;
                }
                ,function (value) {
                    if (this._autoResize == value)
                        return;
                    this._autoResize = value;
                    if (!this.stage)
                        return;
                    if (this._autoResize) {
                        this.stage.addEventListener(egret.Event.RESIZE, this.onResize, this);
                        this.onResize();
                    }
                    else {
                        this.stage.removeEventListener(egret.Event.RESIZE, this.onResize, this);
                    }
                }
            );
            d(p, "x"
                //==========================================================================
                //                            禁止外部布局顶级容器
                //==========================================================================
                /**
                 * @constant egret.gui.UIStage#x
                 */
                ,function () {
                    return this.$getX();
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (this._autoResize)
                        return;
                    this.$setX(value);
                }
            );
            d(p, "y"
                /**
                 * @constant egret.gui.UIStage#y
                 */
                ,function () {
                    return this.$getY();
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (this._autoResize)
                        return;
                    this.$setY(value);
                }
            );
            d(p, "width"
                /**
                 * @member egret.gui.UIStage#width
                 */
                ,function () {
                    return this._UIC_Props_._uiWidth;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (this._autoResize)
                        return;
                    this.$setWidth(value);
                }
            );
            d(p, "height"
                /**
                 * @member egret.gui.UIStage#height
                 */
                ,function () {
                    return this._UIC_Props_._uiHeight;
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (this._autoResize)
                        return;
                    this.$setHeight(value);
                }
            );
            d(p, "scaleX"
                /**
                 * @member egret.gui.UIStage#scaleX
                 */
                ,function () {
                    return this.$getScaleX();
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (this._autoResize)
                        return;
                    this.$setScaleX(value);
                }
            );
            d(p, "scaleY"
                /**
                 */
                ,function () {
                    return this.$getScaleY();
                }
                /**
                 * @inheritDoc
                 */
                ,function (value) {
                    if (this._autoResize)
                        return;
                    this.$setScaleY(value);
                }
            );
            /**
             * @param w {number}
             * @param h {number}
             */
            p.setActualSize = function (w, h) {
                if (this._autoResize)
                    return;
                _super.prototype.setActualSize.call(this, w, h);
            };
            /**
             * @param x {number}
             * @param y {number}
             */
            p.setLayoutBoundsPosition = function (x, y) {
                if (this._autoResize)
                    return;
                _super.prototype.setLayoutBoundsPosition.call(this, x, y);
            };
            /**
             * @param layoutWidth {number}
             * @param layoutHeight {number}
             */
            p.setLayoutBoundsSize = function (layoutWidth, layoutHeight) {
                if (this._autoResize)
                    return;
                _super.prototype.setLayoutBoundsSize.call(this, layoutWidth, layoutHeight);
            };
            d(p, "layout"
                /**
                 * 布局对象,UIStage只接受BasicLayout
                 * @member egret.gui.UIStage#layout
                 */
                ,function () {
                    return this._layout;
                }
                ,function (value) {
                    if (value instanceof gui.BasicLayout)
                        this._setLayout(value);
                }
            );
            d(p, "popUpContainer"
                /**
                 * 弹出窗口层容器。
                 * @member egret.gui.UIStage#popUpContainer
                 */
                ,function () {
                    if (!this._popUpContainer) {
                        this._popUpContainer = new gui.UILayer(this, "noTopMostIndex", "topMostIndex");
                    }
                    return this._popUpContainer;
                }
            );
            d(p, "toolTipContainer"
                /**
                 * 工具提示层容器。
                 * @member egret.gui.UIStage#toolTipContainer
                 */
                ,function () {
                    if (!this._toolTipContainer) {
                        this._toolTipContainer = new gui.UILayer(this, "topMostIndex", "toolTipIndex");
                    }
                    return this._toolTipContainer;
                }
            );
            d(p, "cursorContainer"
                /**
                 * 鼠标样式层容器。
                 * @member egret.gui.UIStage#cursorContainer
                 */
                ,function () {
                    if (!this._cursorContainer) {
                        this._cursorContainer = new gui.UILayer(this, "toolTipIndex", "cursorIndex");
                    }
                    return this._cursorContainer;
                }
            );
            d(p, "noTopMostIndex"
                /**
                 * 弹出窗口层的起始索引(包括)
                 */
                ,function () {
                    return this._noTopMostIndex;
                }
                ,function (value) {
                    var delta = value - this._noTopMostIndex;
                    this._noTopMostIndex = value;
                    this.topMostIndex += delta;
                }
            );
            d(p, "topMostIndex"
                /**
                 * 弹出窗口层结束索引(不包括)
                 */
                ,function () {
                    return this._topMostIndex;
                }
                ,function (value) {
                    var delta = value - this._topMostIndex;
                    this._topMostIndex = value;
                    this.toolTipIndex += delta;
                }
            );
            d(p, "toolTipIndex"
                /**
                 * 工具提示层结束索引(不包括)
                 */
                ,function () {
                    return this._toolTipIndex;
                }
                ,function (value) {
                    var delta = value - this._toolTipIndex;
                    this._toolTipIndex = value;
                    this.cursorIndex += delta;
                }
            );
            d(p, "cursorIndex"
                /**
                 * 鼠标样式层结束索引(不包括)
                 */
                ,function () {
                    return this._cursorIndex;
                }
                ,function (value) {
                    var delta = value - this._cursorIndex;
                    this._cursorIndex = value;
                }
            );
            //==========================================================================
            //                                复写容器操作方法
            //==========================================================================
            /**
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.addElement = function (element) {
                var addIndex = this._noTopMostIndex;
                if (element.parent == this)
                    addIndex--;
                return this.addElementAt(element, addIndex);
            };
            /**
             * @param element {IVisualElement}
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.addElementAt = function (element, index) {
                if (element.parent == this) {
                    var oldIndex = this.getElementIndex(element);
                    if (oldIndex < this._noTopMostIndex)
                        this.noTopMostIndex--;
                    else if (oldIndex >= this._noTopMostIndex && oldIndex < this._topMostIndex)
                        this.topMostIndex--;
                    else if (oldIndex >= this._topMostIndex && oldIndex < this._toolTipIndex)
                        this.toolTipIndex--;
                    else
                        this.cursorIndex--;
                }
                if (index <= this._noTopMostIndex)
                    this.noTopMostIndex++;
                else if (index > this._noTopMostIndex && index <= this._topMostIndex)
                    this.topMostIndex++;
                else if (index > this._topMostIndex && index <= this._toolTipIndex)
                    this.toolTipIndex++;
                else
                    this.cursorIndex++;
                return _super.prototype.addElementAt.call(this, element, index);
            };
            /**
             * @param element {IVisualElement}
             * @returns {IVisualElement}
             */
            p.removeElement = function (element) {
                return this.removeElementAt(_super.prototype.getElementIndex.call(this, element));
            };
            /**
             * @param index {number}
             * @returns {IVisualElement}
             */
            p.removeElementAt = function (index) {
                var element = _super.prototype.removeElementAt.call(this, index);
                if (index < this._noTopMostIndex)
                    this.noTopMostIndex--;
                else if (index >= this._noTopMostIndex && index < this._topMostIndex)
                    this.topMostIndex--;
                else if (index >= this._topMostIndex && index < this._toolTipIndex)
                    this.toolTipIndex--;
                else
                    this.cursorIndex--;
                return element;
            };
            /**
             */
            p.removeAllElements = function () {
                while (this._noTopMostIndex > 0) {
                    _super.prototype.removeElementAt.call(this, 0);
                    this.noTopMostIndex--;
                }
            };
            /**
             * @param element {IVisualElement}
             * @param index {number}
             * @param notifyListeners {boolean}
             */
            p._elementRemoved = function (element, index, notifyListeners) {
                if (notifyListeners === void 0) { notifyListeners = true; }
                if (notifyListeners) {
                    //PopUpManager需要监听这个事件
                    egret.Event.dispatchEvent(element, "removeFromUIStage");
                }
                _super.prototype._elementRemoved.call(this, element, index, notifyListeners);
            };
            //==========================================================================
            //                                保留容器原始操作方法
            //==========================================================================
            p.raw_getElementAt = function (index) {
                return _super.prototype.getElementAt.call(this, index);
            };
            p.raw_addElement = function (element) {
                var index = this.numElements;
                if (element.parent == this)
                    index--;
                return this.raw_addElementAt(element, index);
            };
            p.raw_addElementAt = function (element, index) {
                if (element.parent == this) {
                    var oldIndex = this.getElementIndex(element);
                    if (oldIndex < this._noTopMostIndex)
                        this.noTopMostIndex--;
                    else if (oldIndex >= this._noTopMostIndex && oldIndex < this._topMostIndex)
                        this.topMostIndex--;
                    else if (oldIndex >= this._topMostIndex && oldIndex < this._toolTipIndex)
                        this.toolTipIndex--;
                    else
                        this.cursorIndex--;
                }
                return _super.prototype.addElementAt.call(this, element, index);
            };
            p.raw_removeElement = function (element) {
                return _super.prototype.removeElementAt.call(this, _super.prototype.getElementIndex.call(this, element));
            };
            p.raw_removeElementAt = function (index) {
                return _super.prototype.removeElementAt.call(this, index);
            };
            p.raw_removeAllElements = function () {
                while (this.numElements > 0) {
                    _super.prototype.removeElementAt.call(this, 0);
                }
            };
            p.raw_getElementIndex = function (element) {
                return _super.prototype.getElementIndex.call(this, element);
            };
            p.raw_setElementIndex = function (element, index) {
                _super.prototype.setElementIndex.call(this, element, index);
            };
            p.raw_swapElements = function (element1, element2) {
                _super.prototype.swapElementsAt.call(this, _super.prototype.getElementIndex.call(this, element1), _super.prototype.getElementIndex.call(this, element2));
            };
            p.raw_swapElementsAt = function (index1, index2) {
                _super.prototype.swapElementsAt.call(this, index1, index2);
            };
            return UIStage;
        })(gui.Group);
        gui.UIStage = UIStage;
        egret.registerClass(UIStage,"egret.gui.UIStage",["egret.gui.IUIStage","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Effect
         * @classdesc
         * 定义所有效果的基类
         * @extends egret.EventDispatcher
         */
        var Effect = (function (_super) {
            __extends(Effect, _super);
            /**
             * @method egret.gui.Effect#constructor
             */
            function Effect(target) {
                if (target === void 0) { target = null; }
                _super.call(this);
                this._instances = [];
                this._isPaused = false;
                this._duration = 500;
                this.durationExplicitlySet = false;
                this._perElementOffset = 0;
                /**
                 * 效果的重复次数。可能的值为任何大于等于 0 的整数。
                 * 值为 1 表示播放一次效果。值为 0 表示无限制地循环播放效果，直到通过调用 end() 方法停止播放。
                 * @member egret.gui.Effect#repeatCount
                 */
                this.repeatCount = 1;
                /**
                 * 重复播放效果前需要等待的时间（以毫秒为单位）。可能的值为任何大于等于 0 的整数。
                 * @member egret.gui.Effect#repeatDelay
                 */
                this.repeatDelay = 0;
                /**
                 * 开始播放效果前需要等待的时间（以毫秒为单位）。
                 * 此值可以是任何大于或等于 0 的整数。
                 * 如果使用 repeatCount 属性重复播放效果，则只在首次播放效果时应用 startDelay。
                 * @member egret.gui.Effect#startDelay
                 */
                this.startDelay = 0;
                this._targets = [];
                this._playheadTime = 0;
                this.target = target;
            }
            var d = __define,c=Effect;p=c.prototype;
            d(p, "duration"
                /**
                 * 效果的持续时间（以毫秒为单位）。
                 * @member egret.gui.Effect#duration
                 */
                ,function () {
                    if (!this.durationExplicitlySet && this._parentCompositeEffect) {
                        return this._parentCompositeEffect.duration;
                    }
                    else {
                        return this._duration;
                    }
                }
                ,function (value) {
                    this.durationExplicitlySet = true;
                    this._duration = value;
                }
            );
            d(p, "isPlaying"
                /**
                 * 如果当前正在播放效果的任一实例，则为 true；否则，则为 false。
                 * @member egret.gui.Effect#isPlaying
                 */
                ,function () {
                    return this._instances && this._instances.length > 0;
                }
            );
            d(p, "isPaused"
                /**
                 * 是否处于暂停状态，当调用了paused()方法后此属性为true
                 * @member egret.gui.Effect#isPaused
                 */
                ,function () {
                    if (this.isPlaying)
                        return this._isPaused;
                    else
                        return false;
                }
            );
            d(p, "perElementOffset"
                /**
                 * 在效果的第一个目标之后，其他效果目标的附加延迟（以毫秒为单位）。
                 * 此值将添加到 startDelay 属性的值中。
                 * @member egret.gui.Effect#perElementOffset
                 */
                ,function () {
                    return this._perElementOffset;
                }
                ,function (value) {
                    this._perElementOffset = value;
                }
            );
            d(p, "target"
                /**
                 * 要应用此效果的对象。当效果触发器触发某个效果时，会自动将 target 属性设置为触发该效果的对象。
                 * @member egret.gui.Effect#target
                 */
                ,function () {
                    if (this._targets.length > 0)
                        return this._targets[0];
                    else
                        return null;
                }
                ,function (value) {
                    this._targets.splice(0);
                    if (value)
                        this._targets[0] = value;
                }
            );
            d(p, "targets"
                /**
                 * 一个对象 Array，这些对象都是效果的目标。播放效果时，会对各个目标并行执行效果。
                 * 设置 target 属性将替换此 Array 中的所有对象。
                 * 设置 targets 属性后，target 属性将返回此 Array 中的第一个项目。
                 * @member egret.gui.Effect#targets
                 */
                ,function () {
                    return this._targets;
                }
                ,function (value) {
                    var n = value.length;
                    for (var i = n - 1; i >= 0; i--) {
                        if (value[i] == null)
                            value.splice(i, 1);
                    }
                    this._targets = value;
                }
            );
            d(p, "playheadTime"
                /**
                 * 效果的当前时间位置。此属性的值介于 0 和总持续时间（包括该效果的 startDelay、repeatCount 和 repeatDelay）之间。
                 * @member egret.gui.Effect#playheadTime
                 */
                ,function () {
                    for (var i = 0; i < this._instances.length; i++) {
                        if (this._instances[i])
                            return (this._instances[i]).playheadTime;
                    }
                    return this._playheadTime;
                }
                ,function (value) {
                    var started = false;
                    if (this._instances.length == 0) {
                        this.play();
                        started = true;
                    }
                    for (var i = 0; i < this._instances.length; i++) {
                        if (this._instances[i])
                            (this._instances[i]).playheadTime = value;
                    }
                    if (started)
                        this.pause();
                    this._playheadTime = value;
                }
            );
            /**
             * 获取一个目标对象 Array，并对每个目标调用 createInstance() 方法。
             * @method egret.gui.Effect#createInstances
             * @param targets 要使用此效果设置动画的对象的数组。
             * @return 效果的效果实例对象的数组，一个目标一个数组。
             */
            p.createInstances = function (targets) {
                if (targets === void 0) { targets = null; }
                if (!targets)
                    targets = this.targets;
                var newInstances = [];
                var offsetDelay = 0;
                var length = targets.length;
                for (var i = 0; i < length; i++) {
                    var target = targets[i];
                    var newInstance = this.createInstance(target);
                    if (newInstance) {
                        newInstance.startDelay += offsetDelay;
                        offsetDelay += this.perElementOffset;
                        newInstances.push(newInstance);
                    }
                }
                return newInstances;
            };
            /**
             * 创建一个效果实例并对其进行初始化。在播放效果实例前，使用此方法（而非 play() 方法）处理效果实例属性。
             *  <p>所创建的效果实例的类型由 instanceClass 属性指定。然后，使用 _initInstance() 方法初始化此实例。
             * 如果该实例是 EffectManager 在效果触发器触发此效果时创建的，
             * 则还需要调用 EffectInstance.initEffect() 方法进一步初始化此效果。</p>
             *  <p>调用 createInstance() 方法不会播放效果。对返回的效果实例调用 startEffect() 方法。</p>
             *  <p>Effect.play() 方法将自动调用此函数。 </p>
             * @method egret.gui.Effect#createInstance
             * @param target 要使用此效果为其设置动画的对象。
             * @return 效果的效果实例对象。
             */
            p.createInstance = function (target) {
                if (target === void 0) { target = null; }
                if (!target)
                    target = this.target;
                var newInstance = (new this.instanceClass(target));
                this._initInstance(newInstance);
                newInstance.addEventListener(gui.EffectEvent.EFFECT_START, this._effectStartHandler, this);
                newInstance.addEventListener(gui.EffectEvent.EFFECT_STOP, this._effectStopHandler, this);
                newInstance.addEventListener(gui.EffectEvent.EFFECT_END, this._effectEndHandler, this);
                this._instances.push(newInstance);
                return newInstance;
            };
            /**
             *  将效果的属性复制到效果实例。
             *  <p>创建自定义效果时覆盖此方法，将属性从 Effect 类复制到效果实例类。
             * 进行覆盖时，请调用 super.initInstance()。 </p>
             * @param EffectInstance 要初始化的效果实例。
             */
            p._initInstance = function (instance) {
                instance.duration = this.duration;
                instance.durationExplicitlySet = this.durationExplicitlySet;
                instance.effect = this;
                instance.repeatCount = this.repeatCount;
                instance.repeatDelay = this.repeatDelay;
                instance.startDelay = this.startDelay;
            };
            /**
             * 删除实例中的事件侦听器，然后从实例列表中删除该实例。
             * @method egret.gui.Effect#deleteInstance
             */
            p.deleteInstance = function (instance) {
                instance.removeEventListener(gui.EffectEvent.EFFECT_START, this._effectStartHandler, this);
                instance.removeEventListener(gui.EffectEvent.EFFECT_STOP, this._effectStopHandler, this);
                instance.removeEventListener(gui.EffectEvent.EFFECT_END, this._effectEndHandler, this);
                var n = this._instances.length;
                for (var i = 0; i < n; i++) {
                    if (this._instances[i] === instance)
                        this._instances.splice(i, 1);
                }
            };
            /**
             * 开始播放效果。通常在调用 play() 方法之前先调用 end() 方法，以确保在开始播放新效果前已结束先前效果的所有实例。
             * @method egret.gui.Effect#play
             * @param targets 播放此效果的目标对象的数组。如果已指定此参数，则不会使用效果的 targets 属性。
             * @param playReversedFromEnd 如果为 true，则向后播放效果。
             * @return 效果的 EffectInstance 对象的数组，一个目标一个数组。
             */
            p.play = function (targets, playReversedFromEnd) {
                if (targets === void 0) { targets = null; }
                if (playReversedFromEnd === void 0) { playReversedFromEnd = false; }
                this.effectStopped = false;
                this._isPaused = false;
                this.playReversed = playReversedFromEnd;
                var newInstances = this.createInstances(targets);
                var n = newInstances.length;
                for (var i = 0; i < n; i++) {
                    var newInstance = (newInstances[i]);
                    newInstance.playReversed = playReversedFromEnd;
                    newInstance.startEffect();
                }
                return newInstances;
            };
            /**
             * 暂停效果，直到调用 resume() 方法。
             * @method egret.gui.Effect#pause
             */
            p.pause = function () {
                if (this.isPlaying && !this._isPaused) {
                    this._isPaused = true;
                    var n = this._instances.length;
                    for (var i = 0; i < n; i++) {
                        (this._instances[i]).pause();
                    }
                }
            };
            /**
             * 停止播放效果，使效果目标保持当前状态。
             * 与调用 pause() 方法不同，无法先调用 stop() 方法再调用 resume() 方法。
             * 不过，您可以调用 play() 方法重新播放效果。
             * @method egret.gui.Effect#stop
             */
            p.stop = function () {
                var n = this._instances.length - 1;
                for (var i = n; i >= 0; i--) {
                    var instance = (this._instances[i]);
                    if (instance)
                        instance.stop();
                }
            };
            /**
             * 在效果由 pause() 方法暂停后继续播放效果。
             * @method egret.gui.Effect#resume
             */
            p.resume = function () {
                if (this.isPlaying && this._isPaused) {
                    this._isPaused = false;
                    var n = this._instances.length;
                    for (var i = 0; i < n; i++) {
                        (this._instances[i]).resume();
                    }
                }
            };
            /**
             * 逆序播放效果；如果当前正在播放效果，则从该效果的当前位置开始逆序播放。
             * @method egret.gui.Effect#reverse
             */
            p.reverse = function () {
                if (this.isPlaying) {
                    var n = this._instances.length;
                    for (var i = 0; i < n; i++) {
                        (this._instances[i]).reverse();
                    }
                }
            };
            /**
             * 中断当前正在播放的效果，立即跳转到该效果的末尾。调用此方法将调用 EffectInstance.end() 方法。
             * <p>如果调用此方法来结束播放效果，效果实例将分派 effectEnd 事件。</p>
             * <p>如果将效果实例作为参数传递，则会中断此实例。
             * 如果没有传入参数，则该效果当前生成的所有效果实例都将中断。</p>
             * @method egret.gui.Effect#end
             */
            p.end = function (effectInstance) {
                if (effectInstance === void 0) { effectInstance = null; }
                if (effectInstance) {
                    effectInstance.end();
                }
                else {
                    var n = this._instances.length;
                    for (var i = n - 1; i >= 0; i--) {
                        var instance = (this._instances[i]);
                        if (instance)
                            instance.end();
                    }
                }
            };
            /**
             * 当效果实例开始播放时调用此方法。
             */
            p._effectStartHandler = function (event) {
                this.dispatchEvent(event);
            };
            /**
             * 当效果实例已被 stop() 方法调用停止时调用。
             */
            p._effectStopHandler = function (event) {
                this.dispatchEvent(event);
                this.effectStopped = true;
            };
            /**
             * 当效果实例完成播放时调用。
             */
            p._effectEndHandler = function (event) {
                var instance = (event.effectInstance);
                this.deleteInstance(instance);
                this.dispatchEvent(event);
            };
            return Effect;
        })(egret.EventDispatcher);
        gui.Effect = Effect;
        egret.registerClass(Effect,"egret.gui.Effect",["egret.gui.IEffect","egret.IEventDispatcher"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Animate
         * @classdesc
         * Animate 效果可设置各个值之间的任意属性集的动画。通过设置 motionPaths 属性，指定要设置动画的属性和值。
         * @extends egret.gui.Effect
         */
        var Animate = (function (_super) {
            __extends(Animate, _super);
            /**
             * @method egret.gui.Animate#constructor
             */
            function Animate(target) {
                if (target === void 0) { target = null; }
                _super.call(this, target);
                this.numUpdateListeners = 0;
                this._interpolator = null;
                this._repeatBehavior = gui.RepeatBehavior.LOOP;
                this._disableLayout = false;
                this.instanceClass = gui.AnimateInstance;
            }
            var d = __define,c=Animate;p=c.prototype;
            d(p, "motionPaths"
                /**
                 * MotionPath 对象的 Array，其中的每个对象都带有正在设置动画的属性的名称以及该属性在动画过程中所采用的值。
                 * 此 Array 优先于 Animate 的子类中所声明的任何属性。
                 * 例如，如果此 Array 是直接在 Move 效果上设置的，则会忽略 Move 效果的任何属性（如 xFrom）。
                 * @member egret.gui.Animate#motionPaths
                 */
                ,function () {
                    return this._motionPaths;
                }
                ,function (value) {
                    this._motionPaths = value;
                }
            );
            d(p, "easer"
                /**
                 * 此效果的缓动行为，默认为Sine(.5)
                 * @member egret.gui.Animate#easer
                 */
                ,function () {
                    return this._easer;
                }
                ,function (value) {
                    this._easer = value;
                }
            );
            d(p, "interpolator"
                /**
                 * 此效果计算属性的起始值和结束值之间的值所用的插补器。
                 * 默认情况下，NumberInterpolator 类处理内插值.
                 * @member egret.gui.Animate#interpolator
                 */
                ,function () {
                    return this._interpolator;
                }
                ,function (value) {
                    this._interpolator = value;
                }
            );
            d(p, "repeatBehavior"
                /**
                 * 一种重复效果的行为。RepeatBehavior类中定义的常量。默认为RepeatBehavior.LOOP
                 * @member egret.gui.Animate#repeatBehavior
                 */
                ,function () {
                    return this._repeatBehavior;
                }
                ,function (value) {
                    this._repeatBehavior = value;
                }
            );
            d(p, "disableLayout"
                /**
                 * 如果为 true，则对目标对象禁用任何布局约束。效果完成时，将还原这些属性。
                 * @member egret.gui.Animate#disableLayout
                 */
                ,function () {
                    return this._disableLayout;
                }
                ,function (value) {
                    this._disableLayout = value;
                }
            );
            /**
             * @method egret.gui.Animate#_initInstance
             */
            p._initInstance = function (instance) {
                _super.prototype._initInstance.call(this, instance);
                var animateInstance = instance;
                animateInstance.addEventListener(gui.EffectEvent.EFFECT_REPEAT, this.animationEventHandler, this);
                if (this.numUpdateListeners > 0)
                    animateInstance.addEventListener(gui.EffectEvent.EFFECT_UPDATE, this.animationEventHandler, this);
                animateInstance.easer = this.easer;
                if (this.interpolator)
                    animateInstance.interpolator = this.interpolator;
                if (isNaN(this.repeatCount))
                    animateInstance.repeatCount = this.repeatCount;
                animateInstance.repeatBehavior = this.repeatBehavior;
                animateInstance.disableLayout = this.disableLayout;
                if (this.motionPaths) {
                    animateInstance.motionPaths = new Array();
                    for (var i = 0; i < this.motionPaths.length; ++i)
                        animateInstance.motionPaths[i] = this.motionPaths[i].clone();
                }
            };
            p.addEventListener = function (type, listener, thisObject, useCapture, priority) {
                if (useCapture === void 0) { useCapture = false; }
                if (priority === void 0) { priority = 0; }
                _super.prototype.addEventListener.call(this, type, listener, thisObject, useCapture, priority);
                if (type == gui.EffectEvent.EFFECT_UPDATE)
                    ++this.numUpdateListeners;
            };
            p.removeEventListener = function (type, listener, useCapture) {
                if (useCapture === void 0) { useCapture = false; }
                _super.prototype.removeEventListener.call(this, type, listener, this, useCapture);
                if (type == gui.EffectEvent.EFFECT_UPDATE)
                    --this.numUpdateListeners;
            };
            /**
             * 派发动画事件
             */
            p.animationEventHandler = function (event) {
                this.dispatchEvent(event);
            };
            return Animate;
        })(gui.Effect);
        gui.Animate = Animate;
        egret.registerClass(Animate,"egret.gui.Animate");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Power
         * @classdesc
         * Linear 类使用三个阶段定义缓动：加速、匀速运动和减速。
         * @implements egret.gui.IEaser
         */
        var Linear = (function () {
            /**
             * @param easeInFraction 在加速阶段中持续时间占总时间的百分比，在 0.0 和 1.0 之间。
             * @param easeOutFraction 在减速阶段中持续时间占总时间的百分比，在 0.0 和 1.0 之间。
             * @method egret.gui.Linear#constructor
             */
            function Linear(easeInFraction, easeOutFraction) {
                if (easeInFraction === void 0) { easeInFraction = 0; }
                if (easeOutFraction === void 0) { easeOutFraction = 0; }
                this._easeInFraction = 0;
                this._easeOutFraction = 0;
                this.easeInFraction = easeInFraction;
                this.easeOutFraction = easeOutFraction;
            }
            var d = __define,c=Linear;p=c.prototype;
            d(p, "easeInFraction"
                /**
                 * 在加速阶段中持续时间占总时间的百分比，在 0.0 和 1.0 之间。
                 */
                ,function () {
                    return this._easeInFraction;
                }
                ,function (value) {
                    this._easeInFraction = value;
                }
            );
            d(p, "easeOutFraction"
                /**
                 * 在减速阶段中持续时间占总时间的百分比，在 0.0 和 1.0 之间。
                 */
                ,function () {
                    return this._easeOutFraction;
                }
                ,function (value) {
                    this._easeOutFraction = value;
                }
            );
            p.ease = function (fraction) {
                if (this.easeInFraction == 0 && this.easeOutFraction == 0)
                    return fraction;
                var runRate = 1 / (1 - this.easeInFraction / 2 - this.easeOutFraction / 2);
                if (fraction < this.easeInFraction)
                    return fraction * runRate * (fraction / this.easeInFraction) / 2;
                if (fraction > (1 - this.easeOutFraction)) {
                    var decTime = fraction - (1 - this.easeOutFraction);
                    var decProportion = decTime / this.easeOutFraction;
                    return runRate * (1 - this.easeInFraction / 2 - this.easeOutFraction + decTime * (2 - decProportion) / 2);
                }
                return runRate * (fraction - this.easeInFraction / 2);
            };
            return Linear;
        })();
        gui.Linear = Linear;
        egret.registerClass(Linear,"egret.gui.Linear",["egret.gui.IEaser"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="easing/Linear.ts" />
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.AnimateTransform
         * @classdesc
         * AnimateTransform 效果控制目标对象上所有与转换相关的动画。
         * @extends egret.gui.Animate
         */
        var AnimateTransform = (function (_super) {
            __extends(AnimateTransform, _super);
            /**
             * @method egret.gui.AnimateTransform#constructor
             */
            function AnimateTransform(target) {
                if (target === void 0) { target = null; }
                _super.call(this, target);
                /**
                 * 指定在转换效果开始播放时，该效果是否围绕目标的中心发生。
                 * 如果未设置该标志，转换中心将由此效果中的 transformX, transformY属性决定。
                 * @member egret.gui.AnimateTransform#autoCenterTransform
                 */
                this.autoCenterTransform = false;
                this.instanceClass = gui.AnimateTransformInstance;
            }
            var d = __define,c=AnimateTransform;p=c.prototype;
            /**
             * 获取效果所属的复合效果
             */
            p.getOwningParallelEffect = function () {
                var prevParent = null;
                var parent = this._parentCompositeEffect;
                while (parent) {
                    if (parent instanceof gui.Sequence)
                        break;
                    prevParent = parent;
                    parent = parent._parentCompositeEffect;
                }
                return prevParent;
            };
            p.createInstance = function (target) {
                if (target === void 0) { target = null; }
                if (!target)
                    target = this.target;
                var sharedInstance = null;
                var topmostParallel = this.getOwningParallelEffect();
                if (topmostParallel != null)
                    sharedInstance = (AnimateTransform.getSharedInstance(topmostParallel, target));
                if (!sharedInstance) {
                    var newInstance = _super.prototype.createInstance.call(this, target);
                    if (topmostParallel)
                        AnimateTransform.storeSharedInstance(topmostParallel, target, newInstance);
                    return newInstance;
                }
                else {
                    this._initInstance(sharedInstance);
                    return null;
                }
            };
            p._effectStartHandler = function (event) {
                _super.prototype._effectStartHandler.call(this, event);
                var topmostParallel = this.getOwningParallelEffect();
                if (topmostParallel != null)
                    AnimateTransform.removeSharedInstance(topmostParallel, event.effectInstance.target);
            };
            /**
             * 计算目标的转换中心
             */
            p.computeTransformCenterForTarget = function (target, valueMap) {
                if (valueMap === void 0) { valueMap = null; }
                var computedTransformCenter;
                if (this.autoCenterTransform) {
                    var w = (valueMap != null && valueMap["width"] !== undefined) ? valueMap["width"] : target.width;
                    var h = (valueMap != null && valueMap["height"] !== undefined) ? valueMap["height"] : target.height;
                    computedTransformCenter = new egret.Point(w / 2, h / 2);
                }
                else {
                    computedTransformCenter = new egret.Point(0, 0);
                    if (!isNaN(this.transformX))
                        computedTransformCenter.x = this.transformX;
                    if (!isNaN(this.transformY))
                        computedTransformCenter.y = this.transformY;
                }
                return computedTransformCenter;
            };
            /**
             * 插入关键帧
             */
            p.insertKeyframe = function (keyframes, newKF) {
                for (var i = 0; i < keyframes.length; i++) {
                    if (keyframes[i].time > newKF.time) {
                        keyframes.splice(i, 0, newKF);
                        return;
                    }
                }
                keyframes.push(newKF);
            };
            /**
             * 添加一个运动路径
             * @param property
             * @param valueFrom
             * @param valueTo
             * @param valueBy
             * @private
             */
            p._addMotionPath = function (property, valueFrom, valueTo, valueBy) {
                if (valueFrom === void 0) { valueFrom = NaN; }
                if (valueTo === void 0) { valueTo = NaN; }
                if (valueBy === void 0) { valueBy = NaN; }
                if (isNaN(valueFrom)) {
                    if (!isNaN(valueTo) && !isNaN(valueBy))
                        valueFrom = valueTo - valueBy;
                }
                var mp = new gui.MotionPath(property);
                mp.keyframes = [new gui.Keyframe(0, valueFrom), new gui.Keyframe(this.duration, valueTo, valueBy)];
                mp.keyframes[1].easer = this.easer;
                if (this.motionPaths) {
                    var n = this.motionPaths.length;
                    for (var i = 0; i < n; i++) {
                        var prop = (this.motionPaths[i]);
                        if (prop.property == mp.property) {
                            for (var j = 0; j < mp.keyframes.length; j++) {
                                this.insertKeyframe(prop.keyframes, mp.keyframes[j]);
                            }
                            return;
                        }
                    }
                }
                else {
                    this.motionPaths = new Array();
                }
                this.motionPaths.push(mp);
            };
            p._initInstance = function (instance) {
                var i = 0;
                var adjustedDuration = this.duration;
                var transformInstance = instance;
                if (this.motionPaths) {
                    var instanceAnimProps = [];
                    for (i = 0; i < this.motionPaths.length; ++i) {
                        instanceAnimProps[i] = this.motionPaths[i].clone();
                        var mp = (instanceAnimProps[i]);
                        if (mp.keyframes) {
                            for (var j = 0; j < mp.keyframes.length; ++j) {
                                var kf = (mp.keyframes[j]);
                                if (isNaN(kf.time))
                                    kf.time = this.duration;
                                if (this.startDelay != 0)
                                    kf.time += this.startDelay;
                            }
                            adjustedDuration = Math.max(adjustedDuration, mp.keyframes[mp.keyframes.length - 1].time);
                        }
                    }
                    var globalStartTime = this.getGlobalStartTime();
                    for (i = 0; i < instanceAnimProps.length; ++i)
                        transformInstance.addMotionPath(instanceAnimProps[i], globalStartTime);
                }
                if (transformInstance.initialized)
                    return;
                transformInstance.initialized = true;
                if (!this.autoCenterTransform)
                    transformInstance.transformCenter = this.computeTransformCenterForTarget(instance.target);
                transformInstance.autoCenterTransform = this.autoCenterTransform;
                var tmpStartDelay = this.startDelay;
                this.startDelay = 0;
                var tmpAnimProps = this.motionPaths;
                this.motionPaths = null;
                _super.prototype._initInstance.call(this, instance);
                this.startDelay = tmpStartDelay;
                this.motionPaths = tmpAnimProps;
                transformInstance.duration = Math.max(this.duration, adjustedDuration);
                if (egret.getQualifiedClassName(this) != egret.getQualifiedClassName(AnimateTransform))
                    transformInstance.easer = AnimateTransform.linearEaser;
            };
            p.getGlobalStartTime = function () {
                var globalStartTime = 0;
                var parent = this._parentCompositeEffect;
                while (parent) {
                    globalStartTime += parent.startDelay;
                    if (parent instanceof gui.Sequence) {
                        var sequence = parent;
                        for (var i = 0; i < sequence.children.length; ++i) {
                            var child = sequence.children[i];
                            if (child == this)
                                break;
                            if (child instanceof gui.CompositeEffect)
                                globalStartTime += child.compositeDuration;
                            else
                                globalStartTime += child.startDelay + (child.duration * child.repeatCount) + (child.repeatDelay + (child.repeatCount - 1));
                        }
                    }
                    parent = parent._parentCompositeEffect;
                }
                return globalStartTime;
            };
            /**
             * 获取共享的实例
             */
            AnimateTransform.getSharedInstance = function (topmostParallel, target) {
                if (topmostParallel != null) {
                    var sharedObjectMap = AnimateTransform.sharedObjectMaps[topmostParallel.hashCode];
                    if (sharedObjectMap != null)
                        return sharedObjectMap[target.hashCode];
                }
                return null;
            };
            AnimateTransform.removeSharedInstance = function (topmostParallel, target) {
                if (topmostParallel != null) {
                    var sharedObjectMap = AnimateTransform.sharedObjectMaps[topmostParallel.hashCode];
                    if (!sharedObjectMap)
                        return;
                    if (sharedObjectMap[target.hashCode]) {
                        delete sharedObjectMap[target.hashCode];
                        AnimateTransform.sharedObjectRefcounts[topmostParallel.hashCode] -= 1;
                        if (AnimateTransform.sharedObjectRefcounts[topmostParallel.hashCode] <= 0) {
                            delete AnimateTransform.sharedObjectMaps[topmostParallel.hashCode];
                            delete AnimateTransform.sharedObjectRefcounts[topmostParallel.hashCode];
                        }
                    }
                }
            };
            AnimateTransform.storeSharedInstance = function (topmostParallel, target, effectInstance) {
                if (topmostParallel != null) {
                    var sharedObjectMap = AnimateTransform.sharedObjectMaps[topmostParallel.hashCode];
                    if (!sharedObjectMap) {
                        sharedObjectMap = {};
                        AnimateTransform.sharedObjectMaps[topmostParallel.hashCode] = sharedObjectMap;
                    }
                    if (!sharedObjectMap[target.hashCode]) {
                        if (!AnimateTransform.sharedObjectRefcounts[topmostParallel.hashCode])
                            AnimateTransform.sharedObjectRefcounts[topmostParallel.hashCode] = 1;
                        else
                            AnimateTransform.sharedObjectRefcounts[topmostParallel.hashCode] += 1;
                    }
                    sharedObjectMap[target.hashCode] = effectInstance;
                }
            };
            /**子效果默认的缓动函数*/
            AnimateTransform.linearEaser = new gui.Linear();
            //储存作用于同一个目标的转换效果共享的实例，
            AnimateTransform.sharedObjectMaps = {};
            AnimateTransform.sharedObjectRefcounts = {};
            return AnimateTransform;
        })(gui.Animate);
        gui.AnimateTransform = AnimateTransform;
        egret.registerClass(AnimateTransform,"egret.gui.AnimateTransform");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.CompositeEffect
         * @classdesc
         * 复合效果的基类
         * @extends egret.gui.Effect
         */
        var CompositeEffect = (function (_super) {
            __extends(CompositeEffect, _super);
            /**
             * @method egret.gui.CompositeEffect#constructor
             */
            function CompositeEffect(target) {
                if (target === void 0) { target = null; }
                _super.call(this, target);
                this._children = [];
                this.instanceClass = gui.CompositeEffectInstance;
            }
            var d = __define,c=CompositeEffect;p=c.prototype;
            d(p, "children"
                /**
                 * 子效果的数组。
                 * @member egret.gui.CompositeEffect#children
                 */
                ,function () {
                    return this._children;
                }
                ,function (value) {
                    var i = 0;
                    if (this._children)
                        for (i = 0; i < this._children.length; ++i)
                            if (this._children[i])
                                this._children[i]._parentCompositeEffect = null;
                    this._children = value;
                    if (this._children)
                        for (i = 0; i < this._children.length; ++i)
                            if (this._children[i])
                                this._children[i]._parentCompositeEffect = this;
                }
            );
            d(p, "compositeDuration"
                /**
                 * 返回此效果的总持续时间。
                 * @member egret.gui.CompositeEffect#compositeDuration
                 */
                ,function () {
                    return this.duration;
                }
            );
            p.createInstance = function (target) {
                if (target === void 0) { target = null; }
                if (!this.childTargets)
                    this.childTargets = [target];
                var newInstance = _super.prototype.createInstance.call(this, target);
                this.childTargets = null;
                return newInstance;
            };
            p.createInstances = function (targets) {
                if (targets === void 0) { targets = null; }
                if (!targets)
                    targets = this.targets;
                this.childTargets = targets;
                var newInstance = this.createInstance();
                this.childTargets = null;
                return newInstance ? [newInstance] : [];
            };
            p._initInstance = function (instance) {
                _super.prototype._initInstance.call(this, instance);
                var compInst = instance;
                var targets = this.childTargets;
                if (!(targets instanceof Array))
                    targets = [targets];
                if (this.children) {
                    var n = this.children.length;
                    for (var i = 0; i < n; i++) {
                        var childEffect = this.children[i];
                        if (childEffect.targets.length == 0) {
                            compInst.addChildSet(this.children[i].createInstances(targets));
                        }
                        else {
                            compInst.addChildSet(this.children[i].createInstances(childEffect.targets));
                        }
                    }
                }
            };
            /**
             * 将新的子效果添加到此复合效果。
             * @method egret.gui.CompositeEffect#addChild
             */
            p.addChild = function (childEffect) {
                this.children.push(childEffect);
                childEffect._parentCompositeEffect = this;
            };
            return CompositeEffect;
        })(gui.Effect);
        gui.CompositeEffect = CompositeEffect;
        egret.registerClass(CompositeEffect,"egret.gui.CompositeEffect");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.EffectInstance
         * @classdesc
         * 定义所有效果实例的基类
         * @extends egret.EventDispatcher
         */
        var EffectInstance = (function (_super) {
            __extends(EffectInstance, _super);
            /**
             * @method egret.gui.EffectInstance#constructor
             */
            function EffectInstance(target) {
                _super.call(this);
                /**
                 * delayTimer开始的时间
                 */
                this.delayStartTime = 0;
                /**
                 * 暂停时delayTimer经过的时间
                 */
                this.delayElapsedTime = 0;
                /**
                 * 是否显式设置了持续时间
                 */
                this.durationExplicitlySet = false;
                /**
                 * 已播放实例的次数。
                 */
                this._playCount = 0;
                /**
                 * 调用end()方法结束时，防止效果重复的的标志
                 */
                this._stopRepeat = false;
                this._duration = 500;
                this._repeatCount = 0;
                this._repeatDelay = 0;
                this._startDelay = 0;
                this.target = target;
            }
            var d = __define,c=EffectInstance;p=c.prototype;
            d(p, "_actualDuration"
                /**
                 * 实际的持续时间包含startDelay，repeatDelay，repeatCount这些值
                 */
                ,function () {
                    var value = NaN;
                    if (this.repeatCount > 0) {
                        value = this.duration * this.repeatCount + (this.repeatDelay * (this.repeatCount - 1)) + this.startDelay;
                    }
                    return value;
                }
            );
            d(p, "duration"
                /**
                 * 效果的持续时间（以毫秒为单位）。
                 * @member egret.gui.EffectInstance#duration
                 */
                ,function () {
                    if (!this.durationExplicitlySet && this.parentCompositeEffectInstance) {
                        return this.parentCompositeEffectInstance.duration;
                    }
                    else {
                        return this._duration;
                    }
                }
                ,function (value) {
                    this.durationExplicitlySet = true;
                    this._duration = value;
                }
            );
            d(p, "effect"
                /**
                 * 创建此 IEffectInstance 对象的 IEffect 对象。
                 * @member egret.gui.EffectInstance#effect
                 */
                ,function () {
                    return this._effect;
                }
                ,function (value) {
                    this._effect = value;
                }
            );
            d(p, "playheadTime"
                /**
                 * 效果的当前时间位置。
                 * 此属性的值介于 0 和总持续时间（包括该效果的 startDelay、repeatCount 和 repeatDelay）之间。
                 * @member egret.gui.EffectInstance#playheadTime
                 */
                ,function () {
                    return Math.max(this._playCount - 1, 0) * (this.duration + this.repeatDelay) + (this.playReversed ? 0 : this.startDelay);
                }
                ,function (value) {
                    this._setPlayheadTime(value);
                }
            );
            p._setPlayheadTime = function (value) {
                if (this._delayTimer && this._delayTimer.running) {
                    this._delayTimer.reset();
                    if (value < this.startDelay) {
                        this._delayTimer = new egret.Timer(this.startDelay - value, 1);
                        this.delayStartTime = egret.getTimer();
                        this._delayTimer.addEventListener(egret.TimerEvent.TIMER, this.delayTimerHandler, this);
                        this._delayTimer.start();
                    }
                    else {
                        this._playCount = 0;
                        this.play();
                    }
                }
            };
            d(p, "playReversed"
                /**
                 * 指定效果是否在反向播放，在播放之前设置此属性
                 * @member egret.gui.EffectInstance#playReversed
                 */
                ,function () {
                    return this._playReversed;
                }
                ,function (value) {
                    this._setPlayReversed(value);
                }
            );
            p._setPlayReversed = function (value) {
                this._playReversed = value;
            };
            d(p, "repeatCount"
                /**
                 * 效果的重复次数。可能的值为任何大于等于 0 的整数。
                 * @member egret.gui.EffectInstance#repeatCount
                 */
                ,function () {
                    return this._repeatCount;
                }
                ,function (value) {
                    this._repeatCount = value;
                }
            );
            d(p, "repeatDelay"
                /**
                 * 重复播放效果前需要等待的时间（以毫秒为单位）。
                 * @member egret.gui.EffectInstance#repeatDelay
                 */
                ,function () {
                    return this._repeatDelay;
                }
                ,function (value) {
                    this._repeatDelay = value;
                }
            );
            d(p, "startDelay"
                /**
                 * 开始播放效果前需要等待的时间（以毫秒为单位）。
                 * 此值可以是任何大于或等于 0 的整数。
                 * 如果使用 repeatCount 属性重复播放效果，则只在首次播放该效果时应用 startDelay 属性。
                 * @member egret.gui.EffectInstance#startDelay
                 */
                ,function () {
                    return this._startDelay;
                }
                ,function (value) {
                    this._startDelay = value;
                }
            );
            d(p, "target"
                /**
                 * 要应用此效果的对象。
                 * @member egret.gui.EffectInstance#target
                 */
                ,function () {
                    return this._target;
                }
                ,function (value) {
                    this._target = value;
                }
            );
            /**
             * 经过 startDelay 所占用的这段时间后，在目标上播放效果实例。
             * 由 Effect 类调用。在启动 EffectInstance 时，请使用此函数，而非 play() 方法。
             * @method egret.gui.EffectInstance#startEffect
             */
            p.startEffect = function () {
                if (this.startDelay > 0 && !this.playReversed) {
                    this._delayTimer = new egret.Timer(this.startDelay, 1);
                    this.delayStartTime = egret.getTimer();
                    this._delayTimer.addEventListener(egret.TimerEvent.TIMER, this.delayTimerHandler, this);
                    this._delayTimer.start();
                }
                else {
                    this.play();
                }
            };
            /**
             * 在目标上播放效果实例。改为调用 startEffect() 方法，以在 EffectInstance 上开始播放效果。
             * <p>在 EffectInstance 的子类中，必须覆盖此方法。
             * 此覆盖必须调用 super.play() 方法，以便从目标中分派 effectStart 事件。</p>
             * @method egret.gui.EffectInstance#play
             */
            p.play = function () {
                this._playCount++;
                this.dispatchEvent(new gui.EffectEvent(gui.EffectEvent.EFFECT_START, false, false, this));
                if (this.target && "dispatchEvent" in this.target) {
                    this.target.dispatchEvent(new gui.EffectEvent(gui.EffectEvent.EFFECT_START, false, false, this));
                }
            };
            /**
             * 暂停效果，直到调用 resume() 方法。
             * @method egret.gui.EffectInstance#pause
             */
            p.pause = function () {
                if (this._delayTimer && this._delayTimer.running && !isNaN(this.delayStartTime)) {
                    this._delayTimer.stop();
                    this.delayElapsedTime = egret.getTimer() - this.delayStartTime;
                }
            };
            /**
             * 停止播放效果，使目标保持当前状态。
             * 您需要通过调用 Effect.stop() 方法来调用此方法。在实现过程中，它会调用 finishEffect() 方法。
             * <p>如果调用此方法来结束播放效果，效果实例将分派 effectEnd 事件。</p>
             * @method egret.gui.EffectInstance#stop
             */
            p.stop = function () {
                if (this._delayTimer)
                    this._delayTimer.reset();
                this._stopRepeat = true;
                this.dispatchEvent(new gui.EffectEvent(gui.EffectEvent.EFFECT_STOP, false, false, this));
                if (this.target && ("dispatchEvent" in this.target))
                    this.target.dispatchEvent(new gui.EffectEvent(gui.EffectEvent.EFFECT_STOP, false, false, this));
                this.finishEffect();
            };
            /**
             * 在效果由 pause() 方法暂停后继续播放效果。
             * @method egret.gui.EffectInstance#resume
             */
            p.resume = function () {
                if (this._delayTimer && !this._delayTimer.running && !isNaN(this.delayElapsedTime)) {
                    this._delayTimer.delay = !this.playReversed ? this._delayTimer.delay - this.delayElapsedTime : this.delayElapsedTime;
                    this.delayStartTime = egret.getTimer();
                    this._delayTimer.start();
                }
            };
            /**
             * 从效果的当前位置开始反向播放效果。
             * @method egret.gui.EffectInstance#reverse
             */
            p.reverse = function () {
                if (this.repeatCount > 0)
                    this._playCount = this.repeatCount - this._playCount + 1;
            };
            /**
             * 中断当前播放的效果实例，立即跳转到效果的结束位置。
             * 通过调用 Effect.end() 方法可调用此方法。在实现过程中，它会调用 finishEffect() 方法。
             * <p>如果调用此方法来结束播放效果，效果实例将分派 effectEnd 事件。</p>
             * @method egret.gui.EffectInstance#end
             */
            p.end = function () {
                if (this._delayTimer)
                    this._delayTimer.reset();
                this._stopRepeat = true;
                this.finishEffect();
            };
            /**
             * 在完成效果播放时由 end() 方法调用。此函数将为效果目标分派 endEffect 事件。
             * @method egret.gui.EffectInstance#finishEffect
             */
            p.finishEffect = function () {
                this._playCount = 0;
                this.dispatchEvent(new gui.EffectEvent(gui.EffectEvent.EFFECT_END, false, false, this));
                if (this.target && ("dispatchEvent" in this.target)) {
                    this.target.dispatchEvent(new gui.EffectEvent(gui.EffectEvent.EFFECT_END, false, false, this));
                }
            };
            /**
             * 每次完成重复效果的迭代播放后调用。
             * @method egret.gui.EffectInstance#finishRepeat
             */
            p.finishRepeat = function () {
                if (!this._stopRepeat && this._playCount != 0 && (this._playCount < this.repeatCount || this.repeatCount == 0)) {
                    if (this.repeatDelay > 0) {
                        this._delayTimer = new egret.Timer(this.repeatDelay, 1);
                        this.delayStartTime = egret.getTimer();
                        this._delayTimer.addEventListener(egret.TimerEvent.TIMER, this.delayTimerHandler, this);
                        this._delayTimer.start();
                    }
                    else {
                        this.play();
                    }
                }
                else {
                    this.finishEffect();
                }
            };
            p._playWithNoDuration = function () {
                this.duration = 0;
                this.repeatCount = 1;
                this.repeatDelay = 0;
                this.startDelay = 0;
                this.startEffect();
            };
            p.delayTimerHandler = function (event) {
                this._delayTimer.reset();
                this.delayStartTime = NaN;
                this.delayElapsedTime = NaN;
                this.play();
            };
            return EffectInstance;
        })(egret.EventDispatcher);
        gui.EffectInstance = EffectInstance;
        egret.registerClass(EffectInstance,"egret.gui.EffectInstance",["egret.gui.IEffectInstance"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Fade
         * @classdesc
         * 淡入淡出效果
         * @extends egret.gui.Animate
         */
        var Fade = (function (_super) {
            __extends(Fade, _super);
            /**
             * @method egret.gui.Fade#constructor
             */
            function Fade(target) {
                if (target === void 0) { target = null; }
                _super.call(this, target);
                this.instanceClass = gui.FadeInstance;
            }
            var d = __define,c=Fade;p=c.prototype;
            p._initInstance = function (instance) {
                _super.prototype._initInstance.call(this, instance);
                var fadeInstance = instance;
                fadeInstance.alphaFrom = this.alphaFrom;
                fadeInstance.alphaTo = this.alphaTo;
            };
            return Fade;
        })(gui.Animate);
        gui.Fade = Fade;
        egret.registerClass(Fade,"egret.gui.Fade");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Move
         * @classdesc
         * Move 效果按 x 和 y 方向移动目标对象。
         * @extends egret.gui.AnimateTransform
         */
        var Move = (function (_super) {
            __extends(Move, _super);
            /**
             * @method egret.gui.Move#constructor
             */
            function Move(target) {
                if (target === void 0) { target = null; }
                _super.call(this, target);
                this.instanceClass = gui.AnimateTransformInstance;
            }
            var d = __define,c=Move;p=c.prototype;
            p.createInstance = function (target) {
                if (target === void 0) { target = null; }
                this.motionPaths = new Array();
                return _super.prototype.createInstance.call(this, target);
            };
            p._initInstance = function (instance) {
                this._addMotionPath("translationX", this.xFrom, this.xTo, this.xBy);
                this._addMotionPath("translationY", this.yFrom, this.yTo, this.yBy);
                _super.prototype._initInstance.call(this, instance);
            };
            return Move;
        })(gui.AnimateTransform);
        gui.Move = Move;
        egret.registerClass(Move,"egret.gui.Move");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Parallel
         * @classdesc
         * Parallel 效果同时播放多个子效果。
         * @extends egret.gui.CompositeEffect
         */
        var Parallel = (function (_super) {
            __extends(Parallel, _super);
            /**
             * @method egret.gui.Parallel#constructor
             */
            function Parallel(target) {
                if (target === void 0) { target = null; }
                _super.call(this, target);
                this.instanceClass = gui.ParallelInstance;
            }
            var d = __define,c=Parallel;p=c.prototype;
            d(p, "compositeDuration"
                ,function () {
                    var parallelDuration = 0;
                    for (var i = 0; i < this.children.length; ++i) {
                        var childDuration;
                        var child = (this.children[i]);
                        if (child instanceof gui.CompositeEffect)
                            childDuration = child.compositeDuration;
                        else
                            childDuration = child.duration;
                        childDuration = childDuration * child.repeatCount + (child.repeatDelay * (child.repeatCount - 1)) + child.startDelay;
                        parallelDuration = Math.max(parallelDuration, childDuration);
                    }
                    return parallelDuration;
                }
            );
            return Parallel;
        })(gui.CompositeEffect);
        gui.Parallel = Parallel;
        egret.registerClass(Parallel,"egret.gui.Parallel");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Rotate
         * @classdesc
         * Rotate 效果围绕转换中心旋转目标对象。
         * @extends egret.gui.AnimateTransform
         */
        var Rotate = (function (_super) {
            __extends(Rotate, _super);
            /**
             * @method egret.gui.Rotate#constructor
             */
            function Rotate(target) {
                if (target === void 0) { target = null; }
                _super.call(this, target);
                this.instanceClass = gui.AnimateTransformInstance;
            }
            var d = __define,c=Rotate;p=c.prototype;
            p.createInstance = function (target) {
                if (target === void 0) { target = null; }
                this.motionPaths = new Array();
                return _super.prototype.createInstance.call(this, target);
            };
            p._initInstance = function (instance) {
                this._addMotionPath("rotation", this.angleFrom, this.angleTo, this.angleBy);
                _super.prototype._initInstance.call(this, instance);
            };
            return Rotate;
        })(gui.AnimateTransform);
        gui.Rotate = Rotate;
        egret.registerClass(Rotate,"egret.gui.Rotate");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Scale
         * @classdesc
         * Scale 效果围绕转换中心在 x 和 y 方向上缩放目标对象
         * @extends egret.gui.AnimateTransform
         */
        var Scale = (function (_super) {
            __extends(Scale, _super);
            /**
             * @method egret.gui.Scale#constructor
             */
            function Scale(target) {
                if (target === void 0) { target = null; }
                _super.call(this, target);
                this.instanceClass = gui.AnimateTransformInstance;
            }
            var d = __define,c=Scale;p=c.prototype;
            p.createInstance = function (target) {
                if (target === void 0) { target = null; }
                this.motionPaths = new Array();
                return _super.prototype.createInstance.call(this, target);
            };
            p._initInstance = function (instance) {
                this._addMotionPath("scaleX", this.scaleXFrom, this.scaleXTo, this.scaleXBy);
                this._addMotionPath("scaleY", this.scaleYFrom, this.scaleYTo, this.scaleYBy);
                _super.prototype._initInstance.call(this, instance);
            };
            return Scale;
        })(gui.AnimateTransform);
        gui.Scale = Scale;
        egret.registerClass(Scale,"egret.gui.Scale");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Sequence
         * @classdesc
         * Sequence 效果以子效果的添加顺序依次播放多个子效果。
         * @extends egret.gui.CompositeEffect
         */
        var Sequence = (function (_super) {
            __extends(Sequence, _super);
            /**
             * @method egret.gui.Sequence#constructor
             */
            function Sequence(target) {
                if (target === void 0) { target = null; }
                _super.call(this, target);
                this.instanceClass = gui.SequenceInstance;
            }
            var d = __define,c=Sequence;p=c.prototype;
            d(p, "compositeDuration"
                ,function () {
                    var sequenceDuration = 0;
                    for (var i = 0; i < this.children.length; ++i) {
                        var childDuration;
                        var child = (this.children[i]);
                        if (child instanceof gui.CompositeEffect)
                            childDuration = child.compositeDuration;
                        else
                            childDuration = child.duration;
                        childDuration = childDuration * child.repeatCount + (child.repeatDelay * (child.repeatCount - 1)) + child.startDelay;
                        sequenceDuration += childDuration;
                    }
                    return sequenceDuration;
                }
            );
            return Sequence;
        })(gui.CompositeEffect);
        gui.Sequence = Sequence;
        egret.registerClass(Sequence,"egret.gui.Sequence");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.EaseInOutBase
         * @classdesc
         * EaseInOutBase 类是提供缓动功能的基类。
         * @implements egret.gui.IEaser
         */
        var EaseInOutBase = (function () {
            /**
             * @param easeInFraction 缓入过程所占动画播放时间的百分比。剩余即为缓出的时间。
             * 默认值为 EasingFraction.IN_OUT，它会缓入前一半时间，并缓出剩余的一半时间。
             * @method egret.gui.EaseInOutBase#constructor
             */
            function EaseInOutBase(easeInFraction) {
                if (easeInFraction === void 0) { easeInFraction = 0.5; }
                this._easeInFraction = .5;
                this.easeInFraction = easeInFraction;
            }
            var d = __define,c=EaseInOutBase;p=c.prototype;
            d(p, "easeInFraction"
                /**
                 * 缓入过程所占动画播放时间的百分比。剩余即为缓出的时间。
                 * 有效值为 0.0 到 1.0。
                 */
                ,function () {
                    return this._easeInFraction;
                }
                ,function (value) {
                    this._easeInFraction = value;
                }
            );
            p.ease = function (fraction) {
                var easeOutFraction = 1 - this._easeInFraction;
                if (fraction <= this._easeInFraction && this._easeInFraction > 0)
                    return this._easeInFraction * this._easeIn(fraction / this._easeInFraction);
                else
                    return this._easeInFraction + easeOutFraction * this._easeOut((fraction - this._easeInFraction) / easeOutFraction);
            };
            /**
             * 在动画的缓入阶段期间计算已经缓动部分要映射到的值。
             */
            p._easeIn = function (fraction) {
                return fraction;
            };
            /**
             * 在动画的缓出阶段期间计算已经缓动部分要映射到的值。
             */
            p._easeOut = function (fraction) {
                return fraction;
            };
            return EaseInOutBase;
        })();
        gui.EaseInOutBase = EaseInOutBase;
        egret.registerClass(EaseInOutBase,"egret.gui.EaseInOutBase",["egret.gui.IEaser"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Sine
         * @classdesc
         * Sine 类使用 Sine 函数定义缓动功能。
         * @extends egret.gui.EaseInOutBase
         */
        var Sine = (function (_super) {
            __extends(Sine, _super);
            /**
             * @param easeInFraction 缓入过程所占动画播放时间的百分比。剩余即为缓出的时间。
             * @method egret.gui.Sine#constructor
             */
            function Sine(easeInFraction) {
                if (easeInFraction === void 0) { easeInFraction = 0.5; }
                _super.call(this, easeInFraction);
            }
            var d = __define,c=Sine;p=c.prototype;
            /**
             * @inheritDoc
             */
            p._easeIn = function (fraction) {
                return 1 - Math.cos(fraction * Math.PI / 2);
            };
            /**
             * @inheritDoc
             */
            p._easeOut = function (fraction) {
                return Math.sin(fraction * Math.PI / 2);
            };
            return Sine;
        })(gui.EaseInOutBase);
        gui.Sine = Sine;
        egret.registerClass(Sine,"egret.gui.Sine");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="../easing/Sine.ts" />
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Animation
         * @classdesc
         * Animation 类定义在指定的时间段上在属性的开始值和结束值之间发生的动画。
         */
        var Animation = (function () {
            /**
             * @param updateFunction {Function} 动画更新时的回调函数,updateFunction(animation:Animation):void
             * @param thisObject {an}
             * @method egret.gui.Animation#constructor
             */
            function Animation(updateFunction, thisObject) {
                this._easer = Animation.defaultEaser;
                this.thisObject = null;
                /**
                 * 动画开始播放时的回调函数,只会在首次延迟等待结束时触发一次,若有重复播放，之后将触发repeatFunction。
                 * startFunction(animation:Animation):void
                 * @member egret.gui.Animation#startFunction
                 */
                this.startFunction = null;
                /**
                 * 动画播放结束时的回调函数,可以是正常播放结束，也可以是被调用了end()方法导致结束。注意：stop()方法被调用不会触发这个函数。
                 * endFunction(animation:Animation):void
                 * @member egret.gui.Animation#endFunction
                 */
                this.endFunction = null;
                /**
                 * 动画更新时的回调函数,updateFunction(animation:Animation):void
                 * @member egret.gui.Animation#updateFunction
                 */
                this.updateFunction = null;
                /**
                 * 动画被停止的回调函数，即stop()方法被调用。stopFunction(animation:Animation):void
                 * @member egret.gui.Animation#stopFunction
                 */
                this.stopFunction = null;
                /**
                 * 动画重复的回调函数，repeatFunction(animation:Animation):void
                 * @member egret.gui.Animation#repeatFunction
                 */
                this.repeatFunction = null;
                this.id = -1;
                this._doSeek = false;
                this._isPlaying = false;
                this._doReverse = false;
                this._invertValues = false;
                this.started = false;
                this.delayTime = -1;
                this.delayedStartTime = -1;
                this._playheadTime = 0;
                /**
                 * 动画的时长（以毫秒为单位），不计算由 repeatCount 属性定义的任何重复。
                 * @member egret.gui.Animation#duration
                 */
                this.duration = 500;
                this._repeatBehavior = gui.RepeatBehavior.LOOP;
                this._repeatCount = 1;
                this._repeatDelay = 0;
                this._startDelay = 0;
                /**
                 * Animation 实例所用的插补器，用于计算属性的开始值和结束值之间的值。
                 * @member egret.gui.Animation#interpolator
                 */
                this.interpolator = null;
                this._cycleTime = 0;
                this.updateFunction = updateFunction;
                this.thisObject = thisObject;
            }
            var d = __define,c=Animation;p=c.prototype;
            d(p, "easer"
                /**
                 * 此效果的缓动行为，默认为Sine(.5)
                 * @member egret.gui.Animation#easer
                 */
                ,function () {
                    return this._easer;
                }
                ,function (value) {
                    if (!value) {
                        value = Animation.defaultEaser;
                    }
                    this._easer = value;
                }
            );
            d(p, "playheadTime"
                /**
                 * 动画的总计已过去时间，包括任何开始延迟和重复。
                 * 对于播放了第一个循环的动画，此值将等于 cycleTime 的值。
                 * @member egret.gui.Animation#playheadTime
                 */
                ,function () {
                    return this._playheadTime + this.startDelay;
                }
                ,function (value) {
                    this._invertValues = false;
                    this.seek(value, true);
                }
            );
            d(p, "isPlaying"
                /**
                 * 如果为 true，则表示当前正在播放动画。
                 * 除非已播放动画且尚未停止（以编程方式或自动）或暂停它，否则该值为 false。
                 * @member egret.gui.Animation#isPlaying
                 */
                ,function () {
                    return this._isPlaying;
                }
            );
            d(p, "repeatBehavior"
                /**
                 * 设置重复动画的行为。
                 * 重复动画已将 repeatCount 属性设置为 0 或某个大于 1 的值。
                 * 此值应该为 RepeatBehavior.LOOP（意味着每次动画按相同的顺序重复）
                 * 或 RepeatBehavior.REVERSE（意味着对于每个迭代，动画都倒转方向）。
                 * @member egret.gui.Animation#repeatBehavior
                 */
                ,function () {
                    return this._repeatBehavior;
                }
                ,function (value) {
                    this._repeatBehavior = value;
                }
            );
            d(p, "repeatCount"
                /**
                 * 此动画重复的次数。值为 0 意味着它会无限期地重复。默认值为1
                 * @member egret.gui.Animation#repeatCount
                 */
                ,function () {
                    return this._repeatCount;
                }
                ,function (value) {
                    this._repeatCount = value;
                }
            );
            d(p, "repeatDelay"
                /**
                 * 在每次重复循环开始之前延迟的时间数量（以毫秒为单位）。
                 * 将此值设置为一个非零数字会恰好在其结束值处结束上一个动画循环。
                 * 但是，不延迟的重复可能会完全跳过该值，因为动画会从在一个循环的结尾附近平滑地过渡到越过下一个循环的开始处。
                 * 必须将此属性设置为大于等于 0 的一个值。
                 * @member egret.gui.Animation#repeatDelay
                 */
                ,function () {
                    return this._repeatDelay;
                }
                ,function (value) {
                    this._repeatDelay = value;
                }
            );
            d(p, "startDelay"
                /**
                 * 在动画开始之前等待的时间数量。必须将此属性设置为大于等于 0 的一个值。
                 * @member egret.gui.Animation#startDelay
                 */
                ,function () {
                    return this._startDelay;
                }
                ,function (value) {
                    this._startDelay = value;
                }
            );
            d(p, "cycleTime"
                /**
                 * 在当前周期动画中的当前毫秒位置。该值介于 0 和 duration 之间。
                 * 动画的“周期”被定义为动画的单一重复，其中 repeatCount 属性用于定义将播放的周期数。
                 * 使用 seek() 方法更改动画的位置。
                 * @member egret.gui.Animation#cycleTime
                 */
                ,function () {
                    return this._cycleTime;
                }
            );
            d(p, "cycleFraction"
                /**
                 * 在已应用缓动之后，在动画中已过去的当前部分。
                 * 此值在 0 和 1 之间。动画的“周期”被定义为动画的单一重复，其中 repeatCount 属性用于定义将播放的周期数。
                 * @member egret.gui.Animation#cycleFraction
                 */
                ,function () {
                    return this._cycleFraction;
                }
            );
            d(p, "playReversed"
                /**
                 * 如果为 true，则反向播放动画。
                 * 如果当前播放动画的方向与 playReversed 的指定值相反，则动画将以动态方式更改方向。
                 * @member egret.gui.Animation#playReversed
                 */
                ,function () {
                    return this._playReversed;
                }
                ,function (value) {
                    if (this._isPlaying) {
                        if (this._invertValues != value) {
                            this._invertValues = value;
                            this.seek(this.duration - this._cycleTime, true);
                        }
                    }
                    this._doReverse = value;
                    this._playReversed = value;
                }
            );
            /**
             * 添加动画
             */
            Animation.addAnimation = function (animation) {
                if (animation.motionPaths && animation.motionPaths.length > 0 && animation.motionPaths[0] && (animation.motionPaths[0].property == "width" || animation.motionPaths[0].property == "height")) {
                    Animation.activeAnimations.splice(0, 0, animation);
                    animation.id = 0;
                    for (var i = 1; i < Animation.activeAnimations.length; ++i)
                        (Animation.activeAnimations[i]).id = i;
                }
                else {
                    animation.id = Animation.activeAnimations.length;
                    Animation.activeAnimations.push(animation);
                }
                if (!Animation.timer) {
                    Animation.pulse();
                    Animation.timer = new egret.Timer(Animation.TIMER_RESOLUTION);
                    Animation.timer.addEventListener(egret.TimerEvent.TIMER, Animation.timerHandler, Animation);
                    Animation.timer.start();
                }
                Animation.intervalTime = Animation.currentTime;
                animation.cycleStartTime = Animation.intervalTime;
            };
            Animation.removeAnimationAt = function (index) {
                if (index === void 0) { index = 0; }
                if (index >= 0 && index < Animation.activeAnimations.length) {
                    Animation.activeAnimations.splice(index, 1);
                    var n = Animation.activeAnimations.length;
                    for (var i = index; i < n; i++) {
                        var curAnimation = (Animation.activeAnimations[i]);
                        curAnimation.id--;
                    }
                }
                Animation.stopTimerIfDone();
            };
            Animation.removeAnimation = function (animation) {
                Animation.removeAnimationAt(animation.id);
            };
            Animation.timerHandler = function (event) {
                Animation.intervalTime = Animation.pulse();
                var i = 0;
                while (i < Animation.activeAnimations.length) {
                    var incrementIndex = true;
                    var animation = (Animation.activeAnimations[i]);
                    if (animation)
                        incrementIndex = !animation.doInterval();
                    if (incrementIndex)
                        ++i;
                }
                while (Animation.delayedStartAnims.length > 0) {
                    var anim = (Animation.delayedStartAnims[0]);
                    var animStartTime = anim.delayedStartTime;
                    if (animStartTime < Animation.currentTime)
                        if (anim.playReversed)
                            anim.end();
                        else
                            anim.start();
                    else
                        break;
                }
            };
            /**
             * 计算插补值，派发更新事件。如果动画结束了则返回true
             */
            p.doInterval = function () {
                var animationEnded = false;
                var repeated = false;
                if (this._isPlaying || this._doSeek) {
                    var currentTime = Animation.intervalTime - this.cycleStartTime;
                    this._playheadTime = Animation.intervalTime - this.startTime;
                    if (currentTime >= this.duration) {
                        var numRepeats = 2;
                        if ((this.duration + this.repeatDelay) > 0)
                            numRepeats += Math.floor((this._playheadTime - this.duration) / (this.duration + this.repeatDelay));
                        if (this.repeatCount == 0 || numRepeats <= this.repeatCount) {
                            if (this.repeatDelay == 0) {
                                this._cycleTime = currentTime % this.duration;
                                this.cycleStartTime = Animation.intervalTime - this._cycleTime;
                                currentTime = this._cycleTime;
                                if (this.repeatBehavior == gui.RepeatBehavior.REVERSE) {
                                    if (this.repeatCount > 1)
                                        this._invertValues = !(numRepeats % 2);
                                    else
                                        this._invertValues = !this._invertValues;
                                }
                                repeated = true;
                            }
                            else {
                                if (this._doSeek) {
                                    this._cycleTime = currentTime % (this.duration + this.repeatDelay);
                                    if (this._cycleTime > this.duration)
                                        this._cycleTime = this.duration;
                                    this.calculateValue(this._cycleTime);
                                    this.sendUpdateEvent();
                                    return false;
                                }
                                else {
                                    this._cycleTime = this.duration;
                                    this.calculateValue(this._cycleTime);
                                    this.sendUpdateEvent();
                                    Animation.removeAnimation(this);
                                    var delayTimer = new egret.Timer(this.repeatDelay, 1);
                                    delayTimer.addEventListener(egret.TimerEvent.TIMER, this.repeat, this);
                                    delayTimer.start();
                                    return false;
                                }
                            }
                        }
                        else if (currentTime > this.duration) {
                            currentTime = this.duration;
                            this._playheadTime = this.duration;
                        }
                    }
                    this._cycleTime = currentTime;
                    this.calculateValue(currentTime);
                    if (currentTime >= this.duration && !this._doSeek) {
                        if (!this.playReversed || this.startDelay == 0) {
                            this.end();
                            animationEnded = true;
                        }
                        else {
                            this.stopAnimation();
                            this.addToDelayedAnimations(this.startDelay);
                        }
                    }
                    else {
                        if (repeated)
                            this.sendAnimationEvent("repeatFunction");
                        this.sendUpdateEvent();
                    }
                }
                return animationEnded;
            };
            /**
             * 通知目标对象更新动画
             */
            p.sendUpdateEvent = function () {
                this.sendAnimationEvent("updateFunction");
            };
            /**
             * 发送动画事件
             */
            p.sendAnimationEvent = function (eventType) {
                if (this[eventType] != null) {
                    this[eventType].call(this.thisObject, this);
                }
            };
            /**
             * 计算当前值
             */
            p.calculateValue = function (currentTime) {
                var i = 0;
                this.currentValue = {};
                if (this.duration == 0) {
                    for (i = 0; i < this.motionPaths.length; ++i) {
                        this.currentValue[this.motionPaths[i].property] = this._invertValues ? this.motionPaths[i].keyframes[0].value : this.motionPaths[i].keyframes[this.motionPaths[i].keyframes.length - 1].value;
                    }
                    return;
                }
                if (this._invertValues)
                    currentTime = this.duration - currentTime;
                this._cycleFraction = this.easer.ease(currentTime / this.duration);
                if (this.motionPaths)
                    for (i = 0; i < this.motionPaths.length; ++i)
                        this.currentValue[this.motionPaths[i].property] = this.motionPaths[i].getValue(this._cycleFraction);
            };
            p.removeFromDelayedAnimations = function () {
                if (this.delayedStartTime >= 0) {
                    for (var i = 0; i < Animation.delayedStartAnims.length; ++i) {
                        if (Animation.delayedStartAnims[i] == this) {
                            Animation.delayedStartAnims.splice(i, 1);
                            break;
                        }
                    }
                    this.delayedStartTime = -1;
                }
            };
            /**
             * 中断动画，立即跳到动画的结尾，并对 animationTarget 调用 animationEnd() 函数。
             * @method egret.gui.Animation#end
             */
            p.end = function () {
                if (this.startDelay > 0 && Animation.delayedStartAnims.length > 0) {
                    this.removeFromDelayedAnimations();
                }
                if (!this.started)
                    this.sendAnimationEvent("startFunction");
                if (this.repeatCount > 1 && this.repeatBehavior == "reverse" && (this.repeatCount % 2 == 0))
                    this._invertValues = true;
                if (!(this._doReverse && this.startDelay > 0)) {
                    this.calculateValue(this.duration);
                    this.sendUpdateEvent();
                }
                this.sendAnimationEvent("endFunction");
                if (this.isPlaying)
                    this.stopAnimation();
                else
                    Animation.stopTimerIfDone();
            };
            Animation.stopTimerIfDone = function () {
                if (Animation.timer && Animation.activeAnimations.length == 0 && Animation.delayedStartAnims.length == 0) {
                    Animation.intervalTime = NaN;
                    Animation.timer.reset();
                    Animation.timer = null;
                }
            };
            p.addToDelayedAnimations = function (timeToDelay) {
                if (!Animation.timer) {
                    Animation.pulse();
                    Animation.timer = new egret.Timer(Animation.TIMER_RESOLUTION);
                    Animation.timer.addEventListener(egret.TimerEvent.TIMER, Animation.timerHandler, Animation);
                    Animation.timer.start();
                }
                var animStartTime = Animation.currentTime + timeToDelay;
                var insertIndex = -1;
                for (var i = 0; i < Animation.delayedStartAnims.length; ++i) {
                    var timeAtIndex = Animation.delayedStartAnims[i].delayedStartTime;
                    if (animStartTime < timeAtIndex) {
                        insertIndex = i;
                        break;
                    }
                }
                if (insertIndex >= 0)
                    Animation.delayedStartAnims.splice(insertIndex, 0, this);
                else
                    Animation.delayedStartAnims.push(this);
                this.delayedStartTime = animStartTime;
            };
            /**
             * 开始动画。如果动画已在播放，则会首先停止它，然后播放它。
             * @method egret.gui.Animation#play
             */
            p.play = function () {
                this.stopAnimation();
                var i = 0;
                var j = 0;
                for (i = 0; i < this.motionPaths.length; ++i) {
                    var keyframes = this.motionPaths[i].keyframes;
                    if (isNaN(keyframes[0].time))
                        keyframes[0].time = 0;
                    else if (keyframes[0].time > 0) {
                        var startTime = keyframes[0].time;
                        keyframes.splice(0, 0, new gui.Keyframe(0, null));
                        keyframes.splice(1, 0, new gui.Keyframe(startTime - 1, null));
                        if (this.playReversed) {
                            keyframes[0].value = keyframes[2].value;
                            keyframes[1].value = keyframes[2].value;
                        }
                    }
                    for (j = 1; j < keyframes.length; ++j) {
                        if (isNaN(keyframes[j].time))
                            keyframes[j].time = this.duration;
                    }
                }
                for (i = 0; i < this.motionPaths.length; ++i)
                    this.motionPaths[i]._scaleKeyframes(this.duration);
                if (this._doReverse)
                    this._invertValues = true;
                if (this.startDelay > 0 && !this.playReversed)
                    this.addToDelayedAnimations(this.startDelay);
                else
                    this.start();
            };
            /**
             * 前进到指定位置
             */
            p.seek = function (playheadTime, includeStartDelay) {
                if (includeStartDelay === void 0) { includeStartDelay = false; }
                this.startTime = this.cycleStartTime = Animation.intervalTime - playheadTime;
                this._doSeek = true;
                if (!this._isPlaying || this.playReversed) {
                    var isPlayingTmp = this._isPlaying;
                    Animation.intervalTime = Animation.currentTime;
                    if (includeStartDelay && this.startDelay > 0) {
                        if (this.delayedStartTime >= 0) {
                            this.removeFromDelayedAnimations();
                            var postDelaySeekTime = playheadTime - this.startDelay;
                            if (this.playReversed)
                                postDelaySeekTime -= this.duration;
                            if (postDelaySeekTime < 0) {
                                this.addToDelayedAnimations(this.startDelay - playheadTime);
                                return;
                            }
                            else {
                                playheadTime -= this.startDelay;
                                if (!this.isPlaying)
                                    this.start();
                                this.startTime = this.cycleStartTime = Animation.intervalTime - playheadTime;
                                this.doInterval();
                                this._doSeek = false;
                                return;
                            }
                        }
                    }
                    if (!isPlayingTmp) {
                        this.sendAnimationEvent("startFunction");
                        this.setupInterpolation();
                    }
                    this.startTime = this.cycleStartTime = Animation.intervalTime - playheadTime;
                }
                this.doInterval();
                this._doSeek = false;
            };
            /**
             * 设置数组插补器
             */
            p.setupInterpolation = function () {
                if (this.interpolator && this.motionPaths)
                    for (var i = 0; i < this.motionPaths.length; ++i)
                        this.motionPaths[i].interpolator = this.interpolator;
            };
            /**
             * 从当前位置反向播放效果
             * @method egret.gui.Animation#reverse
             */
            p.reverse = function () {
                if (this._isPlaying) {
                    this._doReverse = false;
                    this.seek(this.duration - this._cycleTime);
                    this._invertValues = !this._invertValues;
                }
                else {
                    this._doReverse = !this._doReverse;
                }
            };
            /**
             * 在调用 resume() 方法之前暂停该效果。如果在 resume() 之前调用 stop()，则无法继续该动画。
             * @method egret.gui.Animation#pause
             */
            p.pause = function () {
                if (this.delayedStartTime >= 0) {
                    this.delayTime = this.delayedStartTime - Animation.currentTime;
                    this.removeFromDelayedAnimations();
                }
                this._isPlaying = false;
            };
            p.stopAnimation = function () {
                this.removeFromDelayedAnimations();
                if (this.id >= 0) {
                    Animation.removeAnimationAt(this.id);
                    this.id = -1;
                    this._invertValues = false;
                    this._isPlaying = false;
                }
            };
            /**
             * 停止播放动画，且结束时不调用 end() 方法。将对 animationTarget 调用 animationStop() 函数。
             * @method egret.gui.Animation#stop
             */
            p.stop = function () {
                this.stopAnimation();
                this.sendAnimationEvent("stopFunction");
            };
            /**
             * 在效果由 pause() 方法暂停后继续播放效果。
             * @method egret.gui.Animation#resume
             */
            p.resume = function () {
                this._isPlaying = true;
                if (this.delayTime >= 0) {
                    this.addToDelayedAnimations(this.delayTime);
                }
                else {
                    this.cycleStartTime = Animation.intervalTime - this._cycleTime;
                    this.startTime = Animation.intervalTime - this._playheadTime;
                    if (this._doReverse) {
                        this.reverse();
                        this._doReverse = false;
                    }
                }
            };
            p.repeat = function (event) {
                if (event === void 0) { event = null; }
                if (this.repeatBehavior == gui.RepeatBehavior.REVERSE)
                    this._invertValues = !this._invertValues;
                this.calculateValue(0);
                this.sendAnimationEvent("repeatFunction");
                this.sendUpdateEvent();
                Animation.addAnimation(this);
            };
            p.start = function (event) {
                if (event === void 0) { event = null; }
                var actualStartTime = 0;
                if (!this.playReversed && this.delayedStartTime >= 0) {
                    var overrun = Animation.currentTime - this.delayedStartTime;
                    if (overrun > 0)
                        actualStartTime = Math.min(overrun, this.duration);
                    this.removeFromDelayedAnimations();
                }
                this.sendAnimationEvent("startFunction");
                this.setupInterpolation();
                this.calculateValue(0);
                this.sendUpdateEvent();
                Animation.addAnimation(this);
                this.startTime = this.cycleStartTime;
                this._isPlaying = true;
                if (actualStartTime > 0)
                    this.seek(actualStartTime);
                this.started = true;
            };
            Animation.pulse = function () {
                if (Animation.startTime < 0) {
                    Animation.startTime = egret.getTimer();
                    Animation._currentTime = 0;
                    return Animation._currentTime;
                }
                Animation._currentTime = egret.getTimer() - Animation.startTime;
                return Animation._currentTime;
            };
            d(Animation, "currentTime"
                ,function () {
                    if (Animation._currentTime < 0) {
                        return Animation.pulse();
                    }
                    return Animation._currentTime;
                }
            );
            Animation.TIMER_RESOLUTION = 1000 / 60;
            Animation.defaultEaser = new gui.Sine(.5);
            /**
             * 用于计算当前帧的时间
             */
            Animation.intervalTime = NaN;
            Animation.activeAnimations = new Array();
            Animation.timer = null;
            Animation.delayedStartAnims = new Array();
            Animation.startTime = -1;
            Animation._currentTime = -1;
            return Animation;
        })();
        gui.Animation = Animation;
        egret.registerClass(Animation,"egret.gui.Animation");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Keyframe
         * @classdesc
         * Keyframe 类用于定义位于效果过程中某个特定时间的属性的值。
         */
        var Keyframe = (function () {
            /**
             * @param time 以毫秒为单位的时间，此关键帧的效果目标应该在此时间处具有 value 参数指定的值。
             * @param value 效果目标在给定的 time 处应该具有的值。
             * @param valueBy 可选参数，如果提供该可选参数，
             * 则可以通过将 valueBy 与 MotionPath 对象的关键帧集合中的前一个关键帧的 value 相加来动态地计算 value。
             * 如果是序列中的第一个 Keyframe，则会忽略此值
             * @method egret.gui.Keyframe#constructor
             */
            function Keyframe(time, value, valueBy) {
                if (time === void 0) { time = NaN; }
                if (value === void 0) { value = null; }
                if (valueBy === void 0) { valueBy = null; }
                this.value = value;
                this.time = time;
                this.valueBy = valueBy;
            }
            var d = __define,c=Keyframe;p=c.prototype;
            /**
             * 返回此 Keyframe 对象的副本。
             */
            p.clone = function () {
                var kf = new Keyframe(this.time, this.value, this.valueBy);
                kf.easer = this.easer;
                kf._timeFraction = this._timeFraction;
                return kf;
            };
            return Keyframe;
        })();
        gui.Keyframe = Keyframe;
        egret.registerClass(Keyframe,"egret.gui.Keyframe");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.MotionPath
         * @classdesc
         * MotionPath 类定义效果的 Keyframe 对象的集合，以及要设置动画的目标上属性的名称。
         */
        var MotionPath = (function () {
            /**
             * @param property 要设置动画的目标上属性的名称。
             * @method egret.gui.MotionPath#constructor
             */
            function MotionPath(property) {
                if (property === void 0) { property = null; }
                this.interpolator = gui.NumberInterpolator.getInstance();
                this.property = property;
            }
            var d = __define,c=MotionPath;p=c.prototype;
            /**
             * 返回此 MotionPath 对象的副本（包含每个关键帧的副本）。
             */
            p.clone = function () {
                var mp = new MotionPath(this.property);
                mp.interpolator = this.interpolator;
                if (this.keyframes !== null) {
                    mp.keyframes = new Array();
                    for (var i = 0; i < this.keyframes.length; ++i)
                        mp.keyframes[i] = this.keyframes[i].clone();
                }
                return mp;
            };
            /**
             * 计算每一个关键帧的timeFraction值
             */
            p._scaleKeyframes = function (duration) {
                var n = this.keyframes.length;
                for (var i = 0; i < n; ++i) {
                    var kf = this.keyframes[i];
                    kf._timeFraction = kf.time / duration;
                }
            };
            /**
             * 给定已过去时间部分的情况下，计算并返回一个内插值。
             * 该函数决定该部分所处于的关键帧时间间隔，
             * 然后在该时间间隔内插补该时间间隔的定界关键帧值之间的值。
             * @param fraction 效果的总体持续时间部分（从 0.0 到 1.0 之间的值）。
             * @return 内插值
             */
            p.getValue = function (fraction) {
                if (!this.keyframes)
                    return null;
                var n = this.keyframes.length;
                if (n == 2 && this.keyframes[1]._timeFraction == 1) {
                    var easedF = (this.keyframes[1].easer != null) ? this.keyframes[1].easer.ease(fraction) : fraction;
                    return this.interpolator.interpolate(easedF, this.keyframes[0].value, this.keyframes[1].value);
                }
                if (isNaN(this.keyframes[0]._timeFraction))
                    this._scaleKeyframes(this.keyframes[this.keyframes.length - 1].time);
                var prevT = 0;
                var prevValue = this.keyframes[0].value;
                for (var i = 1; i < n; ++i) {
                    var kf = this.keyframes[i];
                    if (fraction >= prevT && fraction < kf._timeFraction) {
                        var t = (fraction - prevT) / (kf._timeFraction - prevT);
                        var easedT = (kf.easer != null) ? kf.easer.ease(t) : t;
                        return this.interpolator.interpolate(easedT, prevValue, kf.value);
                    }
                    prevT = kf._timeFraction;
                    prevValue = kf.value;
                }
                return this.keyframes[n - 1].value;
            };
            return MotionPath;
        })();
        gui.MotionPath = MotionPath;
        egret.registerClass(MotionPath,"egret.gui.MotionPath");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.RepeatBehavior
         * @classdesc
         * RepeatBehavior类用于定义效果的重复行为的常量
         */
        var RepeatBehavior = (function () {
            function RepeatBehavior() {
            }
            var d = __define,c=RepeatBehavior;p=c.prototype;
            /**
             * 指定在每个迭代上重复的动画在前进方向上的进度。
             */
            RepeatBehavior.LOOP = "loop";
            /**
             * 指定重复动画应该在每个迭代上倒转方向。
             * 例如，反向动画在偶数迭代上向前播放，而在奇数迭代上反向播放。
             */
            RepeatBehavior.REVERSE = "reverse";
            return RepeatBehavior;
        })();
        gui.RepeatBehavior = RepeatBehavior;
        egret.registerClass(RepeatBehavior,"egret.gui.RepeatBehavior");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SimpleMotionPath
         * @classdesc
         * SimpleMotionPath 类是只有两个关键帧的MotionPath的简单实现
         * @extends egret.gui.MotionPath
         */
        var SimpleMotionPath = (function (_super) {
            __extends(SimpleMotionPath, _super);
            /**
             * 您可以同时指定 valueFrom 和 valueTo 参数，
             * 也可以在指定 valueBy 参数的同时指定 valueFrom 或 valueTo 参数。
             * 如果忽略这些参数，则会从效果目标计算它们。
             * @param property 正在设置动画的属性的名称。
             * @param valueFrom 属性的初始值。
             * @param valueTo 属性的最终值。
             * @param valueBy 用于指定 delta 的可选参数，该 delta 用于计算 from 或 to 值（如果其中一个值被忽略）。
             * @method egret.gui.SimpleMotionPath#constructor
             */
            function SimpleMotionPath(property, valueFrom, valueTo, valueBy) {
                if (property === void 0) { property = null; }
                if (valueFrom === void 0) { valueFrom = null; }
                if (valueTo === void 0) { valueTo = null; }
                if (valueBy === void 0) { valueBy = null; }
                _super.call(this);
                this.property = property;
                this.keyframes = [new gui.Keyframe(0, valueFrom), new gui.Keyframe(NaN, valueTo, valueBy)];
            }
            var d = __define,c=SimpleMotionPath;p=c.prototype;
            d(p, "valueFrom"
                /**
                 * 动画过程中属性的起始值。
                 */
                ,function () {
                    return this.keyframes[0].value;
                }
                ,function (value) {
                    this.keyframes[0].value = value;
                }
            );
            d(p, "valueTo"
                /**
                 * 已命名的属性将要设置动画的值。
                 */
                ,function () {
                    return this.keyframes[this.keyframes.length - 1].value;
                }
                ,function (value) {
                    this.keyframes[this.keyframes.length - 1].value = value;
                }
            );
            d(p, "valueBy"
                /**
                 * 可指定用于计算 valueFrom 或 valueTo 值的 delta 的可选属性。
                 */
                ,function () {
                    return this.keyframes[this.keyframes.length - 1].valueBy;
                }
                ,function (value) {
                    this.keyframes[this.keyframes.length - 1].valueBy = value;
                }
            );
            return SimpleMotionPath;
        })(gui.MotionPath);
        gui.SimpleMotionPath = SimpleMotionPath;
        egret.registerClass(SimpleMotionPath,"egret.gui.SimpleMotionPath");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Bounce
         * @classdesc
         * Bounce 类实现缓动功能，该功能模拟目标对象上的重力牵引和回弹目标对象。
         * @implements egret.gui.IEaser
         */
        var Bounce = (function () {
            /**
             * @method egret.gui.Bounce#constructor
             */
            function Bounce() {
            }
            var d = __define,c=Bounce;p=c.prototype;
            p.ease = function (fraction) {
                return this.easeOut(fraction, 0, 1, 1);
            };
            p.easeOut = function (t, b, c, d) {
                if ((t /= d) < (1 / 2.75))
                    return c * (7.5625 * t * t) + b;
                else if (t < (2 / 2.75))
                    return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;
                else if (t < (2.5 / 2.75))
                    return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;
                else
                    return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;
            };
            return Bounce;
        })();
        gui.Bounce = Bounce;
        egret.registerClass(Bounce,"egret.gui.Bounce",["egret.gui.IEaser"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Elastic
         * @classdesc
         * Elastic 类实现缓动功能，此时目标对象移动是由一个指数衰减正弦波定义的。
         * @implements egret.gui.IEaser
         */
        var Elastic = (function () {
            /**
             * @method egret.gui.Elastic#constructor
             */
            function Elastic() {
            }
            var d = __define,c=Elastic;p=c.prototype;
            p.ease = function (fraction) {
                return this.easeOut(fraction, 0, 1, 1);
            };
            p.easeOut = function (t, b, c, d, a, p) {
                if (a === void 0) { a = 0; }
                if (p === void 0) { p = 0; }
                if (t == 0)
                    return b;
                if ((t /= d) == 1)
                    return b + c;
                if (!p)
                    p = d * 0.3;
                var s;
                if (!a || a < Math.abs(c)) {
                    a = c;
                    s = p / 4;
                }
                else {
                    s = p / (2 * Math.PI) * Math.asin(c / a);
                }
                return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
            };
            return Elastic;
        })();
        gui.Elastic = Elastic;
        egret.registerClass(Elastic,"egret.gui.Elastic",["egret.gui.IEaser"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.Power
         * @classdesc
         * Power 类通过使用多项式表达式定义缓动功能。
         * @extends egret.gui.EaseInOutBase
         */
        var Power = (function (_super) {
            __extends(Power, _super);
            /**
             * @param easeInFraction 在加速阶段中整个持续时间的部分，在 0.0 和 1.0 之间。
             * @param exponent 在缓动计算中使用的指数。exponent 属性的值越大，加速和减速的速率越快。
             * @method egret.gui.Power#constructor
             */
            function Power(easeInFraction, exponent) {
                if (easeInFraction === void 0) { easeInFraction = 0.5; }
                if (exponent === void 0) { exponent = 2; }
                _super.call(this, easeInFraction);
                this.exponent = exponent;
            }
            var d = __define,c=Power;p=c.prototype;
            d(p, "exponent"
                /**
                 * 在缓动计算中使用的指数。exponent 属性的值越大，加速和减速的速率越快。
                 */
                ,function () {
                    return this._exponent;
                }
                ,function (value) {
                    this._exponent = value;
                }
            );
            /**
             * @inheritDoc
             */
            p._easeIn = function (fraction) {
                return Math.pow(fraction, this._exponent);
            };
            /**
             * @inheritDoc
             */
            p._easeOut = function (fraction) {
                return 1 - Math.pow((1 - fraction), this._exponent);
            };
            return Power;
        })(gui.EaseInOutBase);
        gui.Power = Power;
        egret.registerClass(Power,"egret.gui.Power");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.AnimateInstance
         * @classdesc
         * AnimateInstance 类用于实现 Animate 效果的实例类
         * @extends egret.gui.EffectInstance
         */
        var AnimateInstance = (function (_super) {
            __extends(AnimateInstance, _super);
            /**
             * @method egret.gui.AnimateInstance#constructor
             */
            function AnimateInstance(target) {
                _super.call(this, target);
                /**
                 * 样式属性的字典
                 */
                this.isStyleMap = {};
                this._seekTime = 0;
                this.numUpdateListeners = 0;
            }
            var d = __define,c=AnimateInstance;p=c.prototype;
            d(p, "motionPaths"
                /**
                 * MotionPath 对象集，它定义随着时间的推移 Animation 将设置动画的属性和值。
                 * @member egret.gui.AnimateInstance#motionPaths
                 */
                ,function () {
                    return this._motionPaths;
                }
                ,function (value) {
                    if (!this._motionPaths)
                        this._motionPaths = value;
                }
            );
            d(p, "easer"
                /**
                 * 此效果的缓动行为
                 * @member egret.gui.AnimateInstance#easer
                 */
                ,function () {
                    return this._easer;
                }
                ,function (value) {
                    this._easer = value;
                }
            );
            d(p, "interpolator"
                /**
                 * Animation 实例所用的插补器，用于计算属性的开始值和结束值之间的值。
                 * @member egret.gui.AnimateInstance#interpolator
                 */
                ,function () {
                    return this._interpolator;
                }
                ,function (value) {
                    this._interpolator = value;
                }
            );
            d(p, "repeatBehavior"
                /**
                 * 设置重复动画的行为。
                 * 重复动画已将 repeatCount 属性设置为 0 或某个大于 1 的值。
                 * 此值应该为 RepeatBehavior.LOOP（意味着每次动画按相同的顺序重复）
                 * 或 RepeatBehavior.REVERSE（意味着对于每个迭代，动画都倒转方向）。
                 * @member egret.gui.AnimateInstance#repeatBehavior
                 */
                ,function () {
                    return this._repeatBehavior;
                }
                ,function (value) {
                    this._repeatBehavior = value;
                }
            );
            p._setPlayReversed = function (value) {
                _super.prototype._setPlayReversed.call(this, value);
                if (value && this.animation)
                    this.animation.reverse();
                this.reverseAnimation = value;
            };
            d(p, "playheadTime"
                /**
                 *  @inheritDoc
                 */
                ,function () {
                    return this.animation ? this.animation.playheadTime : this._seekTime;
                }
                ,function (value) {
                    if (this.animation)
                        this.animation.playheadTime = value;
                    this._seekTime = value;
                }
            );
            /**
             * @inheritDoc
             */
            p.pause = function () {
                _super.prototype.pause.call(this);
                if (this.animation)
                    this.animation.pause();
            };
            /**
             * @inheritDoc
             */
            p.stop = function () {
                _super.prototype.stop.call(this);
                if (this.animation)
                    this.animation.stop();
            };
            /**
             * @inheritDoc
             */
            p.resume = function () {
                _super.prototype.resume.call(this);
                if (this.animation)
                    this.animation.resume();
            };
            /**
             * @inheritDoc
             */
            p.reverse = function () {
                _super.prototype.reverse.call(this);
                if (this.animation)
                    this.animation.reverse();
                this.reverseAnimation = !this.reverseAnimation;
            };
            /**
             * @inheritDoc
             */
            p.end = function () {
                if (this.animation) {
                    this.animation.end();
                    this.animation = null;
                }
                _super.prototype.end.call(this);
            };
            /**
             * @inheritDoc
             */
            p.startEffect = function () {
                //TODO?
                this.play();
            };
            /**
             * @inheritDoc
             */
            p.play = function () {
                _super.prototype.play.call(this);
                if (!this.motionPaths || this.motionPaths.length == 0) {
                    var timer = new egret.Timer(this.duration, 1);
                    timer.addEventListener(egret.TimerEvent.TIMER, this.noopAnimationHandler, this);
                    timer.start();
                    return;
                }
                this.isStyleMap = new Array(this.motionPaths.length);
                var addWidthMP;
                var addHeightMP;
                var i = 0;
                var j = 0;
                for (i = 0; i < this.motionPaths.length; ++i) {
                    var mp = (this.motionPaths[i]);
                    var keyframes = mp.keyframes;
                    if (!keyframes)
                        continue;
                    if (this.interpolator)
                        mp.interpolator = this.interpolator;
                    if (this.duration > 0)
                        for (j = 0; j < keyframes.length; ++j)
                            if (!isNaN(keyframes[j].time))
                                this.duration = Math.max(this.duration, keyframes[j].time);
                }
                if (addWidthMP)
                    this.motionPaths.push(new gui.SimpleMotionPath("width"));
                if (addHeightMP)
                    this.motionPaths.push(new gui.SimpleMotionPath("height"));
                this.animation = new gui.Animation(this.animationUpdate, this);
                this.animation.duration = this.duration;
                this.animation.startFunction = this.animationStart;
                this.animation.endFunction = this.animationEnd;
                this.animation.stopFunction = this.animationStop;
                this.animation.repeatFunction = this.animationRepeat;
                this.animation.motionPaths = this.motionPaths;
                if (this.reverseAnimation)
                    this.animation.playReversed = true;
                this.animation.interpolator = this.interpolator;
                this.animation.repeatCount = this.repeatCount;
                this.animation.repeatDelay = this.repeatDelay;
                this.animation.repeatBehavior = this.repeatBehavior;
                this.animation.easer = this.easer;
                this.animation.startDelay = this.startDelay;
                this.animation.play();
                if (this._seekTime > 0)
                    this.animation.playheadTime = this._seekTime;
            };
            /**
             * 应用动画对应的属性值
             * @method egret.gui.AnimateInstance#applyValues
             */
            p.applyValues = function (anim) {
                for (var i = 0; i < this.motionPaths.length; ++i) {
                    var prop = this.motionPaths[i].property;
                    this.setValue(prop, anim.currentValue[prop]);
                }
            };
            p._isValidValue = function (value) {
                return (typeof (value) == "number" && !isNaN(value)) || (!(typeof (value) == "number") && value !== null);
            };
            /**
             * 遍历motionPaths，用计算的值替换null。
             */
            p.finalizeValues = function () {
                var j = 0;
                var prevValue;
                for (var i = 0; i < this.motionPaths.length; ++i) {
                    var motionPath = (this.motionPaths[i]);
                    var keyframes = motionPath.keyframes;
                    if (!keyframes || keyframes.length == 0)
                        continue;
                    if (!this._isValidValue(keyframes[0].value)) {
                        if (keyframes.length > 0 && this._isValidValue(keyframes[1].valueBy) && this._isValidValue(keyframes[1].value)) {
                            keyframes[0].value = motionPath.interpolator.decrement(keyframes[1].value, keyframes[1].valueBy);
                        }
                        else {
                            keyframes[0].value = this.getCurrentValue(motionPath.property);
                        }
                    }
                    prevValue = keyframes[0].value;
                    for (j = 1; j < keyframes.length; ++j) {
                        var kf = (keyframes[j]);
                        if (!this._isValidValue(kf.value)) {
                            if (this._isValidValue(kf.valueBy))
                                kf.value = motionPath.interpolator.increment(prevValue, kf.valueBy);
                            else {
                                if (j <= (keyframes.length - 2) && this._isValidValue(keyframes[j + 1].value) && this._isValidValue(keyframes[j + 1].valueBy)) {
                                    kf.value = motionPath.interpolator.decrement(keyframes[j + 1].value, keyframes[j + 1].valueBy);
                                }
                                else {
                                    kf.value = prevValue;
                                }
                            }
                        }
                        prevValue = kf.value;
                    }
                }
            };
            p.animationStart = function (animation) {
                if (this.disableLayout) {
                    this.cacheConstraints();
                }
                else if (this.disabledConstraintsMap) {
                    for (var constraint in this.disabledConstraintsMap)
                        this.cacheConstraint(constraint);
                    this.disabledConstraintsMap = null;
                }
                this.finalizeValues();
            };
            p.animationUpdate = function (animation) {
                this.applyValues(animation);
                if (this.numUpdateListeners > 0) {
                    var event = new gui.EffectEvent(gui.EffectEvent.EFFECT_UPDATE);
                    event.effectInstance = this;
                    this.dispatchEvent(event);
                }
            };
            p.animationRepeat = function (animation) {
                var event = new gui.EffectEvent(gui.EffectEvent.EFFECT_REPEAT);
                event.effectInstance = this;
                this.dispatchEvent(event);
            };
            p.animationCleanup = function () {
                if (this.disableLayout) {
                    this.reenableConstraints();
                }
            };
            p.animationEnd = function (animation) {
                this.animationCleanup();
                this.finishEffect();
            };
            p.animationStop = function (animation) {
                this.animationCleanup();
            };
            p.noopAnimationHandler = function (event) {
                this.finishEffect();
            };
            p.addEventListener = function (type, listener, thisObject, useCapture, priority) {
                if (useCapture === void 0) { useCapture = false; }
                if (priority === void 0) { priority = 0; }
                _super.prototype.addEventListener.call(this, type, listener, thisObject, useCapture, priority);
                if (type == gui.EffectEvent.EFFECT_UPDATE)
                    ++this.numUpdateListeners;
            };
            p.removeEventListener = function (type, listener, useCapture) {
                if (useCapture === void 0) { useCapture = false; }
                _super.prototype.removeEventListener.call(this, type, listener, this, useCapture);
                if (type == gui.EffectEvent.EFFECT_UPDATE)
                    --this.numUpdateListeners;
            };
            /**
             * 恢复布局属性
             */
            p.reenableConstraint = function (name) {
                var value = this.constraintsHolder[name];
                if (value !== undefined) {
                    if (name in this.target)
                        this.target[name] = value;
                    else
                        this.target.setStyle(name, value);
                    delete this.constraintsHolder[name];
                }
                return value;
            };
            /**
             * 恢复所有布局属性
             */
            p.reenableConstraints = function () {
                if (this.constraintsHolder) {
                    var left = this.reenableConstraint("left");
                    var right = this.reenableConstraint("right");
                    var top = this.reenableConstraint("top");
                    var bottom = this.reenableConstraint("bottom");
                    this.reenableConstraint("horizontalCenter");
                    this.reenableConstraint("verticalCenter");
                    this.constraintsHolder = null;
                    if (left != undefined && right != undefined && "explicitWidth" in this.target)
                        this.target.width = this.oldWidth;
                    if (top != undefined && bottom != undefined && "explicitHeight" in this.target)
                        this.target.height = this.oldHeight;
                }
            };
            /**
             * 缓存布局属性
             */
            p.cacheConstraint = function (name) {
                var isProperty = (name in this.target);
                var value;
                if (isProperty)
                    value = this.target[name];
                else
                    value = this.target.getStyle(name);
                if (!isNaN(value) && value != null) {
                    if (!this.constraintsHolder)
                        this.constraintsHolder = {};
                    this.constraintsHolder[name] = value;
                    if (isProperty)
                        this.target[name] = NaN;
                    else if ("setStyle" in this.target)
                        this.target.setStyle(name, undefined);
                }
                return value;
            };
            /**
             * 缓存所有布局属性
             */
            p.cacheConstraints = function () {
                var left = this.cacheConstraint("left");
                var right = this.cacheConstraint("right");
                var top = this.cacheConstraint("top");
                var bottom = this.cacheConstraint("bottom");
                this.cacheConstraint("verticalCenter");
                this.cacheConstraint("horizontalCenter");
                if (left != undefined && right != undefined && "explicitWidth" in this.target) {
                    var w = this.target.width;
                    this.oldWidth = this.target.explicitWidth;
                    this.target.width = w;
                }
                if (top != undefined && bottom != undefined && "explicitHeight" in this.target) {
                    var h = this.target.height;
                    this.oldHeight = this.target.explicitHeight;
                    this.target.height = h;
                }
            };
            p._setupStyleMapEntry = function (property) {
                if (this.isStyleMap[property] == undefined) {
                    if (property in this.target) {
                        this.isStyleMap[property] = false;
                    }
                    else {
                        try {
                            this.target.getStyle(property);
                            this.isStyleMap[property] = true;
                        }
                        catch (err) {
                            throw new Error("propNotPropOrStyle");
                        }
                    }
                }
            };
            p.setValue = function (property, value) {
                this._setupStyleMapEntry(property);
                if (!this.isStyleMap[property])
                    this.target[property] = value;
                else
                    this.target.setStyle(property, value);
            };
            p.getCurrentValue = function (property) {
                this._setupStyleMapEntry(property);
                if (!this.isStyleMap[property])
                    return this.target[property];
                else
                    return this.target.getStyle(property);
            };
            return AnimateInstance;
        })(gui.EffectInstance);
        gui.AnimateInstance = AnimateInstance;
        egret.registerClass(AnimateInstance,"egret.gui.AnimateInstance");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.AnimateTransformInstance
         * @classdesc
         * AnimateTransformInstance 类用于实现 AnimateTransform 效果的实例类
         * @extends egret.gui.AnimateInstance
         */
        var AnimateTransformInstance = (function (_super) {
            __extends(AnimateTransformInstance, _super);
            /**
             * @method egret.gui.AnimateTransformInstance#constructor
             */
            function AnimateTransformInstance(target) {
                _super.call(this, target);
                /**
                 * 变换效果开始的标志
                 */
                this.started = false;
                this.instanceStartTime = 0;
                /**
                 * 储存当前的属性值
                 */
                this.currentValues = {
                    rotation: NaN,
                    scaleX: NaN,
                    scaleY: NaN,
                    translationX: NaN,
                    translationY: NaN
                };
                /**
                 * 如果为 true，则已经初始化与该转换相关的效果的此单一实例。
                 * 此属性供 AnimateTransform 使用，以防止在将多个转换效果集成到此单一实例中时重复初始化该实例。
                 */
                this.initialized = false;
            }
            var d = __define,c=AnimateTransformInstance;p=c.prototype;
            p.startEffect = function () {
                if (!this.started) {
                    this.started = true;
                    _super.prototype.startEffect.call(this);
                }
            };
            p.insertKeyframe = function (keyframes, newKF, startDelay, first) {
                if (startDelay === void 0) { startDelay = 0; }
                if (first === void 0) { first = false; }
                newKF.time += startDelay;
                for (var i = 0; i < keyframes.length; i++) {
                    if (keyframes[i].time >= newKF.time) {
                        if (keyframes[i].time == newKF.time) {
                            if (first) {
                                newKF.time += .01;
                                keyframes.splice(i + 1, 0, newKF);
                            }
                            else {
                                newKF.time -= .01;
                                keyframes.splice(i, 0, newKF);
                            }
                        }
                        else {
                            keyframes.splice(i, 0, newKF);
                        }
                        return;
                    }
                }
                keyframes.push(newKF);
            };
            /**
             * 使用相对于最外侧的 parent 效果的开始时间，将一个 MotionPath 对象添加到此实例中的 MotionPath 对象集中。
             * 对于在与新的 MotionPath 对象相同的属性上起作用的此效果实例，
             * 如果已经存在一个 MotionPath 对象，则只会将新 MotionPath 的关键帧添加到现有 MotionPath 中。
             * @member egret.gui.AnimateTransformInstance#addMotionPath
             */
            p.addMotionPath = function (newMotionPath, newEffectStartTime) {
                if (newEffectStartTime === void 0) { newEffectStartTime = 0; }
                var added = false;
                if (this.motionPaths) {
                    var i = 0;
                    var j = 0;
                    var mp;
                    var n = this.motionPaths.length;
                    if (newEffectStartTime < this.instanceStartTime) {
                        var deltaStartTime = this.instanceStartTime - newEffectStartTime;
                        for (i = 0; i < n; i++) {
                            mp = (this.motionPaths[i]);
                            for (j = 0; j < mp.keyframes.length; j++)
                                mp.keyframes[j].time += deltaStartTime;
                        }
                        this.instanceStartTime = newEffectStartTime;
                    }
                    for (i = 0; i < n; i++) {
                        mp = (this.motionPaths[i]);
                        if (mp.property == newMotionPath.property) {
                            for (j = 0; j < newMotionPath.keyframes.length; j++) {
                                this.insertKeyframe(mp.keyframes, newMotionPath.keyframes[j], (newEffectStartTime - this.instanceStartTime), (j == 0));
                            }
                            added = true;
                            break;
                        }
                    }
                }
                else {
                    this.motionPaths = new Array();
                    this.instanceStartTime = newEffectStartTime;
                }
                if (!added) {
                    if (newEffectStartTime > this.instanceStartTime) {
                        for (j = 0; j < newMotionPath.keyframes.length; j++)
                            newMotionPath.keyframes[j].time += (newEffectStartTime - this.instanceStartTime);
                    }
                    this.motionPaths.push(newMotionPath);
                }
                n = this.motionPaths.length;
                for (i = 0; i < n; i++) {
                    mp = (this.motionPaths[i]);
                    var kf = mp.keyframes[mp.keyframes.length - 1];
                    if (!isNaN(kf.time))
                        this.duration = Math.max(this.duration, kf.time);
                }
            };
            p.play = function () {
                if (this.motionPaths) {
                    var i = 0;
                    var j = 0;
                    this.updateTransformCenter();
                    var adjustXY = (this.transformCenter.x != 0 || this.transformCenter.y != 0);
                    for (i = 0; i < this.motionPaths.length; ++i) {
                        var animProp = this.motionPaths[i];
                        if (adjustXY && (animProp.property == "translationX" || animProp.property == "translationY")) {
                            for (j = 0; j < animProp.keyframes.length; ++j) {
                                var kf = animProp.keyframes[j];
                                if (this._isValidValue(kf.value)) {
                                    if (animProp.property == "translationX") {
                                        kf.value += this.transformCenter.x;
                                    }
                                    else {
                                        kf.value += this.transformCenter.y;
                                    }
                                }
                            }
                        }
                    }
                }
                _super.prototype.play.call(this);
            };
            p.animationEnd = function (animation) {
                this.started = false;
                _super.prototype.animationEnd.call(this, animation);
            };
            /**
             * 更新转换中心
             */
            p.updateTransformCenter = function () {
                if (!this.transformCenter)
                    this.transformCenter = new egret.Point(0, 0);
                if (this.autoCenterTransform) {
                    this.transformCenter.x = this.target.width / 2;
                    this.transformCenter.y = this.target.height / 2;
                }
            };
            p.getCurrentValue = function (property) {
                switch (property) {
                    case "translationX":
                    case "translationY": {
                        this.updateTransformCenter();
                        var position = gui.TransformUtil.transformPointToParent((this.target), this.transformCenter);
                        if (property == "translationX")
                            return position.x;
                        if (property == "translationY")
                            return position.y;
                        break;
                    }
                    default:
                        return _super.prototype.getCurrentValue.call(this, property);
                }
            };
            p.applyValues = function (anim) {
                var tmpScaleX;
                var tmpScaleY;
                var tmpPosition;
                var tmpRotation;
                for (var i = 0; i < this.motionPaths.length; ++i) {
                    if (this.currentValues[this.motionPaths[i].property] !== undefined)
                        this.currentValues[this.motionPaths[i].property] = anim.currentValue[this.motionPaths[i].property];
                    else
                        this.setValue(this.motionPaths[i].property, anim.currentValue[this.motionPaths[i].property]);
                }
                tmpRotation = !isNaN(this.currentValues.rotation) ? this.currentValues.rotation : this.getCurrentValue("rotation");
                tmpScaleX = !isNaN(this.currentValues.scaleX) ? this.currentValues.scaleX : this.getCurrentValue("scaleX");
                tmpScaleY = !isNaN(this.currentValues.scaleY) ? this.currentValues.scaleY : this.getCurrentValue("scaleY");
                AnimateTransformInstance.position.x = !isNaN(this.currentValues.translationX) ? this.currentValues.translationX : this.getCurrentValue("translationX");
                AnimateTransformInstance.position.y = !isNaN(this.currentValues.translationY) ? this.currentValues.translationY : this.getCurrentValue("translationY");
                if (!this.lastTranslationPoint)
                    this.lastTranslationPoint = AnimateTransformInstance.position.clone();
                if (isNaN(this.currentValues.translationX) && Math.abs(AnimateTransformInstance.position.x - this.lastTranslationPoint.x) < 0.1)
                    AnimateTransformInstance.position.x = this.lastTranslationPoint.x;
                if (isNaN(this.currentValues.translationY) && Math.abs(AnimateTransformInstance.position.y - this.lastTranslationPoint.y) < 0.1)
                    AnimateTransformInstance.position.y = this.lastTranslationPoint.y;
                this.lastTranslationPoint.x = AnimateTransformInstance.position.x;
                this.lastTranslationPoint.y = AnimateTransformInstance.position.y;
                tmpPosition = AnimateTransformInstance.position;
                gui.TransformUtil.transformAround((this.target), this.transformCenter, tmpPosition, tmpScaleX, tmpScaleY, tmpRotation);
            };
            AnimateTransformInstance.position = new egret.Point();
            return AnimateTransformInstance;
        })(gui.AnimateInstance);
        gui.AnimateTransformInstance = AnimateTransformInstance;
        egret.registerClass(AnimateTransformInstance,"egret.gui.AnimateTransformInstance");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.CompositeEffectInstance
         * @classdesc
         * CompositeEffectInstance 类用于实现 CompositeEffect 类的实例类
         * @extends egret.gui.EffectInstance
         */
        var CompositeEffectInstance = (function (_super) {
            __extends(CompositeEffectInstance, _super);
            /**
             * @method egret.gui.CompositeEffectInstance#constructor
             */
            function CompositeEffectInstance(target) {
                _super.call(this, target);
                /**
                 * 正在播放或者等待播放的EffectInstances
                 */
                this._activeEffectQueue = [];
                this._playheadTime = 0;
                this._childSets = [];
            }
            var d = __define,c=CompositeEffectInstance;p=c.prototype;
            d(p, "_actualDuration"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    var value = NaN;
                    if (this.repeatCount > 0) {
                        value = this._durationWithoutRepeat * this.repeatCount + (this.repeatDelay * (this.repeatCount - 1)) + this.startDelay;
                    }
                    return value;
                }
            );
            d(p, "playheadTime"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    return this._playheadTime;
                }
            );
            p._setPlayheadTime = function (value) {
                if (this._timerAnimation)
                    this._timerAnimation.playheadTime = value;
                else
                    this._playheadTime = value;
                _super.prototype._setPlayheadTime.call(this, value);
            };
            d(p, "_durationWithoutRepeat"
                /**
                 * 不含重复次数的持续时间
                 */
                ,function () {
                    return 0;
                }
            );
            /**
             * @inheritDoc
             */
            p.play = function () {
                this._timerAnimation = new gui.Animation(this.animationUpdate, this);
                this._timerAnimation.duration = this._durationWithoutRepeat;
                this._timerAnimation.motionPaths = [new gui.SimpleMotionPath("timer", 0, 0)];
                this._timerAnimation.endFunction = this.animationEnd;
                this._timerAnimation.play();
                _super.prototype.play.call(this);
            };
            /**
             * @inheritDoc
             */
            p.pause = function () {
                _super.prototype.pause.call(this);
                if (this._timerAnimation)
                    this._timerAnimation.pause();
            };
            /**
             * @inheritDoc
             */
            p.stop = function () {
                _super.prototype.stop.call(this);
                if (this._timerAnimation)
                    this._timerAnimation.stop();
            };
            /**
             * @inheritDoc
             */
            p.end = function () {
                _super.prototype.end.call(this);
                if (this._timerAnimation)
                    this._timerAnimation.end();
            };
            /**
             * @inheritDoc
             */
            p.resume = function () {
                _super.prototype.resume.call(this);
                if (this._timerAnimation)
                    this._timerAnimation.resume();
            };
            /**
             * @inheritDoc
             */
            p.reverse = function () {
                _super.prototype.reverse.call(this);
                this._setPlayReversed(!this.playReversed);
                if (this._timerAnimation)
                    this._timerAnimation.reverse();
            };
            /**
             * @inheritDoc
             */
            p.finishEffect = function () {
                this._activeEffectQueue = null;
                _super.prototype.finishEffect.call(this);
            };
            /**
             * 向此 Composite 效果添加一组新的子效果。
             * Sequence 效果将按子效果组的添加顺序一次播放一个子效果组。
             * Parallel 效果将同时播放所有子效果组，而不考虑这些子效果组的添加顺序。
             */
            p.addChildSet = function (childSet) {
                if (childSet) {
                    var n = childSet.length;
                    if (n > 0) {
                        if (!this._childSets)
                            this._childSets = [childSet];
                        else
                            this._childSets.push(childSet);
                        for (var i = 0; i < n; i++) {
                            childSet[i].addEventListener(gui.EffectEvent.EFFECT_END, this._effectEndHandler, this);
                            childSet[i].parentCompositeEffectInstance = this;
                        }
                    }
                }
            };
            /**
             * @inheritDoc
             */
            p._playWithNoDuration = function () {
                _super.prototype._playWithNoDuration.call(this);
                this.end();
            };
            p.animationUpdate = function (animation) {
                this._playheadTime = this._timerAnimation ? this._timerAnimation.playheadTime : this._playheadTime;
            };
            p.animationEnd = function (animation) {
                this._playheadTime = this._timerAnimation ? this._timerAnimation.playheadTime : this._playheadTime;
            };
            /**
             * 在每个子效果完成播放时调用。子类必须实现此函数。
             */
            p._onEffectEnd = function (childEffect) {
            };
            p._effectEndHandler = function (event) {
                this._onEffectEnd(event.effectInstance);
            };
            return CompositeEffectInstance;
        })(gui.EffectInstance);
        gui.CompositeEffectInstance = CompositeEffectInstance;
        egret.registerClass(CompositeEffectInstance,"egret.gui.CompositeEffectInstance");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.FadeInstance
         * @classdesc
         * FadeInstance 类用于实现 Fade 效果的实例类
         * @extends egret.gui.AnimateInstance
         */
        var FadeInstance = (function (_super) {
            __extends(FadeInstance, _super);
            /**
             * @method egret.gui.FadeInstance#constructor
             */
            function FadeInstance(target) {
                _super.call(this, target);
            }
            var d = __define,c=FadeInstance;p=c.prototype;
            p.play = function () {
                var fromValue = this.alphaFrom;
                var toValue = this.alphaTo;
                if ("visible" in this.target && !this.target.visible) {
                    if (isNaN(fromValue))
                        fromValue = this.target.alpha;
                    if (isNaN(toValue))
                        toValue = this.target.alpha;
                    if (fromValue == 0 && toValue != 0) {
                        this.target.alpha = 0;
                        this.target.visible = true;
                    }
                }
                this.motionPaths = [new gui.MotionPath("alpha")];
                this.motionPaths[0].keyframes = [new gui.Keyframe(0, this.alphaFrom), new gui.Keyframe(this.duration, this.alphaTo)];
                _super.prototype.play.call(this);
            };
            return FadeInstance;
        })(gui.AnimateInstance);
        gui.FadeInstance = FadeInstance;
        egret.registerClass(FadeInstance,"egret.gui.FadeInstance");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ParallelInstance
         * @classdesc
         * ParallelInstance 类用于实现 Parallel 效果的实例类
         * @extends egret.gui.CompositeEffectInstance
         */
        var ParallelInstance = (function (_super) {
            __extends(ParallelInstance, _super);
            /**
             * @method egret.gui.ParallelInstance#constructor
             */
            function ParallelInstance(target) {
                _super.call(this, target);
                this.isReversed = false;
            }
            var d = __define,c=ParallelInstance;p=c.prototype;
            d(p, "_durationWithoutRepeat"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    var _duration = 0;
                    var n = this._childSets.length;
                    for (var i = 0; i < n; i++) {
                        var instances = this._childSets[i];
                        _duration = Math.max(instances[0]._actualDuration, _duration);
                    }
                    return _duration;
                }
            );
            /**
             * @inheritDoc
             */
            p._setPlayheadTime = function (value) {
                this._setPlayheadTime(value);
                var compositeDur = (this.effect).compositeDuration;
                var firstCycleDur = compositeDur + this.startDelay + this.repeatDelay;
                var laterCycleDur = compositeDur + this.repeatDelay;
                var totalDur = firstCycleDur + laterCycleDur * (this.repeatCount - 1);
                var childPlayheadTime;
                if (value <= firstCycleDur) {
                    childPlayheadTime = Math.min(value - this.startDelay, compositeDur);
                    this._playCount = 1;
                }
                else {
                    if (value >= totalDur && this.repeatCount != 0) {
                        childPlayheadTime = compositeDur;
                        this._playCount = this.repeatCount;
                    }
                    else {
                        var valueAfterFirstCycle = value - firstCycleDur;
                        childPlayheadTime = valueAfterFirstCycle % laterCycleDur;
                        this._playCount = 1 + valueAfterFirstCycle / laterCycleDur;
                    }
                }
                for (var i = 0; i < this._childSets.length; i++) {
                    var instances = this._childSets[i];
                    var m = instances.length;
                    for (var j = 0; j < m; j++)
                        instances[j].playheadTime = this.playReversed ? Math.max(0, (childPlayheadTime - (this._durationWithoutRepeat - instances[j]._actualDuration))) : childPlayheadTime;
                }
                if (this.playReversed && this.replayEffectQueue != null && this.replayEffectQueue.length > 0) {
                    var position = this._durationWithoutRepeat - this.playheadTime;
                    var numDone = this.replayEffectQueue.length;
                    for (i = numDone - 1; i >= 0; i--) {
                        var childEffect = this.replayEffectQueue[i];
                        if (position <= childEffect._actualDuration) {
                            if (this._activeEffectQueue == null)
                                this._activeEffectQueue = [];
                            this._activeEffectQueue.push(childEffect);
                            this.replayEffectQueue.splice(i, 1);
                            childEffect.playReversed = this.playReversed;
                            childEffect.startEffect();
                        }
                    }
                }
            };
            /**
             * @inheritDoc
             */
            p.play = function () {
                this.doneEffectQueue = [];
                this._activeEffectQueue = [];
                this.replayEffectQueue = [];
                _super.prototype.play.call(this);
                var n = 0;
                var i = 0;
                n = this._childSets.length;
                for (i = 0; i < n; i++) {
                    var instances = this._childSets[i];
                    var m = instances.length;
                    for (var j = 0; j < m && this._activeEffectQueue != null; j++) {
                        var childEffect = instances[j];
                        if (this.playReversed && childEffect._actualDuration < this._durationWithoutRepeat) {
                            this.replayEffectQueue.push(childEffect);
                            this.startTimer();
                        }
                        else {
                            childEffect.playReversed = this.playReversed;
                            this._activeEffectQueue.push(childEffect);
                        }
                    }
                }
                if (this._activeEffectQueue.length > 0) {
                    var queueCopy = this._activeEffectQueue.slice(0);
                    for (i = 0; i < queueCopy.length; i++) {
                        queueCopy[i].startEffect();
                    }
                }
            };
            /**
             * @inheritDoc
             */
            p.pause = function () {
                _super.prototype.pause.call(this);
                if (this._activeEffectQueue) {
                    var n = this._activeEffectQueue.length;
                    for (var i = 0; i < n; i++) {
                        this._activeEffectQueue[i].pause();
                    }
                }
            };
            /**
             * @inheritDoc
             */
            p.stop = function () {
                this.stopTimer();
                if (this._activeEffectQueue) {
                    var queueCopy = this._activeEffectQueue.concat();
                    this._activeEffectQueue = null;
                    var n = queueCopy.length;
                    for (var i = 0; i < n; i++) {
                        if (queueCopy[i])
                            queueCopy[i].stop();
                    }
                }
                _super.prototype.stop.call(this);
            };
            /**
             * @inheritDoc
             */
            p.resume = function () {
                _super.prototype.resume.call(this);
                if (this._activeEffectQueue) {
                    var n = this._activeEffectQueue.length;
                    for (var i = 0; i < n; i++) {
                        this._activeEffectQueue[i].resume();
                    }
                }
            };
            /**
             * @inheritDoc
             */
            p.reverse = function () {
                _super.prototype.reverse.call(this);
                var n = 0;
                var i = 0;
                if (this.isReversed) {
                    n = this._activeEffectQueue.length;
                    for (i = 0; i < n; i++) {
                        this._activeEffectQueue[i].reverse();
                    }
                    this.stopTimer();
                }
                else {
                    this.replayEffectQueue = this.doneEffectQueue.splice(0);
                    n = this._activeEffectQueue.length;
                    for (i = 0; i < n; i++) {
                        this._activeEffectQueue[i].reverse();
                    }
                    this.startTimer();
                }
                this.isReversed = !this.isReversed;
            };
            /**
             * @inheritDoc
             */
            p.end = function () {
                this._endEffectCalled = true;
                this.stopTimer();
                if (this._activeEffectQueue) {
                    var queueCopy = this._activeEffectQueue.concat();
                    this._activeEffectQueue = null;
                    var n = queueCopy.length;
                    for (var i = 0; i < n; i++) {
                        if (queueCopy[i])
                            queueCopy[i].end();
                    }
                }
                _super.prototype.end.call(this);
            };
            /**
             * @inheritDoc
             */
            p._onEffectEnd = function (childEffect) {
                if (this._endEffectCalled || this._activeEffectQueue == null)
                    return;
                var n = this._activeEffectQueue.length;
                for (var i = 0; i < n; i++) {
                    if (childEffect == this._activeEffectQueue[i]) {
                        this.doneEffectQueue.push(childEffect);
                        this._activeEffectQueue.splice(i, 1);
                        break;
                    }
                }
                if (n == 1) {
                    this.finishRepeat();
                }
            };
            p.startTimer = function () {
                if (!this.timer) {
                    this.timer = new egret.Timer(10);
                    this.timer.addEventListener(egret.TimerEvent.TIMER, this.timerHandler, this);
                }
                this.timer.start();
            };
            p.stopTimer = function () {
                if (this.timer)
                    this.timer.reset();
            };
            p.timerHandler = function (event) {
                var position = this._durationWithoutRepeat - this.playheadTime;
                var numDone = this.replayEffectQueue.length;
                if (numDone == 0) {
                    this.stopTimer();
                    return;
                }
                for (var i = numDone - 1; i >= 0; i--) {
                    var childEffect = this.replayEffectQueue[i];
                    if (position <= childEffect._actualDuration) {
                        if (this._activeEffectQueue == null)
                            this._activeEffectQueue = [];
                        this._activeEffectQueue.push(childEffect);
                        this.replayEffectQueue.splice(i, 1);
                        childEffect.playReversed = this.playReversed;
                        childEffect.startEffect();
                    }
                }
            };
            return ParallelInstance;
        })(gui.CompositeEffectInstance);
        gui.ParallelInstance = ParallelInstance;
        egret.registerClass(ParallelInstance,"egret.gui.ParallelInstance");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SequenceInstance
         * @classdesc
         * SequenceInstance 类用于实现 Sequence 效果的实例类
         * @extends egret.gui.CompositeEffectInstance
         */
        var SequenceInstance = (function (_super) {
            __extends(SequenceInstance, _super);
            /**
             * @method egret.gui.SequenceInstance#constructor
             */
            function SequenceInstance(target) {
                _super.call(this, target);
                /**
                 * 已播放效果的持续时间
                 */
                this.currentInstanceDuration = 0;
                this.currentSetIndex = -1;
                this.isPaused = false;
            }
            var d = __define,c=SequenceInstance;p=c.prototype;
            d(p, "_durationWithoutRepeat"
                /**
                 * @inheritDoc
                 */
                ,function () {
                    var _duration = 0;
                    var n = this._childSets.length;
                    for (var i = 0; i < n; i++) {
                        var instances = this._childSets[i];
                        _duration += instances[0]._actualDuration;
                    }
                    return _duration;
                }
            );
            /**
             * @inheritDoc
             */
            p._setPlayheadTime = function (value) {
                this._setPlayheadTime(value);
                var i, j, k, l = 0;
                var compositeDur = (this.effect).compositeDuration;
                var firstCycleDur = compositeDur + this.startDelay + this.repeatDelay;
                var laterCycleDur = compositeDur + this.repeatDelay;
                var totalDur = firstCycleDur + laterCycleDur * (this.repeatCount - 1);
                var iterationPlayheadTime;
                if (value <= firstCycleDur) {
                    iterationPlayheadTime = Math.min(value - this.startDelay, compositeDur);
                    this._playCount = 1;
                }
                else {
                    if (value >= totalDur && this.repeatCount != 0) {
                        iterationPlayheadTime = compositeDur;
                        this._playCount = this.repeatCount;
                    }
                    else {
                        var valueAfterFirstCycle = value - firstCycleDur;
                        iterationPlayheadTime = valueAfterFirstCycle % laterCycleDur;
                        iterationPlayheadTime = Math.min(iterationPlayheadTime, compositeDur);
                        this._playCount = 1 + valueAfterFirstCycle / laterCycleDur;
                    }
                }
                if (this._activeEffectQueue && this._activeEffectQueue.length > 0) {
                    var cumulativeDuration = 0;
                    var activeLength = this._activeEffectQueue.length;
                    for (i = 0; i < activeLength; ++i) {
                        var setToCompare = this.playReversed ? (activeLength - 1 - i) : i;
                        var childEffectInstances;
                        var startTime = cumulativeDuration;
                        var endTime = cumulativeDuration + this._childSets[setToCompare][0]._actualDuration;
                        cumulativeDuration = endTime;
                        if (startTime <= iterationPlayheadTime && iterationPlayheadTime <= endTime) {
                            this._endEffectCalled = true;
                            if (this.currentSetIndex == setToCompare) {
                                for (j = 0; j < this.currentSet.length; j++)
                                    this.currentSet[j].playheadTime = (iterationPlayheadTime - startTime);
                            }
                            else if (setToCompare < this.currentSetIndex) {
                                if (this.playReversed) {
                                    for (j = 0; j < this.currentSet.length; j++)
                                        this.currentSet[j].end();
                                    for (j = this.currentSetIndex - 1; j > setToCompare; --j) {
                                        childEffectInstances = this._activeEffectQueue[j];
                                        for (k = 0; k < childEffectInstances.length; k++) {
                                            if (this.playReversed)
                                                childEffectInstances[k].playReversed = true;
                                            childEffectInstances[k].play();
                                            childEffectInstances[k].end();
                                        }
                                    }
                                }
                                else {
                                    for (j = 0; j < this.currentSet.length; j++) {
                                        this.currentSet[j].playheadTime = 0;
                                        this.currentSet[j].stop();
                                    }
                                    for (j = this.currentSetIndex - 1; j > setToCompare; --j) {
                                        childEffectInstances = this._activeEffectQueue[j];
                                        for (k = 0; k < childEffectInstances.length; k++) {
                                            childEffectInstances[k].play();
                                            childEffectInstances[k].stop();
                                        }
                                    }
                                }
                                this.currentSetIndex = setToCompare;
                                this.playCurrentChildSet();
                                for (k = 0; k < this.currentSet.length; k++) {
                                    this.currentSet[k].playheadTime = (iterationPlayheadTime - startTime);
                                    if (this.isPaused)
                                        this.currentSet[k].pause();
                                }
                            }
                            else {
                                if (this.playReversed) {
                                    for (j = 0; j < this.currentSet.length; j++) {
                                        this.currentSet[j].playheadTime = 0;
                                        this.currentSet[j].stop();
                                    }
                                    for (k = this.currentSetIndex + 1; k < setToCompare; k++) {
                                        childEffectInstances = this._activeEffectQueue[k];
                                        for (l = 0; l < childEffectInstances.length; l++) {
                                            childEffectInstances[l].playheadTime = 0;
                                            childEffectInstances[l].stop();
                                        }
                                    }
                                }
                                else {
                                    var currentEffectInstances = this.currentSet.concat();
                                    for (j = 0; j < currentEffectInstances.length; j++)
                                        currentEffectInstances[j].end();
                                    for (k = this.currentSetIndex + 1; k < setToCompare; k++) {
                                        childEffectInstances = this._activeEffectQueue[k];
                                        for (l = 0; l < childEffectInstances.length; l++) {
                                            childEffectInstances[l].play();
                                            childEffectInstances[l].end();
                                        }
                                    }
                                }
                                this.currentSetIndex = setToCompare;
                                this.playCurrentChildSet();
                                for (k = 0; k < this.currentSet.length; k++) {
                                    this.currentSet[k].playheadTime = (iterationPlayheadTime - startTime);
                                    if (this.isPaused)
                                        this.currentSet[k].pause();
                                }
                            }
                            this._endEffectCalled = false;
                            break;
                        }
                    }
                }
            };
            /**
             * @inheritDoc
             */
            p.play = function () {
                this.isPaused = false;
                this._activeEffectQueue = [];
                this.currentSetIndex = this.playReversed ? this._childSets.length : -1;
                var n = 0;
                var i = 0;
                n = this._childSets.length;
                for (i = 0; i < n; i++) {
                    var instances = this._childSets[i];
                    this._activeEffectQueue.push(instances);
                }
                _super.prototype.play.call(this);
                if (this._activeEffectQueue.length == 0) {
                    this.finishRepeat();
                    return;
                }
                this.playNextChildSet();
            };
            /**
             * @inheritDoc
             */
            p.pause = function () {
                _super.prototype.pause.call(this);
                this.isPaused = true;
                if (this.currentSet && this.currentSet.length > 0) {
                    var n = this.currentSet.length;
                    for (var i = 0; i < n; i++) {
                        this.currentSet[i].pause();
                    }
                }
            };
            /**
             * @inheritDoc
             */
            p.stop = function () {
                this.isPaused = false;
                if (this._activeEffectQueue && this._activeEffectQueue.length > 0) {
                    var queueCopy = this._activeEffectQueue.concat();
                    this._activeEffectQueue = null;
                    var currentInstances = queueCopy[this.currentSetIndex];
                    if (currentInstances) {
                        var currentCount = currentInstances.length;
                        for (var i = 0; i < currentCount; i++)
                            currentInstances[i].stop();
                    }
                    var n = queueCopy.length;
                    for (var j = this.currentSetIndex + 1; j < n; j++) {
                        var waitingInstances = queueCopy[j];
                        var m = waitingInstances.length;
                        for (var k = 0; k < m; k++) {
                            var instance = waitingInstances[k];
                            instance.effect.deleteInstance(instance);
                        }
                    }
                }
                _super.prototype.stop.call(this);
            };
            /**
             * @inheritDoc
             */
            p.resume = function () {
                _super.prototype.resume.call(this);
                this.isPaused = false;
                if (this.currentSet && this.currentSet.length > 0) {
                    var n = this.currentSet.length;
                    for (var i = 0; i < n; i++) {
                        this.currentSet[i].resume();
                    }
                }
            };
            /**
             * @inheritDoc
             */
            p.reverse = function () {
                _super.prototype.reverse.call(this);
                if (this.currentSet && this.currentSet.length > 0) {
                    var n = this.currentSet.length;
                    for (var i = 0; i < n; i++) {
                        this.currentSet[i].reverse();
                    }
                }
            };
            /**
             * 中断当前正在播放的所有效果，跳过尚未开始播放的所有效果，并立即跳至最终的复合效果。
             * @method egret.gui.SequenceInstance#end
             */
            p.end = function () {
                this._endEffectCalled = true;
                if (this._activeEffectQueue && this._activeEffectQueue.length > 0) {
                    var queueCopy = this._activeEffectQueue.concat();
                    this._activeEffectQueue = null;
                    var currentInstances = queueCopy[this.currentSetIndex];
                    if (currentInstances) {
                        var currentCount = currentInstances.length;
                        for (var i = 0; i < currentCount; i++) {
                            currentInstances[i].end();
                        }
                    }
                    var n = queueCopy.length;
                    for (var j = this.currentSetIndex + 1; j < n; j++) {
                        var waitingInstances = queueCopy[j];
                        var m = waitingInstances.length;
                        for (var k = 0; k < m; k++) {
                            (waitingInstances[k])._playWithNoDuration();
                        }
                    }
                }
                this.isPaused = false;
                _super.prototype.end.call(this);
            };
            /**
             * @inheritDoc
             */
            p._onEffectEnd = function (childEffect) {
                for (var i = 0; i < this.currentSet.length; i++) {
                    if (childEffect == this.currentSet[i]) {
                        this.currentSet.splice(i, 1);
                        break;
                    }
                }
                if (this._endEffectCalled)
                    return;
                if (this.currentSet.length == 0) {
                    if (false == this.playNextChildSet())
                        this.finishRepeat();
                }
            };
            p.playCurrentChildSet = function () {
                var childEffect;
                var instances = this._activeEffectQueue[this.currentSetIndex];
                this.currentSet = [];
                for (var i = 0; i < instances.length; i++) {
                    childEffect = instances[i];
                    this.currentSet.push(childEffect);
                    childEffect.playReversed = this.playReversed;
                    childEffect.startEffect();
                }
                this.currentInstanceDuration += childEffect._actualDuration;
            };
            p.playNextChildSet = function (offset) {
                if (offset === void 0) { offset = 0; }
                if (!this.playReversed) {
                    if (!this._activeEffectQueue || this.currentSetIndex++ >= this._activeEffectQueue.length - 1) {
                        return false;
                    }
                }
                else {
                    if (this.currentSetIndex-- <= 0)
                        return false;
                }
                this.playCurrentChildSet();
                return true;
            };
            return SequenceInstance;
        })(gui.CompositeEffectInstance);
        gui.SequenceInstance = SequenceInstance;
        egret.registerClass(SequenceInstance,"egret.gui.SequenceInstance");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TransformUtil
         */
        var TransformUtil = (function () {
            function TransformUtil() {
            }
            var d = __define,c=TransformUtil;p=c.prototype;
            /**
             * 将显示对象按照给定的转换中心调整位置
             * @param obj 要转换的显示对象
             * @param transformCenter 转换中心点，以显示对象为坐标系
             * @param translation 新的转换中心的位置，以显示对象的父容器为坐标系
             * @param scaleX 新的缩放值scaleX，如果为NaN则不设置
             * @param scaleY 新的缩放值scaleY，如果为NaN则不设置
             * @param rotation 新的旋转角度，如果为NaN则不设置
             */
            TransformUtil.transformAround = function (obj, transformCenter, translation, scaleX, scaleY, rotation) {
                if (translation === void 0) { translation = null; }
                if (scaleX === void 0) { scaleX = NaN; }
                if (scaleY === void 0) { scaleY = NaN; }
                if (rotation === void 0) { rotation = NaN; }
                if (translation == null && transformCenter != null) {
                    egret.$TempPoint.x = transformCenter.x;
                    egret.$TempPoint.y = transformCenter.y;
                    var xformedPt = TransformUtil.transformPointToParent(obj, egret.$TempPoint);
                }
                if (!isNaN(rotation))
                    obj.rotation = rotation;
                if (!isNaN(scaleX))
                    obj.scaleX = scaleX;
                if (!isNaN(scaleY))
                    obj.scaleY = scaleY;
                if (transformCenter == null) {
                    if (translation != null) {
                        obj.x = translation.x;
                        obj.y = translation.y;
                    }
                }
                else {
                    egret.$TempPoint.x = transformCenter.x;
                    egret.$TempPoint.y = transformCenter.y;
                    var postXFormPoint = TransformUtil.transformPointToParent(obj, egret.$TempPoint);
                    if (translation != null) {
                        obj.x += translation.x - postXFormPoint.x;
                        obj.y += translation.y - postXFormPoint.y;
                    }
                    else {
                        obj.x += xformedPt.x - postXFormPoint.x;
                        obj.y += xformedPt.y - postXFormPoint.y;
                    }
                }
            };
            TransformUtil.transformPointToParent = function (obj, localPosition) {
                if (localPosition === void 0) { localPosition = null; }
                var resultPoint = new egret.Point();
                if (localPosition) {
                    resultPoint.x = localPosition.x;
                    resultPoint.y = localPosition.y;
                }
                if (obj.parent) {
                    obj.localToGlobal(resultPoint.x, resultPoint.y, resultPoint);
                    obj.parent.globalToLocal(resultPoint.x, resultPoint.y, resultPoint);
                }
                return resultPoint;
            };
            return TransformUtil;
        })();
        gui.TransformUtil = TransformUtil;
        egret.registerClass(TransformUtil,"egret.gui.TransformUtil");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.NumberInterpolator
         * @classdesc
         * NumberInterpolator 类在表示为 number 实例的开始值和结束值之间提供插值。
         * @implements egret.gui.IInterpolator
         */
        var NumberInterpolator = (function () {
            /**
             * @method egret.gui.NumberInterpolator#constructor
             */
            function NumberInterpolator() {
            }
            var d = __define,c=NumberInterpolator;p=c.prototype;
            NumberInterpolator.getInstance = function () {
                if (!NumberInterpolator.theInstance)
                    NumberInterpolator.theInstance = new NumberInterpolator();
                return NumberInterpolator.theInstance;
            };
            p.interpolate = function (fraction, startValue, endValue) {
                if (fraction == 0)
                    return startValue;
                else if (fraction == 1)
                    return endValue;
                return startValue + (fraction * (endValue - startValue));
            };
            p.increment = function (baseValue, incrementValue) {
                return baseValue + incrementValue;
            };
            p.decrement = function (baseValue, decrementValue) {
                return baseValue - decrementValue;
            };
            return NumberInterpolator;
        })();
        gui.NumberInterpolator = NumberInterpolator;
        egret.registerClass(NumberInterpolator,"egret.gui.NumberInterpolator",["egret.gui.IInterpolator"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.CloseEvent
         * @classdesc
         * 窗口关闭事件
         * @extends egret.Event
         */
        var CloseEvent = (function (_super) {
            __extends(CloseEvent, _super);
            /**
             * 构造函数
             * @method egret.gui.CloseEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param detail {any}
             */
            function CloseEvent(type, bubbles, cancelable, detail) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (detail === void 0) { detail = -1; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 触发关闭事件的细节。某些窗口组件用此属性来区分窗口中被点击的按钮。
                 * @member egret.gui.CloseEvent#detail
                 */
                this.detail = null;
                this.detail = detail;
            }
            var d = __define,c=CloseEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.CloseEvent.dispatchCloseEvent
             */
            CloseEvent.dispatchCloseEvent = function (target, type, detail) {
                if (detail === void 0) { detail = -1; }
                var event = egret.Event.create(CloseEvent, type);
                event.detail = detail;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * @constant egret.gui.CloseEvent.CLOSE
             */
            CloseEvent.CLOSE = "close";
            return CloseEvent;
        })(egret.Event);
        gui.CloseEvent = CloseEvent;
        egret.registerClass(CloseEvent,"egret.gui.CloseEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.CollectionEvent
         * @classdesc
         * 集合类型数据改变事件
         * @extends egret.Event
         */
        var CollectionEvent = (function (_super) {
            __extends(CollectionEvent, _super);
            /**
             * @method egret.gui.CollectionEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param kind {string}
             * @param location {number}
             * @param oldLocation {number}
             * @param items {Array<any>}
             * @param oldItems {Array<any>}
             */
            function CollectionEvent(type, bubbles, cancelable, kind, location, oldLocation, items, oldItems) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (kind === void 0) { kind = null; }
                if (location === void 0) { location = -1; }
                if (oldLocation === void 0) { oldLocation = -1; }
                if (items === void 0) { items = null; }
                if (oldItems === void 0) { oldItems = null; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 指示发生的事件类型。此属性值可以是 CollectionEventKind 类中的一个值，也可以是 null，用于指示类型未知。
                 * @member egret.gui.CollectionEvent#kind
                 */
                this.kind = null;
                /**
                 * 受事件影响的项目的列表
                 * @member egret.gui.CollectionEvent#items
                 */
                this.items = null;
                /**
                 * 仅当kind的值为CollectionEventKind.REPLACE时，表示替换前的项目列表
                 * @member egret.gui.CollectionEvent#oldItems
                 */
                this.oldItems = null;
                this.kind = kind;
                this.location = location;
                this.oldLocation = oldLocation;
                this.items = items ? items : [];
                this.oldItems = oldItems ? oldItems : [];
            }
            var d = __define,c=CollectionEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.CollectionEvent.dispatchCollectionEvent
             */
            CollectionEvent.dispatchCollectionEvent = function (target, type, kind, location, oldLocation, items, oldItems) {
                if (kind === void 0) { kind = null; }
                if (location === void 0) { location = -1; }
                if (oldLocation === void 0) { oldLocation = -1; }
                if (items === void 0) { items = null; }
                if (oldItems === void 0) { oldItems = null; }
                var event = egret.Event.create(CollectionEvent, type);
                event.kind = kind;
                event.location = location;
                event.oldLocation = oldLocation;
                event.items = items;
                event.oldItems = oldItems;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 集合类数据发生改变
             * @constant egret.gui.CollectionEvent.COLLECTION_CHANGE
             */
            CollectionEvent.COLLECTION_CHANGE = "collectionChange";
            return CollectionEvent;
        })(egret.Event);
        gui.CollectionEvent = CollectionEvent;
        egret.registerClass(CollectionEvent,"egret.gui.CollectionEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.CollectionEventKind
         * @classdesc
         * 定义  CollectionEvent 类 kind 属性的有效值的常量。
         * 这些常量指示对集合进行的更改类型。
         */
        var CollectionEventKind = (function () {
            function CollectionEventKind() {
            }
            var d = __define,c=CollectionEventKind;p=c.prototype;
            /**
             * 指示集合添加了一个或多个项目。
             * @constant egret.gui.CollectionEventKind.ADD
             */
            CollectionEventKind.ADD = "add";
            /**
             * 指示项目已从 CollectionEvent.oldLocation确定的位置移动到 location确定的位置。
             * @constant egret.gui.CollectionEventKind.MOVE
             */
            CollectionEventKind.MOVE = "move";
            /**
             * 指示集合应用了排序或/和筛选。
             * @constant egret.gui.CollectionEventKind.REFRESH
             */
            CollectionEventKind.REFRESH = "refresh";
            /**
             * 指示集合删除了一个或多个项目。
             * @constant egret.gui.CollectionEventKind.REMOVE
             */
            CollectionEventKind.REMOVE = "remove";
            /**
             * 指示已替换由 CollectionEvent.location 属性确定的位置处的项目。
             * @constant egret.gui.CollectionEventKind.REPLACE
             */
            CollectionEventKind.REPLACE = "replace";
            /**
             * 指示集合已彻底更改，需要进行重置。
             * @constant egret.gui.CollectionEventKind.RESET
             */
            CollectionEventKind.RESET = "reset";
            /**
             * 指示集合中一个或多个项目进行了更新。受影响的项目将存储在  CollectionEvent.items 属性中。
             * @constant egret.gui.CollectionEventKind.UPDATE
             */
            CollectionEventKind.UPDATE = "update";
            /**
             * 指示集合中某个节点的子项列表已打开，通常应用于Tree的数据源XMLCollection。
             * @constant egret.gui.CollectionEventKind.OPEN
             */
            CollectionEventKind.OPEN = "open";
            /**
             * 指示集合中某个节点的子项列表已关闭，通常应用于Tree的数据源XMLCollection。
             * @constant egret.gui.CollectionEventKind.CLOSE
             */
            CollectionEventKind.CLOSE = "close";
            return CollectionEventKind;
        })();
        gui.CollectionEventKind = CollectionEventKind;
        egret.registerClass(CollectionEventKind,"egret.gui.CollectionEventKind");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        var EffectEvent = (function (_super) {
            __extends(EffectEvent, _super);
            /**
             * 构造函数
             */
            function EffectEvent(eventType, bubbles, cancelable, effectInstance) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (effectInstance === void 0) { effectInstance = null; }
                _super.call(this, eventType, bubbles, cancelable);
                this.effectInstance = effectInstance;
            }
            var d = __define,c=EffectEvent;p=c.prototype;
            /**
             * 动画播放结束
             */
            EffectEvent.EFFECT_END = "effectEnd";
            /**
             * 动画播放被停止
             */
            EffectEvent.EFFECT_STOP = "effectStop";
            /**
             * 动画播放开始
             */
            EffectEvent.EFFECT_START = "effectStart";
            /**
             * 动画开始重复播放
             */
            EffectEvent.EFFECT_REPEAT = "effectRepeat";
            /**
             * 动画播放更新
             */
            EffectEvent.EFFECT_UPDATE = "effectUpdate";
            return EffectEvent;
        })(egret.Event);
        gui.EffectEvent = EffectEvent;
        egret.registerClass(EffectEvent,"egret.gui.EffectEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ElementExistenceEvent
         * @classdesc
         * Group添加或移除元素时分派的事件。
         * @extends egret.Event
         */
        var ElementExistenceEvent = (function (_super) {
            __extends(ElementExistenceEvent, _super);
            /**
             * @member egret.gui.ElementExistenceEvent#constructor
             */
            function ElementExistenceEvent(type, bubbles, cancelable, element, index) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (element === void 0) { element = null; }
                if (index === void 0) { index = -1; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 指向已添加或删除元素的位置的索引。
                 * @member egret.gui.ElementExistenceEvent#index
                 */
                this.index = NaN;
                /**
                 * 对已添加或删除的视觉元素的引用。
                 * @member egret.gui.ElementExistenceEvent#element
                 */
                this.element = null;
                this.element = element;
                this.index = index;
            }
            var d = __define,c=ElementExistenceEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.ElementExistenceEvent.dispatchElementExistenceEvent
             */
            ElementExistenceEvent.dispatchElementExistenceEvent = function (target, type, element, index) {
                if (element === void 0) { element = null; }
                if (index === void 0) { index = -1; }
                var event = egret.Event.create(ElementExistenceEvent, type);
                event.element = element;
                event.index = index;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 元素添加
             * @constant egret.gui.ElementExistenceEvent.ELEMENT_ADD
             */
            ElementExistenceEvent.ELEMENT_ADD = "elementAdd";
            /**
             * 元素移除
             * @constant egret.gui.ElementExistenceEvent.ELEMENT_REMOVE
             */
            ElementExistenceEvent.ELEMENT_REMOVE = "elementRemove";
            return ElementExistenceEvent;
        })(egret.Event);
        gui.ElementExistenceEvent = ElementExistenceEvent;
        egret.registerClass(ElementExistenceEvent,"egret.gui.ElementExistenceEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.IndexChangeEvent
         * @classdesc
         * 索引改变事件
         * @extends egret.Event
         */
        var IndexChangeEvent = (function (_super) {
            __extends(IndexChangeEvent, _super);
            /**
             * @method egret.gui.IndexChangeEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param oldIndex {number}
             * @param newIndex {number}
             */
            function IndexChangeEvent(type, bubbles, cancelable, oldIndex, newIndex) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (oldIndex === void 0) { oldIndex = -1; }
                if (newIndex === void 0) { newIndex = -1; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 进行更改之后的从零开始的索引。
                 * @member egret.gui.IndexChangeEvent#newIndex
                 */
                this.newIndex = NaN;
                /**
                 * 进行更改之前的从零开始的索引。
                 * @member egret.gui.IndexChangeEvent#oldIndex
                 */
                this.oldIndex = NaN;
                this.oldIndex = oldIndex;
                this.newIndex = newIndex;
            }
            var d = __define,c=IndexChangeEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.IndexChangeEvent.dispatchIndexChangeEvent
             */
            IndexChangeEvent.dispatchIndexChangeEvent = function (target, type, oldIndex, newIndex, cancelable) {
                if (oldIndex === void 0) { oldIndex = -1; }
                if (newIndex === void 0) { newIndex = -1; }
                if (cancelable === void 0) { cancelable = false; }
                var event = egret.Event.create(IndexChangeEvent, type);
                event.oldIndex = oldIndex;
                event.newIndex = newIndex;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 指示索引已更改
             * @constant egret.gui.IndexChangeEvent.CHANGE
             */
            IndexChangeEvent.CHANGE = "change";
            /**
             * 指示索引即将更改,可以通过调用preventDefault()方法阻止索引发生更改
             * @constant egret.gui.IndexChangeEvent.CHANGING
             */
            IndexChangeEvent.CHANGING = "changing";
            return IndexChangeEvent;
        })(egret.Event);
        gui.IndexChangeEvent = IndexChangeEvent;
        egret.registerClass(IndexChangeEvent,"egret.gui.IndexChangeEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ListEvent
         * @classdesc
         * 列表事件
         * @extends egret.TouchEvent
         */
        var ListEvent = (function (_super) {
            __extends(ListEvent, _super);
            /**
             * @method egret.gui.ListEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param touchPointID {number}
             * @param stageX {number}
             * @param stageY {number}
             * @param ctrlKey {boolean}
             * @param altKey {boolean}
             * @param shiftKey {boolean}
             * @param buttonDown {boolean}
             * @param itemIndex {number}
             * @param item {any}
             * @param itemRenderer {IItemRenderer}
             */
            function ListEvent(type, bubbles, cancelable, touchPointID, stageX, stageY) {
                if (bubbles === void 0) { bubbles = true; }
                if (cancelable === void 0) { cancelable = true; }
                if (touchPointID === void 0) { touchPointID = 0; }
                if (stageX === void 0) { stageX = 0; }
                if (stageY === void 0) { stageY = 0; }
                _super.call(this, type, bubbles, cancelable, touchPointID, stageX, stageY);
                /**
                 * 触发鼠标事件的项呈示器数据源项。
                 * @member egret.gui.ListEvent#item
                 */
                this.item = null;
                /**
                 * 触发鼠标事件的项呈示器。
                 * @member egret.gui.ListEvent#itemRenderer
                 */
                this.itemRenderer = null;
                /**
                 * 触发鼠标事件的项索引
                 * @member egret.gui.ListEvent#itemIndex
                 */
                this.itemIndex = NaN;
            }
            var d = __define,c=ListEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.ListEvent.dispatchListEvent
             */
            ListEvent.dispatchListEvent = function (target, type, touchEvent, itemIndex, item, itemRenderer) {
                if (touchEvent === void 0) { touchEvent = null; }
                if (itemIndex === void 0) { itemIndex = -1; }
                if (item === void 0) { item = null; }
                if (itemRenderer === void 0) { itemRenderer = null; }
                var event = egret.Event.create(ListEvent, type);
                event.touchPointID = touchEvent.touchPointID;
                event.$stageX = touchEvent.stageX;
                event.$stageY = touchEvent.stageY;
                //event.ctrlKey = touchEvent.ctrlKey;
                //event.altKey = touchEvent.altKey;
                //event.shiftKey = touchEvent.shiftKey;
                event.touchDown = touchEvent.touchDown;
                event.itemIndex = itemIndex;
                event.item = item;
                event.itemRenderer = itemRenderer;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 指示用户执行了将鼠标指针从控件中某个项呈示器上移开的操作
             * @constant egret.gui.ListEvent.ITEM_ROLL_OUT
             */
            ListEvent.ITEM_ROLL_OUT = "itemRollOut";
            /**
             * 指示用户执行了将鼠标指针滑过控件中某个项呈示器的操作。
             * @constant egret.gui.ListEvent.ITEM_ROLL_OVER
             */
            ListEvent.ITEM_ROLL_OVER = "itemRollOver";
            /**
             * 指示用户执行了将鼠标在某个项呈示器上单击的操作。
             * @constant egret.gui.ListEvent.ITEM_CLICK
             */
            ListEvent.ITEM_CLICK = "itemClick";
            return ListEvent;
        })(egret.TouchEvent);
        gui.ListEvent = ListEvent;
        egret.registerClass(ListEvent,"egret.gui.ListEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.MoveEvent
         * @classdesc
         * 移动事件
         * @extends egret.Event
         */
        var MoveEvent = (function (_super) {
            __extends(MoveEvent, _super);
            /**
             * @method egret.gui.MoveEvent#constructor
             * @param type {string}
             * @param oldX {number}
             * @param oldY {number}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             */
            function MoveEvent(type, bubbles, cancelable) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 旧的组件X
                 * @member egret.gui.MoveEvent#oldX
                 */
                this.oldX = NaN;
                /**
                 * 旧的组件Y
                 * @member egret.gui.MoveEvent#oldY
                 */
                this.oldY = NaN;
            }
            var d = __define,c=MoveEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.MoveEvent.dispatchMoveEvent
             */
            MoveEvent.dispatchMoveEvent = function (target, oldX, oldY) {
                if (oldX === void 0) { oldX = NaN; }
                if (oldY === void 0) { oldY = NaN; }
                var event = egret.Event.create(MoveEvent, MoveEvent.MOVE);
                event.oldX = oldX;
                event.oldY = oldY;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * @constant egret.gui.MoveEvent.MOVE
             */
            MoveEvent.MOVE = "move";
            return MoveEvent;
        })(egret.Event);
        gui.MoveEvent = MoveEvent;
        egret.registerClass(MoveEvent,"egret.gui.MoveEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.PopUpEvent
         * @classdesc
         * 弹出管理器事件
         * @extends egret.Event
         */
        var PopUpEvent = (function (_super) {
            __extends(PopUpEvent, _super);
            /**
             * 构造函数
             * @method egret.gui.PopUpEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param popUp {IVisualElement}
             * @param modal {boolean}
             */
            function PopUpEvent(type, bubbles, cancelable, popUp, modal) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (popUp === void 0) { popUp = null; }
                if (modal === void 0) { modal = false; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 弹出框对象
                 * @member egret.gui.PopUpEvent#popUp
                 */
                this.popUp = null;
                /**
                 * 弹出窗口是否为模态，此属性仅在事件类型为ADD_POPUP时有效。
                 * @member egret.gui.PopUpEvent#modal
                 */
                this.modal = false;
                this.popUp = popUp;
                this.modal = modal;
            }
            var d = __define,c=PopUpEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.PopUpEvent.dispatchPopUpEvent
             */
            PopUpEvent.dispatchPopUpEvent = function (target, type, popUp, modal) {
                if (popUp === void 0) { popUp = null; }
                if (modal === void 0) { modal = false; }
                var event = egret.Event.create(PopUpEvent, egret.HTTPStatusEvent.HTTP_STATUS);
                event.popUp = popUp;
                event.modal = modal;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 添加一个弹出框，在执行完添加之后抛出。
             * @constant egret.gui.PopUpEvent.ADD_POPUP
             */
            PopUpEvent.ADD_POPUP = "addPopUp";
            /**
             * 移除一个弹出框，在执行完移除之后抛出。
             * @constant egret.gui.PopUpEvent.REMOVE_POPUP
             */
            PopUpEvent.REMOVE_POPUP = "removePopUp";
            /**
             * 移动弹出框到最前，在执行完前置之后抛出。
             * @constant egret.gui.PopUpEvent.BRING_TO_FRONT
             */
            PopUpEvent.BRING_TO_FRONT = "bringToFront";
            return PopUpEvent;
        })(egret.Event);
        gui.PopUpEvent = PopUpEvent;
        egret.registerClass(PopUpEvent,"egret.gui.PopUpEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.PropertyChangeEvent
         * @classdesc
         * 对象的一个属性发生更改时传递到事件侦听器的事件
         * @extends egret.Event
         */
        var PropertyChangeEvent = (function (_super) {
            __extends(PropertyChangeEvent, _super);
            /**
             * 构造函数
             * @method egret.gui.PropertyChangeEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param kind {string}
             * @param property {any}
             * @param oldValue {any}
             * @param newValue {any}
             * @param source {any}
             */
            function PropertyChangeEvent(type, bubbles, cancelable, kind, property, oldValue, newValue, source) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (kind === void 0) { kind = null; }
                if (property === void 0) { property = null; }
                if (oldValue === void 0) { oldValue = null; }
                if (newValue === void 0) { newValue = null; }
                if (source === void 0) { source = null; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 指定更改的类型。可能的值为 PropertyChangeEventKind.UPDATE、PropertyChangeEventKind.DELETE 和 null。
                 * @member egret.gui.PropertyChangeEvent#kind
                 */
                this.kind = null;
                /**
                 * 更改后的属性的值。
                 * @member egret.gui.PropertyChangeEvent#newValue
                 */
                this.newValue = null;
                /**
                 * 更改后的属性的值。
                 * @member egret.gui.PropertyChangeEvent#oldValue
                 */
                this.oldValue = null;
                /**
                 * 指定已更改属性的 String、QName 或 int。
                 * @member egret.gui.PropertyChangeEvent#property
                 */
                this.property = null;
                /**
                 * 发生更改的对象。
                 * @member egret.gui.PropertyChangeEvent#source
                 */
                this.source = null;
                this.kind = kind;
                this.property = property;
                this.oldValue = oldValue;
                this.newValue = newValue;
                this.source = source;
            }
            var d = __define,c=PropertyChangeEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.PropertyChangeEvent.dispatchPropertyChangeEvent
             */
            PropertyChangeEvent.dispatchPropertyChangeEvent = function (target, kind, property, oldValue, newValue, source) {
                if (kind === void 0) { kind = null; }
                if (property === void 0) { property = null; }
                if (oldValue === void 0) { oldValue = null; }
                if (newValue === void 0) { newValue = null; }
                if (source === void 0) { source = null; }
                var event = egret.Event.create(PropertyChangeEvent, PropertyChangeEvent.PROPERTY_CHANGE);
                event.kind = kind;
                event.property = property;
                event.oldValue = oldValue;
                event.newValue = newValue;
                event.source = source;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 属性改变
             * @constant egret.gui.PropertyChangeEvent.PROPERTY_CHANGE
             */
            PropertyChangeEvent.PROPERTY_CHANGE = "propertyChange";
            return PropertyChangeEvent;
        })(egret.Event);
        gui.PropertyChangeEvent = PropertyChangeEvent;
        egret.registerClass(PropertyChangeEvent,"egret.gui.PropertyChangeEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.PropertyChangeEventKind
         * @classdesc
         * PropertyChangeEventKind 类定义 PropertyChangeEvent 类的 kind 属性的常量值。
         */
        var PropertyChangeEventKind = (function () {
            function PropertyChangeEventKind() {
            }
            var d = __define,c=PropertyChangeEventKind;p=c.prototype;
            /**
             * 指示该属性的值已更改。
             * @constant egret.gui.PropertyChangeEventKind.UPDATE
             */
            PropertyChangeEventKind.UPDATE = "update";
            /**
             * 指示该属性已从此对象中删除。
             * @constant egret.gui.PropertyChangeEventKind.DELETE
             */
            PropertyChangeEventKind.DELETE = "delete";
            return PropertyChangeEventKind;
        })();
        gui.PropertyChangeEventKind = PropertyChangeEventKind;
        egret.registerClass(PropertyChangeEventKind,"egret.gui.PropertyChangeEventKind");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.RendererExistenceEvent
         * @classdesc
         * 在DataGroup添加或删除项呈示器时分派的事件。
         * @extends egret.Event
         */
        var RendererExistenceEvent = (function (_super) {
            __extends(RendererExistenceEvent, _super);
            /**
             * @method egret.gui.RendererExistenceEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param renderer {IItemRenderer}
             * @param index {number}
             * @param data {any}
             */
            function RendererExistenceEvent(type, bubbles, cancelable, renderer, index, data) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (renderer === void 0) { renderer = null; }
                if (index === void 0) { index = -1; }
                if (data === void 0) { data = null; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 呈示器的数据项目。
                 * @member egret.gui.RendererExistenceEvent#data
                 */
                this.data = null;
                /**
                 * 指向已添加或删除项呈示器的位置的索引。
                 * @member egret.gui.RendererExistenceEvent#index
                 */
                this.index = NaN;
                /**
                 * 对已添加或删除的项呈示器的引用。
                 * @member egret.gui.RendererExistenceEvent#renderer
                 */
                this.renderer = null;
                this.renderer = renderer;
                this.index = index;
                this.data = data;
            }
            var d = __define,c=RendererExistenceEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.RendererExistenceEvent.dispatchRendererExistenceEvent
             */
            RendererExistenceEvent.dispatchRendererExistenceEvent = function (target, type, renderer, index, data) {
                if (renderer === void 0) { renderer = null; }
                if (index === void 0) { index = -1; }
                if (data === void 0) { data = null; }
                var event = egret.Event.create(RendererExistenceEvent, type);
                event.renderer = renderer;
                event.index = index;
                event.data = data;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 添加了项呈示器
             * @constant egret.gui.RendererExistenceEvent.RENDERER_ADD
             */
            RendererExistenceEvent.RENDERER_ADD = "rendererAdd";
            /**
             * 移除了项呈示器
             * @constant egret.gui.RendererExistenceEvent.RENDERER_REMOVE
             */
            RendererExistenceEvent.RENDERER_REMOVE = "rendererRemove";
            return RendererExistenceEvent;
        })(egret.Event);
        gui.RendererExistenceEvent = RendererExistenceEvent;
        egret.registerClass(RendererExistenceEvent,"egret.gui.RendererExistenceEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ResizeEvent
         * @classdesc
         * 尺寸改变事件
         * @extends egret.Event
         */
        var ResizeEvent = (function (_super) {
            __extends(ResizeEvent, _super);
            /**
             * @method egret.gui.ResizeEvent#constructor
             * @param type {string}
             * @param oldWidth {number}
             * @param oldHeight {number}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             */
            function ResizeEvent(type, bubbles, cancelable) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 旧的高度
                 * @member egret.gui.ResizeEvent#oldHeight
                 */
                this.oldHeight = NaN;
                /**
                 * 旧的宽度
                 * @member egret.gui.ResizeEvent#oldWidth
                 */
                this.oldWidth = NaN;
            }
            var d = __define,c=ResizeEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.ResizeEvent.dispatchResizeEvent
             */
            ResizeEvent.dispatchResizeEvent = function (target, oldWidth, oldHeight) {
                if (oldWidth === void 0) { oldWidth = NaN; }
                if (oldHeight === void 0) { oldHeight = NaN; }
                var event = egret.Event.create(ResizeEvent, ResizeEvent.RESIZE);
                event.oldWidth = oldWidth;
                event.oldHeight = oldHeight;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * @constant egret.gui.ResizeEvent.RESIZE
             */
            ResizeEvent.RESIZE = "resize";
            return ResizeEvent;
        })(egret.Event);
        gui.ResizeEvent = ResizeEvent;
        egret.registerClass(ResizeEvent,"egret.gui.ResizeEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SkinPartEvent
         * @classdesc
         * 皮肤组件附加移除事件
         * @extends egret.Event
         */
        var SkinPartEvent = (function (_super) {
            __extends(SkinPartEvent, _super);
            /**
             * @method egret.gui.SkinPartEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param partName {string}
             * @param instance {any}
             */
            function SkinPartEvent(type, bubbles, cancelable, partName, instance) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (partName === void 0) { partName = null; }
                if (instance === void 0) { instance = null; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 被添加或移除的皮肤组件实例
                 * @member egret.gui.SkinPartEvent#instance
                 */
                this.instance = null;
                /**
                 * 被添加或移除的皮肤组件的实例名
                 * @member egret.gui.SkinPartEvent#partName
                 */
                this.partName = null;
                this.partName = partName;
                this.instance = instance;
            }
            var d = __define,c=SkinPartEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.SkinPartEvent.dispatchSkinPartEvent
             */
            SkinPartEvent.dispatchSkinPartEvent = function (target, type, partName, instance) {
                if (partName === void 0) { partName = null; }
                if (instance === void 0) { instance = null; }
                var event = egret.Event.create(SkinPartEvent, type);
                event.partName = partName;
                event.instance = instance;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 附加皮肤公共子部件
             * @constant egret.gui.SkinPartEvent.PART_ADDED
             */
            SkinPartEvent.PART_ADDED = "partAdded";
            /**
             * 移除皮肤公共子部件
             * @constant egret.gui.SkinPartEvent.PART_REMOVED
             */
            SkinPartEvent.PART_REMOVED = "partRemoved";
            return SkinPartEvent;
        })(egret.Event);
        gui.SkinPartEvent = SkinPartEvent;
        egret.registerClass(SkinPartEvent,"egret.gui.SkinPartEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.StateChangeEvent
         * @classdesc
         * 视图状态改变事件
         * @extends egret.Event
         */
        var StateChangeEvent = (function (_super) {
            __extends(StateChangeEvent, _super);
            /**
             * @method egret.gui.StateChangeEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param oldState {string}
             * @param newState {string}
             */
            function StateChangeEvent(type, bubbles, cancelable, oldState, newState) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                if (oldState === void 0) { oldState = null; }
                if (newState === void 0) { newState = null; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 组件正在进入的视图状态的名称。
                 * @member egret.gui.StateChangeEvent#newState
                 */
                this.newState = null;
                /**
                 * 组件正在退出的视图状态的名称。
                 * @member egret.gui.StateChangeEvent#oldState
                 */
                this.oldState = null;
                this.oldState = oldState;
                this.newState = newState;
            }
            var d = __define,c=StateChangeEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.StateChangeEvent.dispatchStateChangeEvent
             */
            StateChangeEvent.dispatchStateChangeEvent = function (target, type, oldState, newState) {
                if (oldState === void 0) { oldState = null; }
                if (newState === void 0) { newState = null; }
                var event = egret.Event.create(StateChangeEvent, type);
                event.oldState = oldState;
                event.newState = newState;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 当前视图状态已经改变
             * @constant egret.gui.StateChangeEvent.CURRENT_STATE_CHANGE
             */
            StateChangeEvent.CURRENT_STATE_CHANGE = "currentStateChange";
            /**
             * 当前视图状态即将改变
             * @constant egret.gui.StateChangeEvent.CURRENT_STATE_CHANGING
             */
            StateChangeEvent.CURRENT_STATE_CHANGING = "currentStateChanging";
            /**
             * 状态过渡完成
             */
            StateChangeEvent.STATE_CHANGE_COMPLETE = "stateChangeComplete";
            return StateChangeEvent;
        })(egret.Event);
        gui.StateChangeEvent = StateChangeEvent;
        egret.registerClass(StateChangeEvent,"egret.gui.StateChangeEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TrackBaseEvent
         * @classdesc
         * 从TrackBase组件分派的事件。
         * @extends egret.Event
         */
        var TrackBaseEvent = (function (_super) {
            __extends(TrackBaseEvent, _super);
            /**
             * 构造函数
             * @method egret.gui.TrackBaseEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             */
            function TrackBaseEvent(type, bubbles, cancelable) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                _super.call(this, type, bubbles, cancelable);
            }
            var d = __define,c=TrackBaseEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.TrackBaseEvent.dispatchTrackBaseEvent
             */
            TrackBaseEvent.dispatchTrackBaseEvent = function (target, type) {
                var event = egret.Event.create(TrackBaseEvent, type);
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 正在拖拽滑块
             * @constant egret.gui.TrackBaseEvent.THUMB_DRAG
             */
            TrackBaseEvent.THUMB_DRAG = "thumbDrag";
            /**
             * 滑块被按下
             * @constant egret.gui.TrackBaseEvent.THUMB_PRESS
             */
            TrackBaseEvent.THUMB_PRESS = "thumbPress";
            /**
             * 滑块被放开
             * @constant egret.gui.TrackBaseEvent.THUMB_RELEASE
             */
            TrackBaseEvent.THUMB_RELEASE = "thumbRelease";
            return TrackBaseEvent;
        })(egret.Event);
        gui.TrackBaseEvent = TrackBaseEvent;
        egret.registerClass(TrackBaseEvent,"egret.gui.TrackBaseEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TreeEvent
         * @classdesc
         * Tree事件
         * @extends egret.Event
         */
        var TreeEvent = (function (_super) {
            __extends(TreeEvent, _super);
            /**
             * @method egret.gui.TreeEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             * @param itemIndex {number}
             * @param item {any}
             * @param itemRenderer {ITreeItemRenderer}
             */
            function TreeEvent(type, bubbles, cancelable, itemIndex, item, itemRenderer) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = true; }
                if (itemIndex === void 0) { itemIndex = -1; }
                if (item === void 0) { item = null; }
                if (itemRenderer === void 0) { itemRenderer = null; }
                _super.call(this, type, bubbles, cancelable);
                /**
                 * 触发鼠标事件的项呈示器数据源项。
                 * @member egret.gui.TreeEvent#item
                 */
                this.item = null;
                /**
                 * 触发鼠标事件的项呈示器。
                 * @member egret.gui.TreeEvent#itemRenderer
                 */
                this.itemRenderer = null;
                /**
                 * 触发鼠标事件的项索引
                 * @member egret.gui.TreeEvent#itemIndex
                 */
                this.itemIndex = NaN;
                /**
                 * 当事件类型为ITEM_OPENING时，true表示即将打开节点，反之关闭。
                 * @member egret.gui.TreeEvent#opening
                 */
                this.opening = false;
                this.item = item;
                this.itemRenderer = itemRenderer;
                this.itemIndex = itemIndex;
            }
            var d = __define,c=TreeEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.TreeEvent.dispatchTreeEvent
             */
            TreeEvent.dispatchTreeEvent = function (target, type, itemIndex, item, itemRenderer, opening, bubbles, cancelable) {
                if (itemIndex === void 0) { itemIndex = -1; }
                if (item === void 0) { item = null; }
                if (itemRenderer === void 0) { itemRenderer = null; }
                if (opening === void 0) { opening = false; }
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                var event = egret.Event.create(TreeEvent, type);
                event.itemIndex = itemIndex;
                event.item = item;
                event.itemRenderer = itemRenderer;
                event.opening = opening;
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 节点关闭,注意：只有通过交互操作引起的节点关闭才会抛出此事件。
             * @constant egret.gui.TreeEvent.ITEM_CLOSE
             */
            TreeEvent.ITEM_CLOSE = "itemClose";
            /**
             * 节点打开,注意：只有通过交互操作引起的节点打开才会抛出此事件。
             * @constant egret.gui.TreeEvent.ITEM_OPEN
             */
            TreeEvent.ITEM_OPEN = "itemOpen";
            /**
             * 子节点打开或关闭前一刻分派。可以调用preventDefault()方法阻止节点的状态改变。
             * @constant egret.gui.TreeEvent.ITEM_OPENING
             */
            TreeEvent.ITEM_OPENING = "itemOpening";
            return TreeEvent;
        })(egret.Event);
        gui.TreeEvent = TreeEvent;
        egret.registerClass(TreeEvent,"egret.gui.TreeEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.UIEvent
         * @classdesc
         * UI事件
         * @extends egret.Event
         */
        var UIEvent = (function (_super) {
            __extends(UIEvent, _super);
            /**
             * @method egret.gui.UIEvent#constructor
             * @param type {string}
             * @param bubbles {boolean}
             * @param cancelable {boolean}
             */
            function UIEvent(type, bubbles, cancelable) {
                if (bubbles === void 0) { bubbles = false; }
                if (cancelable === void 0) { cancelable = false; }
                _super.call(this, type, bubbles, cancelable);
            }
            var d = __define,c=UIEvent;p=c.prototype;
            /**
             * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
             * @method egret.gui.UIEvent.dispatchUIEvent
             */
            UIEvent.dispatchUIEvent = function (target, type) {
                var event = egret.Event.create(UIEvent, type);
                var result = target.dispatchEvent(event);
                egret.Event.release(event);
                return result;
            };
            /**
             * 组件初始化开始
             * @constant egret.gui.UIEvent.INITIALIZE
             */
            UIEvent.INITIALIZE = "initialize";
            /**
             * 组件创建完成
             * @constant egret.gui.UIEvent.CREATION_COMPLETE
             */
            UIEvent.CREATION_COMPLETE = "creationComplete";
            /**
             * 组件的一次三个延迟验证渲染阶段全部完成
             * @constant egret.gui.UIEvent.UPDATE_COMPLETE
             */
            UIEvent.UPDATE_COMPLETE = "updateComplete";
            /**
             * 当用户按下ButtonBase控件时分派。如果 autoRepeat属性为 true，则只要按钮处于按下状态，就将重复分派此事件。
             * @constant egret.gui.UIEvent.BUTTON_DOWN
             */
            UIEvent.BUTTON_DOWN = "buttonDown";
            /**
             * 改变结束
             * @constant egret.gui.UIEvent.CHANGE_END
             */
            UIEvent.CHANGE_END = "changeEnd";
            /**
             * 改变开始
             * @constant egret.gui.UIEvent.CHANGE_START
             */
            UIEvent.CHANGE_START = "changeStart";
            /**
             * 正在改变中
             * @constant egret.gui.UIEvent.CHANGING
             */
            UIEvent.CHANGING = "changing";
            /**
             * 值发生改变
             * @constant egret.gui.UIEvent.VALUE_COMMIT
             */
            UIEvent.VALUE_COMMIT = "valueCommit";
            /**
             * SkinnableComponent皮肤发生改变
             * @constant egret.gui.UIEvent.SKIN_CHANGED
             */
            UIEvent.SKIN_CHANGED = "skinChanged";
            /**
             * UIAsset的content属性解析完成
             * @constant egret.gui.UIEvent.CONTENT_CHANGED
             */
            UIEvent.CONTENT_CHANGED = "contentChanged";
            /**
             * 下拉框弹出事件
             * @constant egret.gui.UIEvent.OPEN
             */
            UIEvent.OPEN = "open";
            /**
             * 下拉框关闭事件
             * @constant egret.gui.UIEvent.CLOSE
             */
            UIEvent.CLOSE = "close";
            /**
             * UIMoveClip一次播放完成事件。仅当UIMovieClip.totalFrames>1时会抛出此事件。
             * @constant egret.gui.UIEvent.PLAY_COMPLETE
             */
            UIEvent.PLAY_COMPLETE = "playComplete";
            return UIEvent;
        })(egret.Event);
        gui.UIEvent = UIEvent;
        egret.registerClass(UIEvent,"egret.gui.UIEvent");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.LayoutBase
         * @classdesc
         * 容器布局基类
         * @extends egret.EventDispatcher
         */
        var LayoutBase = (function (_super) {
            __extends(LayoutBase, _super);
            /**
             * @method egret.gui.LayoutBase#constructor
             */
            function LayoutBase() {
                _super.call(this);
                this._target = null;
                this._useVirtualLayout = false;
                this._typicalLayoutRect = null;
            }
            var d = __define,c=LayoutBase;p=c.prototype;
            d(p, "target"
                /**
                 * 目标容器
                 * @member egret.gui.LayoutBase#target
                 */
                ,function () {
                    return this._target;
                }
                ,function (value) {
                    if (this._target == value)
                        return;
                    this._target = value;
                    this.clearVirtualLayoutCache();
                }
            );
            d(p, "useVirtualLayout"
                /**
                 * 若要配置容器使用虚拟布局，请为与容器关联的布局的 useVirtualLayout 属性设置为 true。
                 * 只有布局设置为 VerticalLayout、HorizontalLayout
                 * 或 TileLayout 的 DataGroup 或 SkinnableDataContainer
                 * 才支持虚拟布局。不支持虚拟化的布局子类必须禁止更改此属性。
                 * @member egret.gui.LayoutBase#useVirtualLayout
                 */
                ,function () {
                    return this._useVirtualLayout;
                }
                ,function (value) {
                    if (this._useVirtualLayout == value)
                        return;
                    this._useVirtualLayout = value;
                    this.dispatchEventWith("useVirtualLayoutChanged");
                    if (this._useVirtualLayout && !value)
                        this.clearVirtualLayoutCache();
                    if (this.target)
                        this.target.invalidateDisplayList();
                }
            );
            d(p, "typicalLayoutRect"
                /**
                 * 由虚拟布局所使用，以估计尚未滚动到视图中的布局元素的大小。
                 * @member egret.gui.LayoutBase#typicalLayoutRect
                 */
                ,function () {
                    return this._typicalLayoutRect;
                }
                ,function (value) {
                    if (this._typicalLayoutRect == value)
                        return;
                    this._typicalLayoutRect = value;
                    if (this.target)
                        this.target.invalidateSize();
                }
            );
            /**
             * 滚动条位置改变
             * @method egret.gui.LayoutBase#scrollPositionChanged
             */
            p.scrollPositionChanged = function () {
            };
            /**
             * 清理虚拟布局缓存的数据
             * @method egret.gui.LayoutBase#clearVirtualLayoutCache
             */
            p.clearVirtualLayoutCache = function () {
            };
            /**
             * 在已添加布局元素之后且在验证目标的大小和显示列表之前，由目标调用。
             * 按元素状态缓存的布局（比如虚拟布局）可以覆盖此方法以更新其缓存。
             * @method egret.gui.LayoutBase#elementAdded
             * @param index {number}
             */
            p.elementAdded = function (index) {
            };
            /**
             * 必须在已删除布局元素之后且在验证目标的大小和显示列表之前，由目标调用此方法。
             * 按元素状态缓存的布局（比如虚拟布局）可以覆盖此方法以更新其缓存。
             * @method egret.gui.LayoutBase#elementRemoved
             * @param index {number}
             */
            p.elementRemoved = function (index) {
            };
            /**
             * 测量组件尺寸大小
             * @method egret.gui.LayoutBase#measure
             */
            p.measure = function () {
            };
            /**
             * 更新显示列表
             * @method egret.gui.LayoutBase#updateDisplayList
             * @param width {number}
             * @param height {number}
             */
            p.updateDisplayList = function (width, height) {
            };
            return LayoutBase;
        })(egret.EventDispatcher);
        gui.LayoutBase = LayoutBase;
        egret.registerClass(LayoutBase,"egret.gui.LayoutBase");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.BasicLayout
         * @classdesc
         * 基本布局
         * @extends egret.gui.LayoutBase
         */
        var BasicLayout = (function (_super) {
            __extends(BasicLayout, _super);
            /**
             * @method egret.gui.BasicLayout#constructor
             */
            function BasicLayout() {
                _super.call(this);
                this._mouseWheelSpeed = 20;
            }
            var d = __define,c=BasicLayout;p=c.prototype;
            d(p, "useVirtualLayout",undefined
                /**
                 * 此布局不支持虚拟布局，设置这个属性无效
                 */
                ,function (value) {
                }
            );
            d(p, "mouseWheelSpeed"
                /**
                 * 鼠标滚轮每次滚动时目标容器的verticalScrollPosition
                 * 或horizontalScrollPosition改变的像素距离。必须大于0， 默认值20。
                 * @member egret.gui.BasicLayout#mouseWheelSpeed
                 */
                ,function () {
                    return this._mouseWheelSpeed;
                }
                ,function (value) {
                    if (value == 0)
                        value = 1;
                    this._mouseWheelSpeed = value;
                }
            );
            p.getElementBoundsLeftOfScrollRect = function (scrollRect) {
                var bounds = new egret.Rectangle();
                bounds.x = scrollRect.x - this._mouseWheelSpeed;
                bounds.right = scrollRect.x;
                return bounds;
            };
            p.getElementBoundsRightOfScrollRect = function (scrollRect) {
                var bounds = new egret.Rectangle();
                bounds.x = scrollRect.right;
                bounds.right = scrollRect.right + this._mouseWheelSpeed;
                return bounds;
            };
            p.getElementBoundsAboveScrollRect = function (scrollRect) {
                var bounds = new egret.Rectangle();
                bounds.y = scrollRect.y - this._mouseWheelSpeed;
                bounds.bottom = scrollRect.y;
                return bounds;
            };
            p.getElementBoundsBelowScrollRect = function (scrollRect) {
                var bounds = new egret.Rectangle();
                bounds.y = scrollRect.bottom;
                bounds.bottom = scrollRect.bottom + this._mouseWheelSpeed;
                return bounds;
            };
            /**
             *基于目标的内容测量其默认大小，并（可选）测量目标的默认最小大小
             */
            p.measure = function () {
                _super.prototype.measure.call(this);
                if (this.target == null)
                    return;
                var width = 0;
                var height = 0;
                var count = this.target.numElements;
                for (var i = 0; i < count; i++) {
                    var layoutElement = (this.target.getElementAt(i));
                    if (!layoutElement || !layoutElement.includeInLayout)
                        continue;
                    var hCenter = layoutElement.horizontalCenter;
                    var vCenter = layoutElement.verticalCenter;
                    var left = layoutElement.left;
                    var right = layoutElement.right;
                    var top = layoutElement.top;
                    var bottom = layoutElement.bottom;
                    var extX;
                    var extY;
                    if (!isNaN(left) && !isNaN(right)) {
                        extX = left + right;
                    }
                    else if (!isNaN(hCenter)) {
                        extX = Math.abs(hCenter) * 2;
                    }
                    else if (!isNaN(left) || !isNaN(right)) {
                        extX = isNaN(left) ? 0 : left;
                        extX += isNaN(right) ? 0 : right;
                    }
                    else {
                        extX = layoutElement.preferredX;
                    }
                    if (!isNaN(top) && !isNaN(bottom)) {
                        extY = top + bottom;
                    }
                    else if (!isNaN(vCenter)) {
                        extY = Math.abs(vCenter) * 2;
                    }
                    else if (!isNaN(top) || !isNaN(bottom)) {
                        extY = isNaN(top) ? 0 : top;
                        extY += isNaN(bottom) ? 0 : bottom;
                    }
                    else {
                        extY = layoutElement.preferredY;
                    }
                    var preferredWidth = layoutElement.preferredWidth;
                    var preferredHeight = layoutElement.preferredHeight;
                    width = Math.ceil(Math.max(width, extX + preferredWidth));
                    height = Math.ceil(Math.max(height, extY + preferredHeight));
                }
                this.target.measuredWidth = width;
                this.target.measuredHeight = height;
            };
            /**
             * 调整目标的元素的大小并定位这些元素
             * @param unscaledWidth
             * @param unscaledHeight
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                if (this.target == null)
                    return;
                var count = this.target.numElements;
                var maxX = 0;
                var maxY = 0;
                for (var i = 0; i < count; i++) {
                    var layoutElement = (this.target.getElementAt(i));
                    if (layoutElement == null || !layoutElement.includeInLayout)
                        continue;
                    var hCenter = layoutElement.horizontalCenter;
                    var vCenter = layoutElement.verticalCenter;
                    var left = layoutElement.left;
                    var right = layoutElement.right;
                    var top = layoutElement.top;
                    var bottom = layoutElement.bottom;
                    var percentWidth = layoutElement.percentWidth;
                    var percentHeight = layoutElement.percentHeight;
                    var childWidth = NaN;
                    var childHeight = NaN;
                    if (!isNaN(left) && !isNaN(right)) {
                        childWidth = unscaledWidth - right - left;
                    }
                    else if (!isNaN(percentWidth)) {
                        childWidth = Math.round(unscaledWidth * Math.min(percentWidth * 0.01, 1));
                    }
                    if (!isNaN(top) && !isNaN(bottom)) {
                        childHeight = unscaledHeight - bottom - top;
                    }
                    else if (!isNaN(percentHeight)) {
                        childHeight = Math.round(unscaledHeight * Math.min(percentHeight * 0.01, 1));
                    }
                    layoutElement.setLayoutBoundsSize(childWidth, childHeight);
                    var elementWidth = layoutElement.layoutBoundsWidth;
                    var elementHeight = layoutElement.layoutBoundsHeight;
                    var childX = NaN;
                    var childY = NaN;
                    if (!isNaN(hCenter))
                        childX = Math.round((unscaledWidth - elementWidth) / 2 + hCenter);
                    else if (!isNaN(left))
                        childX = left;
                    else if (!isNaN(right))
                        childX = unscaledWidth - elementWidth - right;
                    else
                        childX = layoutElement.layoutBoundsX;
                    if (!isNaN(vCenter))
                        childY = Math.round((unscaledHeight - elementHeight) / 2 + vCenter);
                    else if (!isNaN(top))
                        childY = top;
                    else if (!isNaN(bottom))
                        childY = unscaledHeight - elementHeight - bottom;
                    else
                        childY = layoutElement.layoutBoundsY;
                    layoutElement.setLayoutBoundsPosition(childX, childY);
                    maxX = Math.max(maxX, childX + elementWidth);
                    maxY = Math.max(maxY, childY + elementHeight);
                }
                this.target.setContentSize(maxX, maxY);
            };
            return BasicLayout;
        })(gui.LayoutBase);
        gui.BasicLayout = BasicLayout;
        egret.registerClass(BasicLayout,"egret.gui.BasicLayout");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.ColumnAlign
         * @classdesc
         * ColumnAlign 类为 TileLayout 类的 columnAlign 属性定义可能的值。
         */
        var ColumnAlign = (function () {
            function ColumnAlign() {
            }
            var d = __define,c=ColumnAlign;p=c.prototype;
            /**
             * 不将行两端对齐。
             * @constant egret.gui.ColumnAlign.LEFT
             */
            ColumnAlign.LEFT = "left";
            /**
             * 通过增大水平间隙将行两端对齐。
             * @constant egret.gui.ColumnAlign.JUSTIFY_USING_GAP
             */
            ColumnAlign.JUSTIFY_USING_GAP = "justifyUsingGap";
            /**
             * 通过增大行高度将行两端对齐。
             * @constant egret.gui.ColumnAlign.JUSTIFY_USING_WIDTH
             */
            ColumnAlign.JUSTIFY_USING_WIDTH = "justifyUsingWidth";
            return ColumnAlign;
        })();
        gui.ColumnAlign = ColumnAlign;
        egret.registerClass(ColumnAlign,"egret.gui.ColumnAlign");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.HorizontalLayout
         * @classdesc
         * 水平布局
         * @extends egret.gui.LayoutBase
         */
        var HorizontalLayout = (function (_super) {
            __extends(HorizontalLayout, _super);
            /**
             * @method egret.gui.HorizontalLayout#constructor
             */
            function HorizontalLayout() {
                _super.call(this);
                this._horizontalAlign = egret.HorizontalAlign.LEFT;
                this._verticalAlign = egret.VerticalAlign.TOP;
                this._gap = 6;
                this._padding = 0;
                this._paddingLeft = NaN;
                this._paddingRight = NaN;
                this._paddingTop = NaN;
                this._paddingBottom = NaN;
                /**
                 * 虚拟布局使用的子对象尺寸缓存
                 */
                this.elementSizeTable = [];
                /**
                 * 虚拟布局使用的当前视图中的第一个元素索引
                 */
                this.startIndex = -1;
                /**
                 * 虚拟布局使用的当前视图中的最后一个元素的索引
                 */
                this.endIndex = -1;
                /**
                 * 视图的第一个和最后一个元素的索引值已经计算好的标志
                 */
                this.indexInViewCalculated = false;
                /**
                 * 子对象最大宽度
                 */
                this.maxElementHeight = 0;
            }
            var d = __define,c=HorizontalLayout;p=c.prototype;
            d(p, "horizontalAlign"
                /**
                 * 布局元素的水平对齐策略。参考HorizontalAlign定义的常量。
                 * 注意：此属性设置为CONTENT_JUSTIFY始终无效。当useVirtualLayout为true时，设置JUSTIFY也无效。
                 * @member egret.gui.HorizontalLayout#horizontalAlign
                 */
                ,function () {
                    return this._horizontalAlign;
                }
                ,function (value) {
                    if (this._horizontalAlign == value)
                        return;
                    this._horizontalAlign = value;
                    if (this.target)
                        this.target.invalidateDisplayList();
                }
            );
            d(p, "verticalAlign"
                /**
                 * 布局元素的竖直对齐策略。参考VerticalAlign定义的常量。
                 * @member egret.gui.HorizontalLayout#verticalAlign
                 */
                ,function () {
                    return this._verticalAlign;
                }
                ,function (value) {
                    if (this._verticalAlign == value)
                        return;
                    this._verticalAlign = value;
                    if (this.target)
                        this.target.invalidateDisplayList();
                }
            );
            d(p, "gap"
                /**
                 * 布局元素之间的水平空间（以像素为单位）
                 * @member egret.gui.HorizontalLayout#gap
                 */
                ,function () {
                    return this._gap;
                }
                ,function (value) {
                    if (this._gap == value)
                        return;
                    this._gap = value;
                    this.invalidateTargetSizeAndDisplayList();
                    if (this.hasEventListener("gapChanged"))
                        this.dispatchEventWith("gapChanged");
                }
            );
            d(p, "padding"
                /**
                 * 四个边缘的共同内边距。若单独设置了任一边缘的内边距，则该边缘的内边距以单独设置的值为准。
                 * 此属性主要用于快速设置多个边缘的相同内边距。默认值：0。
                 * @member egret.gui.HorizontalLayout#padding
                 */
                ,function () {
                    return this._padding;
                }
                ,function (value) {
                    if (this._padding == value)
                        return;
                    this._padding = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingLeft"
                /**
                 * 容器的左边缘与布局元素的左边缘之间的最少像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.HorizontalLayout#paddingLeft
                 */
                ,function () {
                    return this._paddingLeft;
                }
                ,function (value) {
                    if (this._paddingLeft == value)
                        return;
                    this._paddingLeft = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingRight"
                /**
                 * 容器的右边缘与布局元素的右边缘之间的最少像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.HorizontalLayout#paddingRight
                 */
                ,function () {
                    return this._paddingRight;
                }
                ,function (value) {
                    if (this._paddingRight == value)
                        return;
                    this._paddingRight = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingTop"
                /**
                 * 容器的顶边缘与第一个布局元素的顶边缘之间的像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.HorizontalLayout#paddingTop
                 */
                ,function () {
                    return this._paddingTop;
                }
                ,function (value) {
                    if (this._paddingTop == value)
                        return;
                    this._paddingTop = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingBottom"
                /**
                 * 容器的底边缘与最后一个布局元素的底边缘之间的像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.HorizontalLayout#paddingBottom
                 */
                ,function () {
                    return this._paddingBottom;
                }
                ,function (value) {
                    if (this._paddingBottom == value)
                        return;
                    this._paddingBottom = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            /**
             * 标记目标容器的尺寸和显示列表失效
             */
            p.invalidateTargetSizeAndDisplayList = function () {
                if (this.target) {
                    this.target.invalidateSize();
                    this.target.invalidateDisplayList();
                }
            };
            /**
             * 基于目标的内容测量其默认大小，并（可选）测量目标的默认最小大小
             * @method egret.gui.HorizontalLayout#measure
             */
            p.measure = function () {
                _super.prototype.measure.call(this);
                if (!this.target)
                    return;
                if (this.useVirtualLayout) {
                    this.measureVirtual();
                }
                else {
                    this.measureReal();
                }
            };
            /**
             * 测量使用虚拟布局的尺寸
             */
            p.measureVirtual = function () {
                var numElements = this.target.numElements;
                var typicalHeight = this.typicalLayoutRect ? this.typicalLayoutRect.height : 22;
                var typicalWidth = this.typicalLayoutRect ? this.typicalLayoutRect.width : 71;
                var measuredWidth = this.getElementTotalSize();
                var measuredHeight = Math.max(this.maxElementHeight, typicalHeight);
                var visibleIndices = this.target.getElementIndicesInView();
                var length = visibleIndices.length;
                for (var i = 0; i < length; i++) {
                    var index = visibleIndices[i];
                    var layoutElement = (this.target.getElementAt(index));
                    if (layoutElement == null || !layoutElement.includeInLayout)
                        continue;
                    var preferredWidth = layoutElement.preferredWidth;
                    var preferredHeight = layoutElement.preferredHeight;
                    measuredWidth += preferredWidth;
                    measuredWidth -= isNaN(this.elementSizeTable[index]) ? typicalWidth : this.elementSizeTable[index];
                    measuredHeight = Math.max(measuredHeight, preferredHeight);
                }
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var hPadding = paddingL + paddingR;
                var vPadding = paddingT + paddingB;
                this.target.measuredWidth = Math.ceil(measuredWidth + hPadding);
                this.target.measuredHeight = Math.ceil(measuredHeight + vPadding);
            };
            /**
             * 测量使用真实布局的尺寸
             */
            p.measureReal = function () {
                var count = this.target.numElements;
                var numElements = count;
                var measuredWidth = 0;
                var measuredHeight = 0;
                for (var i = 0; i < count; i++) {
                    var layoutElement = (this.target.getElementAt(i));
                    if (!layoutElement || !layoutElement.includeInLayout) {
                        numElements--;
                        continue;
                    }
                    var preferredWidth = layoutElement.preferredWidth;
                    var preferredHeight = layoutElement.preferredHeight;
                    measuredWidth += preferredWidth;
                    measuredHeight = Math.max(measuredHeight, preferredHeight);
                }
                var gap = isNaN(this._gap) ? 0 : this._gap;
                measuredWidth += (numElements - 1) * gap;
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var hPadding = paddingL + paddingR;
                var vPadding = paddingT + paddingB;
                this.target.measuredWidth = Math.ceil(measuredWidth + hPadding);
                this.target.measuredHeight = Math.ceil(measuredHeight + vPadding);
            };
            /**
             * 调整目标的元素的大小并定位这些元素
             * @method egret.gui.HorizontalLayout#updateDisplayList
             * @param width {number}
             * @param height {number}
             */
            p.updateDisplayList = function (width, height) {
                _super.prototype.updateDisplayList.call(this, width, height);
                if (!this.target)
                    return;
                if (this.target.numElements == 0) {
                    var padding = isNaN(this._padding) ? 0 : this._padding;
                    var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                    var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                    var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                    var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                    this.target.setContentSize(Math.ceil(paddingL + paddingR), Math.ceil(paddingT + paddingB));
                    return;
                }
                if (this.useVirtualLayout) {
                    this.updateDisplayListVirtual(width, height);
                }
                else {
                    this.updateDisplayListReal(width, height);
                }
            };
            /**
             * 获取指定索引的起始位置
             */
            p.getStartPosition = function (index) {
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var gap = isNaN(this._gap) ? 0 : this._gap;
                if (!this.useVirtualLayout) {
                    var element;
                    if (this.target) {
                        element = this.target.getElementAt(index);
                    }
                    return element ? element.x : paddingL;
                }
                var typicalWidth = this.typicalLayoutRect ? this.typicalLayoutRect.width : 71;
                var startPos = paddingL;
                for (var i = 0; i < index; i++) {
                    var eltWidth = this.elementSizeTable[i];
                    if (isNaN(eltWidth)) {
                        eltWidth = typicalWidth;
                    }
                    startPos += eltWidth + gap;
                }
                return startPos;
            };
            /**
             * 获取指定索引的元素尺寸
             */
            p.getElementSize = function (index) {
                if (this.useVirtualLayout) {
                    var size = this.elementSizeTable[index];
                    if (isNaN(size)) {
                        size = this.typicalLayoutRect ? this.typicalLayoutRect.width : 71;
                    }
                    return size;
                }
                if (this.target) {
                    return this.target.getElementAt(index).width;
                }
                return 0;
            };
            /**
             * 获取缓存的子对象尺寸总和
             */
            p.getElementTotalSize = function () {
                var typicalWidth = this.typicalLayoutRect ? this.typicalLayoutRect.width : 71;
                var gap = isNaN(this._gap) ? 0 : this._gap;
                var totalSize = 0;
                var length = this.target.numElements;
                for (var i = 0; i < length; i++) {
                    var eltWidth = this.elementSizeTable[i];
                    if (isNaN(eltWidth)) {
                        eltWidth = typicalWidth;
                    }
                    totalSize += eltWidth + gap;
                }
                totalSize -= gap;
                return totalSize;
            };
            p.elementAdded = function (index) {
                if (!this.useVirtualLayout)
                    return;
                _super.prototype.elementAdded.call(this, index);
                var typicalWidth = this.typicalLayoutRect ? this.typicalLayoutRect.width : 71;
                this.elementSizeTable.splice(index, 0, typicalWidth);
            };
            p.elementRemoved = function (index) {
                if (!this.useVirtualLayout)
                    return;
                _super.prototype.elementRemoved.call(this, index);
                this.elementSizeTable.splice(index, 1);
            };
            /**
             * 如果 useVirtualLayout 为 true，则当布局目标改变时，布局目标可以使用此方法来清除已缓存布局信息
             */
            p.clearVirtualLayoutCache = function () {
                if (!this.useVirtualLayout)
                    return;
                _super.prototype.clearVirtualLayoutCache.call(this);
                this.elementSizeTable = [];
                this.maxElementHeight = 0;
            };
            /**
             * 折半查找法寻找指定位置的显示对象索引
             */
            p.findIndexAt = function (x, i0, i1) {
                var index = Math.floor((i0 + i1) * 0.5);
                var elementX = this.getStartPosition(index);
                var elementWidth = this.getElementSize(index);
                var gap = isNaN(this._gap) ? 0 : this._gap;
                if ((x >= elementX) && (x < elementX + elementWidth + gap))
                    return index;
                else if (i0 == i1)
                    return -1;
                else if (x < elementX)
                    return this.findIndexAt(x, i0, Math.max(i0, index - 1));
                else
                    return this.findIndexAt(x, Math.min(index + 1, i1), i1);
            };
            /**
             * verticalScrollPosition 或 horizontalScrollPosition 属性更改时调用
             * @method egret.gui.HorizontalLayout#scrollPositionChanged
             */
            p.scrollPositionChanged = function () {
                _super.prototype.scrollPositionChanged.call(this);
                if (this.useVirtualLayout) {
                    var changed = this.getIndexInView();
                    if (changed) {
                        this.indexInViewCalculated = true;
                        this.target.invalidateDisplayList();
                    }
                }
            };
            /**
             * 获取视图中第一个和最后一个元素的索引,返回是否发生改变
             */
            p.getIndexInView = function () {
                if (!this.target || this.target.numElements == 0) {
                    this.startIndex = this.endIndex = -1;
                    return false;
                }
                if (isNaN(this.target.width) || this.target.width == 0 || isNaN(this.target.height) || this.target.height == 0) {
                    this.startIndex = this.endIndex = -1;
                    return false;
                }
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var numElements = this.target.numElements;
                var contentWidth = this.getStartPosition(numElements - 1) + this.elementSizeTable[numElements - 1] + paddingR;
                var minVisibleX = this.target.horizontalScrollPosition;
                if (minVisibleX > contentWidth - paddingR) {
                    this.startIndex = -1;
                    this.endIndex = -1;
                    return false;
                }
                var maxVisibleX = this.target.horizontalScrollPosition + this.target.width;
                if (maxVisibleX < paddingL) {
                    this.startIndex = -1;
                    this.endIndex = -1;
                    return false;
                }
                var oldStartIndex = this.startIndex;
                var oldEndIndex = this.endIndex;
                this.startIndex = this.findIndexAt(minVisibleX, 0, numElements - 1);
                if (this.startIndex == -1)
                    this.startIndex = 0;
                this.endIndex = this.findIndexAt(maxVisibleX, 0, numElements - 1);
                if (this.endIndex == -1)
                    this.endIndex = numElements - 1;
                return oldStartIndex != this.startIndex || oldEndIndex != this.endIndex;
            };
            /**
             * 更新使用虚拟布局的显示列表
             */
            p.updateDisplayListVirtual = function (width, height) {
                if (this.indexInViewCalculated)
                    this.indexInViewCalculated = false;
                else
                    this.getIndexInView();
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var gap = isNaN(this._gap) ? 0 : this._gap;
                var contentWidth;
                var numElements = this.target.numElements;
                if (this.startIndex == -1 || this.endIndex == -1) {
                    contentWidth = this.getStartPosition(numElements) - gap + paddingR;
                    this.target.setContentSize(Math.ceil(contentWidth), this.target.contentHeight);
                    return;
                }
                this.target.setVirtualElementIndicesInView(this.startIndex, this.endIndex);
                //获取垂直布局参数
                var justify = this._verticalAlign == egret.VerticalAlign.JUSTIFY || this._verticalAlign == egret.VerticalAlign.CONTENT_JUSTIFY;
                var contentJustify = this._verticalAlign == egret.VerticalAlign.CONTENT_JUSTIFY;
                var vAlign = 0;
                if (!justify) {
                    if (this._verticalAlign == egret.VerticalAlign.MIDDLE) {
                        vAlign = 0.5;
                    }
                    else if (this._verticalAlign == egret.VerticalAlign.BOTTOM) {
                        vAlign = 1;
                    }
                }
                var targetHeight = Math.max(0, height - paddingT - paddingB);
                var justifyHeight = Math.ceil(targetHeight);
                var layoutElement;
                var typicalHeight = this.typicalLayoutRect ? this.typicalLayoutRect.height : 22;
                var typicalWidth = this.typicalLayoutRect ? this.typicalLayoutRect.width : 71;
                var oldMaxH = Math.max(typicalHeight, this.maxElementHeight);
                if (contentJustify) {
                    for (var index = this.startIndex; index <= this.endIndex; index++) {
                        layoutElement = (this.target.getVirtualElementAt(index));
                        if (!layoutElement || !layoutElement.includeInLayout)
                            continue;
                        this.maxElementHeight = Math.max(this.maxElementHeight, layoutElement.preferredHeight);
                    }
                    justifyHeight = Math.ceil(Math.max(targetHeight, this.maxElementHeight));
                }
                var x = 0;
                var y = 0;
                var contentHeight = 0;
                var oldElementSize;
                var needInvalidateSize = false;
                for (var i = this.startIndex; i <= this.endIndex; i++) {
                    var exceesHeight = 0;
                    layoutElement = (this.target.getVirtualElementAt(i));
                    if (!layoutElement) {
                        continue;
                    }
                    else if (!layoutElement.includeInLayout) {
                        this.elementSizeTable[i] = 0;
                        continue;
                    }
                    if (justify) {
                        y = paddingT;
                        layoutElement.setLayoutBoundsSize(NaN, justifyHeight);
                    }
                    else {
                        exceesHeight = (targetHeight - layoutElement.layoutBoundsHeight) * vAlign;
                        exceesHeight = exceesHeight > 0 ? exceesHeight : 0;
                        y = paddingT + exceesHeight;
                    }
                    if (!contentJustify)
                        this.maxElementHeight = Math.max(this.maxElementHeight, layoutElement.preferredHeight);
                    contentHeight = Math.max(contentHeight, layoutElement.layoutBoundsHeight);
                    if (!needInvalidateSize) {
                        oldElementSize = isNaN(this.elementSizeTable[i]) ? typicalWidth : this.elementSizeTable[i];
                        if (oldElementSize != layoutElement.layoutBoundsWidth)
                            needInvalidateSize = true;
                    }
                    if (i == 0 && this.elementSizeTable.length > 0 && this.elementSizeTable[i] != layoutElement.layoutBoundsWidth)
                        this.typicalLayoutRect = null;
                    this.elementSizeTable[i] = layoutElement.layoutBoundsWidth;
                    x = this.getStartPosition(i);
                    layoutElement.setLayoutBoundsPosition(Math.round(x), Math.round(y));
                }
                contentHeight += paddingT + paddingB;
                contentWidth = this.getStartPosition(numElements) - gap + paddingR;
                this.target.setContentSize(Math.ceil(contentWidth), Math.ceil(contentHeight));
                if (needInvalidateSize || oldMaxH < this.maxElementHeight) {
                    this.target.invalidateSize();
                }
            };
            /**
             * 更新使用真实布局的显示列表
             */
            p.updateDisplayListReal = function (width, height) {
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var gap = isNaN(this._gap) ? 0 : this._gap;
                var targetWidth = Math.max(0, width - paddingL - paddingR);
                var targetHeight = Math.max(0, height - paddingT - paddingB);
                var hJustify = this._horizontalAlign == egret.HorizontalAlign.JUSTIFY;
                var vJustify = this._verticalAlign == egret.VerticalAlign.JUSTIFY || this._verticalAlign == egret.VerticalAlign.CONTENT_JUSTIFY;
                var vAlign = 0;
                if (!vJustify) {
                    if (this._verticalAlign == egret.VerticalAlign.MIDDLE) {
                        vAlign = 0.5;
                    }
                    else if (this._verticalAlign == egret.VerticalAlign.BOTTOM) {
                        vAlign = 1;
                    }
                }
                var count = this.target.numElements;
                var numElements = count;
                var x = paddingL;
                var y = paddingT;
                var i;
                var layoutElement;
                var totalPreferredWidth = 0;
                var totalPercentWidth = 0;
                var childInfoArray = [];
                var childInfo;
                var widthToDistribute = targetWidth;
                for (i = 0; i < count; i++) {
                    layoutElement = (this.target.getElementAt(i));
                    if (!layoutElement || !layoutElement.includeInLayout) {
                        numElements--;
                        continue;
                    }
                    this.maxElementHeight = Math.max(this.maxElementHeight, layoutElement.preferredHeight);
                    if (hJustify) {
                        totalPreferredWidth += layoutElement.preferredWidth;
                    }
                    else {
                        if (!isNaN(layoutElement.percentWidth)) {
                            totalPercentWidth += layoutElement.percentWidth;
                            childInfo = new ChildInfo();
                            childInfo.layoutElement = layoutElement;
                            childInfo.percent = layoutElement.percentWidth;
                            childInfo.min = layoutElement.minWidth;
                            childInfo.max = layoutElement.maxWidth;
                            childInfoArray.push(childInfo);
                        }
                        else {
                            widthToDistribute -= layoutElement.preferredWidth;
                        }
                    }
                }
                widthToDistribute -= gap * (numElements - 1);
                widthToDistribute = widthToDistribute > 0 ? widthToDistribute : 0;
                var excessSpace = targetWidth - totalPreferredWidth - gap * (numElements - 1);
                var averageWidth;
                var largeChildrenCount = numElements;
                var widthDic = [];
                if (hJustify) {
                    if (excessSpace < 0) {
                        averageWidth = widthToDistribute / numElements;
                        for (i = 0; i < count; i++) {
                            layoutElement = this.target.getElementAt(i);
                            if (!layoutElement || !layoutElement.includeInLayout)
                                continue;
                            var preferredWidth = layoutElement.preferredWidth;
                            if (preferredWidth <= averageWidth) {
                                widthToDistribute -= preferredWidth;
                                largeChildrenCount--;
                                continue;
                            }
                        }
                        widthToDistribute = widthToDistribute > 0 ? widthToDistribute : 0;
                    }
                }
                else {
                    if (totalPercentWidth > 0) {
                        HorizontalLayout.flexChildrenProportionally(targetWidth, widthToDistribute, totalPercentWidth, childInfoArray);
                        var roundOff = 0;
                        var length = childInfoArray.length;
                        for (i = 0; i < length; i++) {
                            childInfo = childInfoArray[i];
                            var childSize = Math.round(childInfo.size + roundOff);
                            roundOff += childInfo.size - childSize;
                            widthDic[childInfo.layoutElement.hashCode] = childSize;
                            widthToDistribute -= childSize;
                        }
                        widthToDistribute = widthToDistribute > 0 ? widthToDistribute : 0;
                    }
                }
                if (this._horizontalAlign == egret.HorizontalAlign.CENTER) {
                    x = paddingL + widthToDistribute * 0.5;
                }
                else if (this._horizontalAlign == egret.HorizontalAlign.RIGHT) {
                    x = paddingL + widthToDistribute;
                }
                var maxX = paddingL;
                var maxY = paddingT;
                var dx = 0;
                var dy = 0;
                var justifyHeight = Math.ceil(targetHeight);
                if (this._verticalAlign == egret.VerticalAlign.CONTENT_JUSTIFY)
                    justifyHeight = Math.ceil(Math.max(targetHeight, this.maxElementHeight));
                roundOff = 0;
                var layoutElementWidth;
                var childWidth;
                for (i = 0; i < count; i++) {
                    var exceesHeight = 0;
                    layoutElement = (this.target.getElementAt(i));
                    if (!layoutElement || !layoutElement.includeInLayout)
                        continue;
                    layoutElementWidth = NaN;
                    if (hJustify) {
                        childWidth = NaN;
                        if (excessSpace > 0) {
                            childWidth = widthToDistribute * layoutElement.preferredWidth / totalPreferredWidth;
                        }
                        else if (excessSpace < 0 && layoutElement.preferredWidth > averageWidth) {
                            childWidth = widthToDistribute / largeChildrenCount;
                        }
                        if (!isNaN(childWidth)) {
                            layoutElementWidth = Math.round(childWidth + roundOff);
                            roundOff += childWidth - layoutElementWidth;
                        }
                    }
                    else {
                        layoutElementWidth = widthDic[layoutElement.hashCode];
                    }
                    if (vJustify) {
                        y = paddingT;
                        layoutElement.setLayoutBoundsSize(layoutElementWidth, justifyHeight);
                    }
                    else {
                        var layoutElementHeight = NaN;
                        if (!isNaN(layoutElement.percentHeight)) {
                            var percent = Math.min(100, layoutElement.percentHeight);
                            layoutElementHeight = Math.round(targetHeight * percent * 0.01);
                        }
                        layoutElement.setLayoutBoundsSize(layoutElementWidth, layoutElementHeight);
                        exceesHeight = (targetHeight - layoutElement.layoutBoundsHeight) * vAlign;
                        exceesHeight = exceesHeight > 0 ? exceesHeight : 0;
                        y = paddingT + exceesHeight;
                    }
                    layoutElement.setLayoutBoundsPosition(Math.round(x), Math.round(y));
                    dx = Math.ceil(layoutElement.layoutBoundsWidth);
                    dy = Math.ceil(layoutElement.layoutBoundsHeight);
                    maxX = Math.max(maxX, x + dx);
                    maxY = Math.max(maxY, y + dy);
                    x += dx + gap;
                }
                this.target.setContentSize(Math.ceil(maxX + paddingR), Math.ceil(maxY + paddingB));
            };
            /**
             * 为每个可变尺寸的子项分配空白区域
             * @param spaceForChildren {number}
             * @param spaceToDistribute {number}
             * @param totalPercent {number}
             * @param childInfoArray {Array<any>}
             */
            HorizontalLayout.flexChildrenProportionally = function (spaceForChildren, spaceToDistribute, totalPercent, childInfoArray) {
                var numChildren = childInfoArray.length;
                var done;
                do {
                    done = true;
                    var unused = spaceToDistribute - (spaceForChildren * totalPercent / 100);
                    if (unused > 0)
                        spaceToDistribute -= unused;
                    else
                        unused = 0;
                    var spacePerPercent = spaceToDistribute / totalPercent;
                    for (var i = 0; i < numChildren; i++) {
                        var childInfo = childInfoArray[i];
                        var size = childInfo.percent * spacePerPercent;
                        if (size < childInfo.min) {
                            var min = childInfo.min;
                            childInfo.size = min;
                            childInfoArray[i] = childInfoArray[--numChildren];
                            childInfoArray[numChildren] = childInfo;
                            totalPercent -= childInfo.percent;
                            if (unused >= min) {
                                unused -= min;
                            }
                            else {
                                spaceToDistribute -= min - unused;
                                unused = 0;
                            }
                            done = false;
                            break;
                        }
                        else if (size > childInfo.max) {
                            var max = childInfo.max;
                            childInfo.size = max;
                            childInfoArray[i] = childInfoArray[--numChildren];
                            childInfoArray[numChildren] = childInfo;
                            totalPercent -= childInfo.percent;
                            if (unused >= max) {
                                unused -= max;
                            }
                            else {
                                spaceToDistribute -= max - unused;
                                unused = 0;
                            }
                            done = false;
                            break;
                        }
                        else {
                            childInfo.size = size;
                        }
                    }
                } while (!done);
            };
            return HorizontalLayout;
        })(gui.LayoutBase);
        gui.HorizontalLayout = HorizontalLayout;
        egret.registerClass(HorizontalLayout,"egret.gui.HorizontalLayout");
        var ChildInfo = (function () {
            function ChildInfo() {
                /**
                 * @member egret.ChildInfo#layoutElement
                 */
                this.layoutElement = null;
                /**
                 * @member egret.ChildInfo#size
                 */
                this.size = 0;
                /**
                 * @member egret.ChildInfo#percent
                 */
                this.percent = NaN;
                /**
                 * @member egret.ChildInfo#min
                 */
                this.min = NaN;
                /**
                 * @member egret.ChildInfo#max
                 */
                this.max = NaN;
            }
            var d = __define,c=ChildInfo;p=c.prototype;
            return ChildInfo;
        })();
        egret.registerClass(ChildInfo,"ChildInfo");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.RowAlign
         * @classdesc
         * RowAlign 类为 TileLayout 类的 rowAlign 属性定义可能的值。
         */
        var RowAlign = (function () {
            function RowAlign() {
            }
            var d = __define,c=RowAlign;p=c.prototype;
            /**
             * 不进行两端对齐。
             * @constant egret.gui.RowAlign.TOP
             */
            RowAlign.TOP = "top";
            /**
             * 通过增大垂直间隙将行两端对齐。
             * @constant egret.gui.RowAlign.JUSTIFY_USING_GAP
             */
            RowAlign.JUSTIFY_USING_GAP = "justifyUsingGap";
            /**
             * 通过增大行高度将行两端对齐。
             * @constant egret.gui.RowAlign.JUSTIFY_USING_HEIGHT
             */
            RowAlign.JUSTIFY_USING_HEIGHT = "justifyUsingHeight";
            return RowAlign;
        })();
        gui.RowAlign = RowAlign;
        egret.registerClass(RowAlign,"egret.gui.RowAlign");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TileLayout
         * @classdesc
         * 格子布局
         * @extends egret.gui.LayoutBase
         */
        var TileLayout = (function (_super) {
            __extends(TileLayout, _super);
            /**
             * 构造函数
             * @method egret.gui.TileLayout#constructor
             */
            function TileLayout() {
                _super.call(this);
                /**
                 * 标记horizontalGap被显式指定过
                 */
                this.explicitHorizontalGap = NaN;
                this._horizontalGap = 6;
                /**
                 * 标记verticalGap被显式指定过
                 */
                this.explicitVerticalGap = NaN;
                this._verticalGap = 6;
                this._columnCount = -1;
                this._requestedColumnCount = 0;
                this._rowCount = -1;
                this._requestedRowCount = 0;
                /**
                 * 外部显式指定的列宽
                 */
                this.explicitColumnWidth = NaN;
                this._columnWidth = NaN;
                /**
                 * 外部显式指定的行高
                 */
                this.explicitRowHeight = NaN;
                this._rowHeight = NaN;
                this._padding = 0;
                this._paddingLeft = NaN;
                this._paddingRight = NaN;
                this._paddingTop = NaN;
                this._paddingBottom = NaN;
                this._horizontalAlign = egret.HorizontalAlign.JUSTIFY;
                this._verticalAlign = egret.VerticalAlign.JUSTIFY;
                this._columnAlign = gui.ColumnAlign.LEFT;
                this._rowAlign = gui.RowAlign.TOP;
                this._orientation = gui.TileOrientation.ROWS;
                /**
                 * 缓存的最大子对象宽度
                 */
                this.maxElementWidth = 0;
                /**
                 * 缓存的最大子对象高度
                 */
                this.maxElementHeight = 0;
                /**
                 * 当前视图中的第一个元素索引
                 */
                this.startIndex = -1;
                /**
                 * 当前视图中的最后一个元素的索引
                 */
                this.endIndex = -1;
                /**
                 * 视图的第一个和最后一个元素的索引值已经计算好的标志
                 */
                this.indexInViewCalculated = false;
            }
            var d = __define,c=TileLayout;p=c.prototype;
            d(p, "horizontalGap"
                /**
                 * 列之间的水平空间（以像素为单位）。
                 * @member egret.gui.TileLayout#horizontalGap
                 */
                ,function () {
                    return this._horizontalGap;
                }
                ,function (value) {
                    if (value == this._horizontalGap)
                        return;
                    this.explicitHorizontalGap = value;
                    this._horizontalGap = value;
                    this.invalidateTargetSizeAndDisplayList();
                    if (this.hasEventListener("gapChanged"))
                        this.dispatchEventWith("gapChanged");
                }
            );
            d(p, "verticalGap"
                /**
                 * 行之间的垂直空间（以像素为单位）。
                 * @member egret.gui.TileLayout#verticalGap
                 */
                ,function () {
                    return this._verticalGap;
                }
                ,function (value) {
                    if (value == this._verticalGap)
                        return;
                    this.explicitVerticalGap = value;
                    this._verticalGap = value;
                    this.invalidateTargetSizeAndDisplayList();
                    if (this.hasEventListener("gapChanged"))
                        this.dispatchEventWith("gapChanged");
                }
            );
            d(p, "columnCount"
                /**
                 * 实际列计数。
                 * @member egret.gui.TileLayout#columnCount
                 */
                ,function () {
                    return this._columnCount;
                }
            );
            d(p, "requestedColumnCount"
                /**
                 * 要显示的列数。设置为0表示自动确定列计数,默认值0。<br/>
                 * 注意:当orientation为TileOrientation.COLUMNS(逐列排列元素)且taget被显式设置宽度时，此属性无效。
                 * @member egret.gui.TileLayout#requestedColumnCount
                 */
                ,function () {
                    return this._requestedColumnCount;
                }
                ,function (value) {
                    if (this._requestedColumnCount == value)
                        return;
                    this._requestedColumnCount = value;
                    this._columnCount = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "rowCount"
                /**
                 * 实际行计数。
                 * @member egret.gui.TileLayout#rowCount
                 */
                ,function () {
                    return this._rowCount;
                }
            );
            d(p, "requestedRowCount"
                /**
                 * 要显示的行数。设置为0表示自动确定行计数,默认值0。<br/>
                 * 注意:当orientation为TileOrientation.ROWS(即逐行排列元素,此为默认值)且target被显式设置高度时，此属性无效。
                 * @member egret.gui.TileLayout#requestedRowCount
                 */
                ,function () {
                    return this._requestedRowCount;
                }
                ,function (value) {
                    if (this._requestedRowCount == value)
                        return;
                    this._requestedRowCount = value;
                    this._rowCount = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "columnWidth"
                /**
                 * 实际列宽（以像素为单位）。 若未显式设置，则从根据最宽的元素的宽度确定列宽度。
                 * @member egret.gui.TileLayout#columnWidth
                 */
                ,function () {
                    return this._columnWidth;
                }
                /**
                 */
                ,function (value) {
                    if (value == this._columnWidth)
                        return;
                    this.explicitColumnWidth = value;
                    this._columnWidth = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "rowHeight"
                /**
                 * 行高（以像素为单位）。 如果未显式设置，则从元素的高度的最大值确定行高度。
                 * @member egret.gui.TileLayout#rowHeight
                 */
                ,function () {
                    return this._rowHeight;
                }
                /**
                 */
                ,function (value) {
                    if (value == this._rowHeight)
                        return;
                    this.explicitRowHeight = value;
                    this._rowHeight = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "padding"
                /**
                 * 四个边缘的共同内边距。若单独设置了任一边缘的内边距，则该边缘的内边距以单独设置的值为准。
                 * 此属性主要用于快速设置多个边缘的相同内边距。默认值：0。
                 * @member egret.gui.TileLayout#padding
                 */
                ,function () {
                    return this._padding;
                }
                ,function (value) {
                    if (this._padding == value)
                        return;
                    this._padding = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingLeft"
                /**
                 * 容器的左边缘与布局元素的左边缘之间的最少像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.TileLayout#paddingLeft
                 */
                ,function () {
                    return this._paddingLeft;
                }
                ,function (value) {
                    if (this._paddingLeft == value)
                        return;
                    this._paddingLeft = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingRight"
                /**
                 * 容器的右边缘与布局元素的右边缘之间的最少像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.TileLayout#paddingRight
                 */
                ,function () {
                    return this._paddingRight;
                }
                ,function (value) {
                    if (this._paddingRight == value)
                        return;
                    this._paddingRight = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingTop"
                /**
                 * 容器的顶边缘与第一个布局元素的顶边缘之间的像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.TileLayout#paddingTop
                 */
                ,function () {
                    return this._paddingTop;
                }
                ,function (value) {
                    if (this._paddingTop == value)
                        return;
                    this._paddingTop = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingBottom"
                /**
                 * 容器的底边缘与最后一个布局元素的底边缘之间的像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.TileLayout#paddingBottom
                 */
                ,function () {
                    return this._paddingBottom;
                }
                ,function (value) {
                    if (this._paddingBottom == value)
                        return;
                    this._paddingBottom = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "horizontalAlign"
                /**
                 * 指定如何在水平方向上对齐单元格内的元素。
                 * 支持的值有 HorizontalAlign.LEFT、HorizontalAlign.CENTER、
                 * HorizontalAlign.RIGHT、HorizontalAlign.JUSTIFY。
                 * 默认值：HorizontalAlign.JUSTIFY
                 * @member egret.gui.TileLayout#horizontalAlign
                 */
                ,function () {
                    return this._horizontalAlign;
                }
                ,function (value) {
                    if (this._horizontalAlign == value)
                        return;
                    this._horizontalAlign = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "verticalAlign"
                /**
                 * 指定如何在垂直方向上对齐单元格内的元素。
                 * 支持的值有 VerticalAlign.TOP、VerticalAlign.MIDDLE、
                 * VerticalAlign.BOTTOM、VerticalAlign.JUSTIFY。
                 * 默认值：VerticalAlign.JUSTIFY。
                 * @member egret.gui.TileLayout#verticalAlign
                 */
                ,function () {
                    return this._verticalAlign;
                }
                ,function (value) {
                    if (this._verticalAlign == value)
                        return;
                    this._verticalAlign = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "columnAlign"
                /**
                 * 指定如何将完全可见列与容器宽度对齐。
                 * 设置为 ColumnAlign.LEFT 时，它会关闭列两端对齐。在容器的最后一列和右边缘之间可能存在部分可见的列或空白。这是默认值。
                 * 设置为 ColumnAlign.JUSTIFY_USING_GAP 时，horizontalGap 的实际值将增大，
                 * 这样最后一个完全可见列右边缘会与容器的右边缘对齐。仅存在一个完全可见列时，
                 * horizontalGap 的实际值将增大，这样它会将任何部分可见列推到容器的右边缘之外。
                 * 请注意显式设置 horizontalGap 属性不会关闭两端对齐。它仅确定初始间隙值。两端对齐可能会增大它。
                 * 设置为 ColumnAlign.JUSTIFY_USING_WIDTH 时，columnWidth 的实际值将增大，
                 * 这样最后一个完全可见列右边缘会与容器的右边缘对齐。请注意显式设置 columnWidth 属性不会关闭两端对齐。
                 * 它仅确定初始列宽度值。两端对齐可能会增大它。
                 * @member egret.gui.TileLayout#columnAlign
                 */
                ,function () {
                    return this._columnAlign;
                }
                ,function (value) {
                    if (this._columnAlign == value)
                        return;
                    this._columnAlign = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "rowAlign"
                /**
                 * @member egret.gui.TileLayout#rowAlign
                 */
                ,function () {
                    return this._rowAlign;
                }
                /**
                 * 指定如何将完全可见行与容器高度对齐。
                 * 设置为 RowAlign.TOP 时，它会关闭列两端对齐。在容器的最后一行和底边缘之间可能存在部分可见的行或空白。这是默认值。
                 *
                 * 设置为 RowAlign.JUSTIFY_USING_GAP 时，verticalGap 的实际值会增大，
                 * 这样最后一个完全可见行底边缘会与容器的底边缘对齐。仅存在一个完全可见行时，verticalGap 的值会增大，
                 * 这样它会将任何部分可见行推到容器的底边缘之外。请注意，显式设置 verticalGap
                 * 不会关闭两端对齐，而只是确定初始间隙值。两端对齐接着可以增大它。
                 *
                 * 设置为 RowAlign.JUSTIFY_USING_HEIGHT 时，rowHeight 的实际值会增大，
                 * 这样最后一个完全可见行底边缘会与容器的底边缘对齐。请注意，显式设置 rowHeight
                 * 不会关闭两端对齐，而只是确定初始行高度值。两端对齐接着可以增大它。
                 */
                ,function (value) {
                    if (this._rowAlign == value)
                        return;
                    this._rowAlign = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "orientation"
                /**
                 * 指定是逐行还是逐列排列元素。
                 * @member egret.gui.TileLayout#orientation
                 */
                ,function () {
                    return this._orientation;
                }
                ,function (value) {
                    if (this._orientation == value)
                        return;
                    this._orientation = value;
                    this.invalidateTargetSizeAndDisplayList();
                    if (this.hasEventListener("orientationChanged"))
                        this.dispatchEventWith("orientationChanged");
                }
            );
            /**
             * 标记目标容器的尺寸和显示列表失效
             */
            p.invalidateTargetSizeAndDisplayList = function () {
                if (this.target) {
                    this.target.invalidateSize();
                    this.target.invalidateDisplayList();
                }
            };
            /**
             * 基于目标的内容测量其默认大小，并（可选）测量目标的默认最小大小
             */
            p.measure = function () {
                if (!this.target)
                    return;
                var savedColumnCount = this._columnCount;
                var savedRowCount = this._rowCount;
                var savedColumnWidth = this._columnWidth;
                var savedRowHeight = this._rowHeight;
                var measuredWidth = 0;
                var measuredHeight = 0;
                this.calculateRowAndColumn(this.target.$getExplicitWidth(), this.target.$getExplicitHeight());
                var columnCount = this._requestedColumnCount > 0 ? this._requestedColumnCount : this._columnCount;
                var rowCount = this._requestedRowCount > 0 ? this._requestedRowCount : this._rowCount;
                var horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
                var verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
                if (columnCount > 0) {
                    measuredWidth = columnCount * (this._columnWidth + horizontalGap) - horizontalGap;
                }
                if (rowCount > 0) {
                    measuredHeight = rowCount * (this._rowHeight + verticalGap) - verticalGap;
                }
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var hPadding = paddingL + paddingR;
                var vPadding = paddingT + paddingB;
                this.target.measuredWidth = Math.ceil(measuredWidth + hPadding);
                this.target.measuredHeight = Math.ceil(measuredHeight + vPadding);
                this._columnCount = savedColumnCount;
                this._rowCount = savedRowCount;
                this._columnWidth = savedColumnWidth;
                this._rowHeight = savedRowHeight;
            };
            /**
             * 计算行和列的尺寸及数量
             */
            p.calculateRowAndColumn = function (explicitWidth, explicitHeight) {
                var horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
                var verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
                this._rowCount = this._columnCount = -1;
                var numElements = this.target.numElements;
                var count = numElements;
                for (var index = 0; index < count; index++) {
                    var elt = (this.target.getElementAt(index));
                    if (elt && !elt.includeInLayout) {
                        numElements--;
                    }
                }
                if (numElements == 0) {
                    this._rowCount = this._columnCount = 0;
                    return;
                }
                if (isNaN(this.explicitColumnWidth) || isNaN(this.explicitRowHeight))
                    this.updateMaxElementSize();
                if (isNaN(this.explicitColumnWidth)) {
                    this._columnWidth = this.maxElementWidth;
                }
                else {
                    this._columnWidth = this.explicitColumnWidth;
                }
                if (isNaN(this.explicitRowHeight)) {
                    this._rowHeight = this.maxElementHeight;
                }
                else {
                    this._rowHeight = this.explicitRowHeight;
                }
                var itemWidth = this._columnWidth + horizontalGap;
                //防止出现除数为零的情况
                if (itemWidth <= 0)
                    itemWidth = 1;
                var itemHeight = this._rowHeight + verticalGap;
                if (itemHeight <= 0)
                    itemHeight = 1;
                var orientedByColumns = (this.orientation == gui.TileOrientation.COLUMNS);
                var widthHasSet = !isNaN(explicitWidth);
                var heightHasSet = !isNaN(explicitHeight);
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                if (this._requestedColumnCount > 0 || this._requestedRowCount > 0) {
                    if (this._requestedRowCount > 0)
                        this._rowCount = Math.min(this._requestedRowCount, numElements);
                    if (this._requestedColumnCount > 0)
                        this._columnCount = Math.min(this._requestedColumnCount, numElements);
                }
                else if (!widthHasSet && !heightHasSet) {
                    var side = Math.sqrt(numElements * itemWidth * itemHeight);
                    if (orientedByColumns) {
                        this._rowCount = Math.max(1, Math.round(side / itemHeight));
                    }
                    else {
                        this._columnCount = Math.max(1, Math.round(side / itemWidth));
                    }
                }
                else if (widthHasSet && (!heightHasSet || !orientedByColumns)) {
                    var targetWidth = Math.max(0, explicitWidth - paddingL - paddingR);
                    this._columnCount = Math.floor((targetWidth + horizontalGap) / itemWidth);
                    this._columnCount = Math.max(1, Math.min(this._columnCount, numElements));
                }
                else {
                    var targetHeight = Math.max(0, explicitHeight - paddingT - paddingB);
                    this._rowCount = Math.floor((targetHeight + verticalGap) / itemHeight);
                    this._rowCount = Math.max(1, Math.min(this._rowCount, numElements));
                }
                if (this._rowCount == -1)
                    this._rowCount = Math.max(1, Math.ceil(numElements / this._columnCount));
                if (this._columnCount == -1)
                    this._columnCount = Math.max(1, Math.ceil(numElements / this._rowCount));
                if (this._requestedColumnCount > 0 && this._requestedRowCount > 0) {
                    if (this.orientation == gui.TileOrientation.ROWS)
                        this._rowCount = Math.max(1, Math.ceil(numElements / this._requestedColumnCount));
                    else
                        this._columnCount = Math.max(1, Math.ceil(numElements / this._requestedRowCount));
                }
            };
            /**
             * 更新最大子对象尺寸
             */
            p.updateMaxElementSize = function () {
                if (!this.target)
                    return;
                if (this.useVirtualLayout)
                    this.updateMaxElementSizeVirtual();
                else
                    this.updateMaxElementSizeReal();
            };
            /**
             * 更新虚拟布局的最大子对象尺寸
             */
            p.updateMaxElementSizeVirtual = function () {
                var typicalHeight = this.typicalLayoutRect ? this.typicalLayoutRect.height : 22;
                var typicalWidth = this.typicalLayoutRect ? this.typicalLayoutRect.width : 22;
                this.maxElementWidth = Math.max(this.maxElementWidth, typicalWidth);
                this.maxElementHeight = Math.max(this.maxElementHeight, typicalHeight);
                if ((this.startIndex != -1) && (this.endIndex != -1)) {
                    for (var index = this.startIndex; index <= this.endIndex; index++) {
                        var elt = (this.target.getVirtualElementAt(index));
                        if (!elt || !elt.includeInLayout)
                            continue;
                        this.maxElementWidth = Math.max(this.maxElementWidth, elt.preferredWidth);
                        this.maxElementHeight = Math.max(this.maxElementHeight, elt.preferredHeight);
                    }
                }
            };
            /**
             * 更新真实布局的最大子对象尺寸
             */
            p.updateMaxElementSizeReal = function () {
                var numElements = this.target.numElements;
                for (var index = 0; index < numElements; index++) {
                    var elt = (this.target.getElementAt(index));
                    if (!elt || !elt.includeInLayout)
                        continue;
                    this.maxElementWidth = Math.max(this.maxElementWidth, elt.preferredWidth);
                    this.maxElementHeight = Math.max(this.maxElementHeight, elt.preferredHeight);
                }
            };
            /**
             * 如果 useVirtualLayout 为 true，则当布局目标改变时，布局目标可以使用此方法来清除已缓存布局信息
             * @method egret.gui.TileLayout#clearVirtualLayoutCache
             */
            p.clearVirtualLayoutCache = function () {
                _super.prototype.clearVirtualLayoutCache.call(this);
                this.maxElementWidth = 0;
                this.maxElementHeight = 0;
            };
            /**
             * verticalScrollPosition 或 horizontalScrollPosition 属性更改时调用
             */
            p.scrollPositionChanged = function () {
                _super.prototype.scrollPositionChanged.call(this);
                if (this.useVirtualLayout) {
                    var changed = this.getIndexInView();
                    if (changed) {
                        this.indexInViewCalculated = true;
                        this.target.invalidateDisplayList();
                    }
                }
            };
            /**
             * 获取视图中第一个和最后一个元素的索引,返回是否发生改变
             */
            p.getIndexInView = function () {
                if (!this.target || this.target.numElements == 0) {
                    this.startIndex = this.endIndex = -1;
                    return false;
                }
                var numElements = this.target.numElements;
                if (!this.useVirtualLayout) {
                    this.startIndex = 0;
                    this.endIndex = numElements - 1;
                    return false;
                }
                if (isNaN(this.target.width) || this.target.width == 0 || isNaN(this.target.height) || this.target.height == 0) {
                    this.startIndex = this.endIndex = -1;
                    return false;
                }
                var oldStartIndex = this.startIndex;
                var oldEndIndex = this.endIndex;
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
                var verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
                if (this.orientation == gui.TileOrientation.COLUMNS) {
                    var itemWidth = this._columnWidth + horizontalGap;
                    if (itemWidth <= 0) {
                        this.startIndex = 0;
                        this.endIndex = numElements - 1;
                        return false;
                    }
                    var minVisibleX = this.target.horizontalScrollPosition;
                    var maxVisibleX = this.target.horizontalScrollPosition + this.target.width;
                    var startColumn = Math.floor((minVisibleX - paddingL) / itemWidth);
                    if (startColumn < 0)
                        startColumn = 0;
                    var endColumn = Math.ceil((maxVisibleX - paddingL) / itemWidth);
                    if (endColumn < 0)
                        endColumn = 0;
                    this.startIndex = Math.min(numElements - 1, Math.max(0, startColumn * this._rowCount));
                    this.endIndex = Math.min(numElements - 1, Math.max(0, endColumn * this._rowCount - 1));
                }
                else {
                    var itemHeight = this._rowHeight + verticalGap;
                    if (itemHeight <= 0) {
                        this.startIndex = 0;
                        this.endIndex = numElements - 1;
                        return false;
                    }
                    var minVisibleY = this.target.verticalScrollPosition;
                    var maxVisibleY = this.target.verticalScrollPosition + this.target.height;
                    var startRow = Math.floor((minVisibleY - paddingT) / itemHeight);
                    if (startRow < 0)
                        startRow = 0;
                    var endRow = Math.ceil((maxVisibleY - paddingT) / itemHeight);
                    if (endRow < 0)
                        endRow = 0;
                    this.startIndex = Math.min(numElements - 1, Math.max(0, startRow * this._columnCount));
                    this.endIndex = Math.min(numElements - 1, Math.max(0, endRow * this._columnCount - 1));
                }
                return this.startIndex != oldStartIndex || this.endIndex != oldEndIndex;
            };
            /**
             * 调整目标的元素的大小并定位这些元素
             * @param width {number}
             * @param height {number}
             */
            p.updateDisplayList = function (width, height) {
                _super.prototype.updateDisplayList.call(this, width, height);
                if (!this.target)
                    return;
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                if (this.indexInViewCalculated) {
                    this.indexInViewCalculated = false;
                }
                else {
                    this.calculateRowAndColumn(width, height);
                    if (this._rowCount == 0 || this._columnCount == 0) {
                        this.target.setContentSize(paddingL + paddingR, paddingT + paddingB);
                        return;
                    }
                    this.adjustForJustify(width, height);
                    this.getIndexInView();
                }
                if (this.useVirtualLayout) {
                    this.calculateRowAndColumn(width, height);
                    this.adjustForJustify(width, height);
                }
                if (this.startIndex == -1 || this.endIndex == -1) {
                    this.target.setContentSize(0, 0);
                    return;
                }
                this.target.setVirtualElementIndicesInView(this.startIndex, this.endIndex);
                var elt;
                var x;
                var y;
                var columnIndex;
                var rowIndex;
                var orientedByColumns = (this.orientation == gui.TileOrientation.COLUMNS);
                var index = this.startIndex;
                var horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
                var verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
                for (var i = this.startIndex; i <= this.endIndex; i++) {
                    if (this.useVirtualLayout)
                        elt = (this.target.getVirtualElementAt(i));
                    else
                        elt = (this.target.getElementAt(i));
                    if (elt == null || !elt.includeInLayout)
                        continue;
                    if (orientedByColumns) {
                        columnIndex = Math.ceil((index + 1) / this._rowCount) - 1;
                        rowIndex = Math.ceil((index + 1) % this._rowCount) - 1;
                        if (rowIndex == -1)
                            rowIndex = this._rowCount - 1;
                    }
                    else {
                        columnIndex = Math.ceil((index + 1) % this._columnCount) - 1;
                        if (columnIndex == -1)
                            columnIndex = this._columnCount - 1;
                        rowIndex = Math.ceil((index + 1) / this._columnCount) - 1;
                    }
                    x = columnIndex * (this._columnWidth + horizontalGap) + paddingL;
                    y = rowIndex * (this._rowHeight + verticalGap) + paddingT;
                    this.sizeAndPositionElement(elt, x, y, this._columnWidth, this.rowHeight);
                    index++;
                }
                var hPadding = paddingL + paddingR;
                var vPadding = paddingT + paddingB;
                var contentWidth = (this._columnWidth + horizontalGap) * this._columnCount - horizontalGap;
                var contentHeight = (this._rowHeight + verticalGap) * this._rowCount - verticalGap;
                this.target.setContentSize(Math.ceil(contentWidth + hPadding), Math.ceil(contentHeight + vPadding));
            };
            /**
             * 为单个元素布局
             */
            p.sizeAndPositionElement = function (element, cellX, cellY, cellWidth, cellHeight) {
                var elementWidth = NaN;
                var elementHeight = NaN;
                if (this.horizontalAlign == egret.HorizontalAlign.JUSTIFY)
                    elementWidth = cellWidth;
                else if (!isNaN(element.percentWidth))
                    elementWidth = cellWidth * element.percentWidth * 0.01;
                if (this.verticalAlign == egret.VerticalAlign.JUSTIFY)
                    elementHeight = cellHeight;
                else if (!isNaN(element.percentHeight))
                    elementHeight = cellHeight * element.percentHeight * 0.01;
                element.setLayoutBoundsSize(Math.round(elementWidth), Math.round(elementHeight));
                var x = cellX;
                switch (this.horizontalAlign) {
                    case egret.HorizontalAlign.RIGHT:
                        x += cellWidth - element.layoutBoundsWidth;
                        break;
                    case egret.HorizontalAlign.CENTER:
                        x = cellX + (cellWidth - element.layoutBoundsWidth) / 2;
                        break;
                }
                var y = cellY;
                switch (this.verticalAlign) {
                    case egret.VerticalAlign.BOTTOM:
                        y += cellHeight - element.layoutBoundsHeight;
                        break;
                    case egret.VerticalAlign.MIDDLE:
                        y += (cellHeight - element.layoutBoundsHeight) / 2;
                        break;
                }
                element.setLayoutBoundsPosition(Math.round(x), Math.round(y));
            };
            /**
             * 为两端对齐调整间隔或格子尺寸
             */
            p.adjustForJustify = function (width, height) {
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var targetWidth = Math.max(0, width - paddingL - paddingR);
                var targetHeight = Math.max(0, height - paddingT - paddingB);
                if (!isNaN(this.explicitVerticalGap))
                    this._verticalGap = this.explicitVerticalGap;
                if (!isNaN(this.explicitHorizontalGap))
                    this._horizontalGap = this.explicitHorizontalGap;
                this._verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
                this._horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
                var itemWidth = this._columnWidth + this._horizontalGap;
                if (itemWidth <= 0)
                    itemWidth = 1;
                var itemHeight = this._rowHeight + this._verticalGap;
                if (itemHeight <= 0)
                    itemHeight = 1;
                var offsetY = targetHeight - this._rowHeight * this._rowCount;
                var offsetX = targetWidth - this._columnWidth * this._columnCount;
                var gapCount;
                if (offsetY > 0) {
                    if (this.rowAlign == gui.RowAlign.JUSTIFY_USING_GAP) {
                        gapCount = Math.max(1, this._rowCount - 1);
                        this._verticalGap = offsetY / gapCount;
                    }
                    else if (this.rowAlign == gui.RowAlign.JUSTIFY_USING_HEIGHT) {
                        if (this._rowCount > 0) {
                            this._rowHeight += (offsetY - (this._rowCount - 1) * this._verticalGap) / this._rowCount;
                        }
                    }
                }
                if (offsetX > 0) {
                    if (this.columnAlign == gui.ColumnAlign.JUSTIFY_USING_GAP) {
                        gapCount = Math.max(1, this._columnCount - 1);
                        this._horizontalGap = offsetX / gapCount;
                    }
                    else if (this.columnAlign == gui.ColumnAlign.JUSTIFY_USING_WIDTH) {
                        if (this._columnCount > 0) {
                            this._columnWidth += (offsetX - (this._columnCount - 1) * this._horizontalGap) / this._columnCount;
                        }
                    }
                }
            };
            return TileLayout;
        })(gui.LayoutBase);
        gui.TileLayout = TileLayout;
        egret.registerClass(TileLayout,"egret.gui.TileLayout");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.TileOrientation
         * @classdesc
         * TileOrientation 类为 TileLayout 类的 orientation 属性定义可能的值。
         */
        var TileOrientation = (function () {
            function TileOrientation() {
            }
            var d = __define,c=TileOrientation;p=c.prototype;
            /**
             * 逐行排列元素。
             * @constant egret.gui.TileOrientation.ROWS
             */
            TileOrientation.ROWS = "rows";
            /**
             * 逐列排列元素。
             * @constant egret.gui.TileOrientation.COLUMNS
             */
            TileOrientation.COLUMNS = "columns";
            return TileOrientation;
        })();
        gui.TileOrientation = TileOrientation;
        egret.registerClass(TileOrientation,"egret.gui.TileOrientation");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.VerticalLayout
         * @classdesc
         * 垂直布局
         * @extends egret.gui.LayoutBase
         */
        var VerticalLayout = (function (_super) {
            __extends(VerticalLayout, _super);
            /**
             * @method egret.gui.VerticalLayout#constructor
             */
            function VerticalLayout() {
                _super.call(this);
                this._horizontalAlign = egret.HorizontalAlign.LEFT;
                this._verticalAlign = egret.VerticalAlign.TOP;
                this._gap = 6;
                this._padding = 0;
                this._paddingLeft = NaN;
                this._paddingRight = NaN;
                this._paddingTop = NaN;
                this._paddingBottom = NaN;
                /**
                 * 虚拟布局使用的子对象尺寸缓存
                 */
                this.elementSizeTable = [];
                /**
                 * 虚拟布局使用的当前视图中的第一个元素索引
                 */
                this.startIndex = -1;
                /**
                 * 虚拟布局使用的当前视图中的最后一个元素的索引
                 */
                this.endIndex = -1;
                /**
                 * 视图的第一个和最后一个元素的索引值已经计算好的标志
                 */
                this.indexInViewCalculated = false;
                /**
                 * 子对象最大宽度
                 */
                this.maxElementWidth = 0;
            }
            var d = __define,c=VerticalLayout;p=c.prototype;
            d(p, "horizontalAlign"
                /**
                 * 布局元素的水平对齐策略。参考HorizontalAlign定义的常量。
                 * @member egret.gui.VerticalLayout#horizontalAlign
                 */
                ,function () {
                    return this._horizontalAlign;
                }
                ,function (value) {
                    if (this._horizontalAlign == value)
                        return;
                    this._horizontalAlign = value;
                    if (this.target)
                        this.target.invalidateDisplayList();
                }
            );
            d(p, "verticalAlign"
                /**
                 * 布局元素的竖直对齐策略。参考VerticalAlign定义的常量。
                 * 注意：此属性设置为CONTENT_JUSTIFY始终无效。当useVirtualLayout为true时，设置JUSTIFY也无效。
                 * @member egret.gui.VerticalLayout#verticalAlign
                 */
                ,function () {
                    return this._verticalAlign;
                }
                ,function (value) {
                    if (this._verticalAlign == value)
                        return;
                    this._verticalAlign = value;
                    if (this.target)
                        this.target.invalidateDisplayList();
                }
            );
            d(p, "gap"
                /**
                 * 布局元素之间的垂直空间（以像素为单位）
                 * @member egret.gui.VerticalLayout#gap
                 */
                ,function () {
                    return this._gap;
                }
                ,function (value) {
                    if (this._gap == value)
                        return;
                    this._gap = value;
                    this.invalidateTargetSizeAndDisplayList();
                    if (this.hasEventListener("gapChanged"))
                        this.dispatchEventWith("gapChanged");
                }
            );
            d(p, "padding"
                /**
                 * 四个边缘的共同内边距。若单独设置了任一边缘的内边距，则该边缘的内边距以单独设置的值为准。
                 * 此属性主要用于快速设置多个边缘的相同内边距。默认值：0。
                 * @member egret.gui.VerticalLayout#padding
                 */
                ,function () {
                    return this._padding;
                }
                ,function (value) {
                    if (this._padding == value)
                        return;
                    this._padding = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingLeft"
                /**
                 * 容器的左边缘与布局元素的左边缘之间的最少像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.VerticalLayout#paddingLeft
                 */
                ,function () {
                    return this._paddingLeft;
                }
                ,function (value) {
                    if (this._paddingLeft == value)
                        return;
                    this._paddingLeft = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingRight"
                /**
                 * 容器的右边缘与布局元素的右边缘之间的最少像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.VerticalLayout#paddingRight
                 */
                ,function () {
                    return this._paddingRight;
                }
                ,function (value) {
                    if (this._paddingRight == value)
                        return;
                    this._paddingRight = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingTop"
                /**
                 * 容器的顶边缘与第一个布局元素的顶边缘之间的像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.VerticalLayout#paddingTop
                 */
                ,function () {
                    return this._paddingTop;
                }
                ,function (value) {
                    if (this._paddingTop == value)
                        return;
                    this._paddingTop = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            d(p, "paddingBottom"
                /**
                 * 容器的底边缘与最后一个布局元素的底边缘之间的像素数,若为NaN将使用padding的值，默认值：NaN。
                 * @member egret.gui.VerticalLayout#paddingBottom
                 */
                ,function () {
                    return this._paddingBottom;
                }
                ,function (value) {
                    if (this._paddingBottom == value)
                        return;
                    this._paddingBottom = value;
                    this.invalidateTargetSizeAndDisplayList();
                }
            );
            /**
             * 标记目标容器的尺寸和显示列表失效
             */
            p.invalidateTargetSizeAndDisplayList = function () {
                if (this.target) {
                    this.target.invalidateSize();
                    this.target.invalidateDisplayList();
                }
            };
            /**
             * 基于目标的内容测量其默认大小，并（可选）测量目标的默认最小大小
             */
            p.measure = function () {
                _super.prototype.measure.call(this);
                if (!this.target)
                    return;
                if (this.useVirtualLayout) {
                    this.measureVirtual();
                }
                else {
                    this.measureReal();
                }
            };
            /**
             * 测量使用虚拟布局的尺寸
             */
            p.measureVirtual = function () {
                var numElements = this.target.numElements;
                var typicalHeight = this.typicalLayoutRect ? this.typicalLayoutRect.height : 22;
                var typicalWidth = this.typicalLayoutRect ? this.typicalLayoutRect.width : 71;
                var measuredWidth = Math.max(this.maxElementWidth, typicalWidth);
                var measuredHeight = this.getElementTotalSize();
                var visibleIndices = this.target.getElementIndicesInView();
                var length = visibleIndices.length;
                for (var i = 0; i < length; i++) {
                    var index = visibleIndices[i];
                    var layoutElement = (this.target.getElementAt(index));
                    if (layoutElement == null || !layoutElement.includeInLayout)
                        continue;
                    var preferredWidth = layoutElement.preferredWidth;
                    var preferredHeight = layoutElement.preferredHeight;
                    measuredHeight += preferredHeight;
                    measuredHeight -= isNaN(this.elementSizeTable[index]) ? typicalHeight : this.elementSizeTable[index];
                    measuredWidth = Math.max(measuredWidth, preferredWidth);
                }
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var hPadding = paddingL + paddingR;
                var vPadding = paddingT + paddingB;
                this.target.measuredWidth = Math.ceil(measuredWidth + hPadding);
                this.target.measuredHeight = Math.ceil(measuredHeight + vPadding);
            };
            /**
             * 测量使用真实布局的尺寸
             */
            p.measureReal = function () {
                var count = this.target.numElements;
                var numElements = count;
                var measuredWidth = 0;
                var measuredHeight = 0;
                for (var i = 0; i < count; i++) {
                    var layoutElement = (this.target.getElementAt(i));
                    if (!layoutElement || !layoutElement.includeInLayout) {
                        numElements--;
                        continue;
                    }
                    var preferredWidth = layoutElement.preferredWidth;
                    var preferredHeight = layoutElement.preferredHeight;
                    measuredHeight += preferredHeight;
                    measuredWidth = Math.max(measuredWidth, preferredWidth);
                }
                var gap = isNaN(this._gap) ? 0 : this._gap;
                measuredHeight += (numElements - 1) * gap;
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var hPadding = paddingL + paddingR;
                var vPadding = paddingT + paddingB;
                this.target.measuredWidth = Math.ceil(measuredWidth + hPadding);
                this.target.measuredHeight = Math.ceil(measuredHeight + vPadding);
            };
            /**
             * 调整目标的元素的大小并定位这些元素
             * @param width {number}
             * @param height {number}
             */
            p.updateDisplayList = function (width, height) {
                _super.prototype.updateDisplayList.call(this, width, height);
                if (!this.target)
                    return;
                if (this.target.numElements == 0) {
                    var padding = isNaN(this._padding) ? 0 : this._padding;
                    var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                    var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                    var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                    var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                    this.target.setContentSize(Math.ceil(paddingL + paddingR), Math.ceil(paddingT + paddingB));
                    return;
                }
                if (this.useVirtualLayout) {
                    this.updateDisplayListVirtual(width, height);
                }
                else {
                    this.updateDisplayListReal(width, height);
                }
            };
            /**
             * 获取指定索引的起始位置
             */
            p.getStartPosition = function (index) {
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var gap = isNaN(this._gap) ? 0 : this._gap;
                if (!this.useVirtualLayout) {
                    var element;
                    if (this.target) {
                        element = this.target.getElementAt(index);
                    }
                    return element ? element.y : paddingT;
                }
                var typicalHeight = this.typicalLayoutRect ? this.typicalLayoutRect.height : 22;
                var startPos = paddingT;
                for (var i = 0; i < index; i++) {
                    var eltHeight = this.elementSizeTable[i];
                    if (isNaN(eltHeight)) {
                        eltHeight = typicalHeight;
                    }
                    startPos += eltHeight + gap;
                }
                return startPos;
            };
            /**
             * 获取指定索引的元素尺寸
             */
            p.getElementSize = function (index) {
                if (this.useVirtualLayout) {
                    var size = this.elementSizeTable[index];
                    if (isNaN(size)) {
                        size = this.typicalLayoutRect ? this.typicalLayoutRect.height : 22;
                    }
                    return size;
                }
                if (this.target) {
                    return this.target.getElementAt(index).height;
                }
                return 0;
            };
            /**
             * 获取缓存的子对象尺寸总和
             */
            p.getElementTotalSize = function () {
                var gap = isNaN(this._gap) ? 0 : this._gap;
                var typicalHeight = this.typicalLayoutRect ? this.typicalLayoutRect.height : 22;
                var totalSize = 0;
                var length = this.target.numElements;
                for (var i = 0; i < length; i++) {
                    var eltHeight = this.elementSizeTable[i];
                    if (isNaN(eltHeight)) {
                        eltHeight = typicalHeight;
                    }
                    totalSize += eltHeight + gap;
                }
                totalSize -= gap;
                return totalSize;
            };
            /**
             * @param index {number}
             */
            p.elementAdded = function (index) {
                _super.prototype.elementAdded.call(this, index);
                var typicalHeight = this.typicalLayoutRect ? this.typicalLayoutRect.height : 22;
                this.elementSizeTable.splice(index, 0, typicalHeight);
            };
            /**
             * @param index {number}
             */
            p.elementRemoved = function (index) {
                _super.prototype.elementRemoved.call(this, index);
                this.elementSizeTable.splice(index, 1);
            };
            /**
             * 如果 useVirtualLayout 为 true，则当布局目标改变时，布局目标可以使用此方法来清除已缓存布局信息
             */
            p.clearVirtualLayoutCache = function () {
                _super.prototype.clearVirtualLayoutCache.call(this);
                this.elementSizeTable = [];
                this.maxElementWidth = 0;
            };
            /**
             * 折半查找法寻找指定位置的显示对象索引
             */
            p.findIndexAt = function (y, i0, i1) {
                var index = Math.floor((i0 + i1) * 0.5);
                var elementY = this.getStartPosition(index);
                var elementHeight = this.getElementSize(index);
                var gap = isNaN(this._gap) ? 0 : this._gap;
                if ((y >= elementY) && (y < elementY + elementHeight + gap))
                    return index;
                else if (i0 == i1)
                    return -1;
                else if (y < elementY)
                    return this.findIndexAt(y, i0, Math.max(i0, index - 1));
                else
                    return this.findIndexAt(y, Math.min(index + 1, i1), i1);
            };
            /**
             * verticalScrollPosition 或 horizontalScrollPosition 属性更改时调用
             */
            p.scrollPositionChanged = function () {
                _super.prototype.scrollPositionChanged.call(this);
                if (this.useVirtualLayout) {
                    var changed = this.getIndexInView();
                    if (changed) {
                        this.indexInViewCalculated = true;
                        this.target.invalidateDisplayList();
                    }
                }
            };
            /**
             * 获取视图中第一个和最后一个元素的索引,返回是否发生改变
             */
            p.getIndexInView = function () {
                if (!this.target || this.target.numElements == 0) {
                    this.startIndex = this.endIndex = -1;
                    return false;
                }
                if (isNaN(this.target.width) || this.target.width == 0 || isNaN(this.target.height) || this.target.height == 0) {
                    this.startIndex = this.endIndex = -1;
                    return false;
                }
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var numElements = this.target.numElements;
                var contentHeight = this.getStartPosition(numElements - 1) + this.elementSizeTable[numElements - 1] + paddingB;
                var minVisibleY = this.target.verticalScrollPosition;
                if (minVisibleY > contentHeight - paddingB) {
                    this.startIndex = -1;
                    this.endIndex = -1;
                    return false;
                }
                var maxVisibleY = this.target.verticalScrollPosition + this.target.height;
                if (maxVisibleY < paddingT) {
                    this.startIndex = -1;
                    this.endIndex = -1;
                    return false;
                }
                var oldStartIndex = this.startIndex;
                var oldEndIndex = this.endIndex;
                this.startIndex = this.findIndexAt(minVisibleY, 0, numElements - 1);
                if (this.startIndex == -1)
                    this.startIndex = 0;
                this.endIndex = this.findIndexAt(maxVisibleY, 0, numElements - 1);
                if (this.endIndex == -1)
                    this.endIndex = numElements - 1;
                return oldStartIndex != this.startIndex || oldEndIndex != this.endIndex;
            };
            /**
             * 更新使用虚拟布局的显示列表
             */
            p.updateDisplayListVirtual = function (width, height) {
                if (this.indexInViewCalculated)
                    this.indexInViewCalculated = false;
                else
                    this.getIndexInView();
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var gap = isNaN(this._gap) ? 0 : this._gap;
                var contentHeight;
                var numElements = this.target.numElements;
                if (this.startIndex == -1 || this.endIndex == -1) {
                    contentHeight = this.getStartPosition(numElements) - gap + paddingB;
                    this.target.setContentSize(this.target.contentWidth, Math.ceil(contentHeight));
                    return;
                }
                this.target.setVirtualElementIndicesInView(this.startIndex, this.endIndex);
                //获取水平布局参数
                var justify = this._horizontalAlign == egret.HorizontalAlign.JUSTIFY || this._horizontalAlign == egret.HorizontalAlign.CONTENT_JUSTIFY;
                var contentJustify = this._horizontalAlign == egret.HorizontalAlign.CONTENT_JUSTIFY;
                var hAlign = 0;
                if (!justify) {
                    if (this._horizontalAlign == egret.HorizontalAlign.CENTER) {
                        hAlign = 0.5;
                    }
                    else if (this._horizontalAlign == egret.HorizontalAlign.RIGHT) {
                        hAlign = 1;
                    }
                }
                var targetWidth = Math.max(0, width - paddingL - paddingR);
                var justifyWidth = Math.ceil(targetWidth);
                var layoutElement;
                var typicalHeight = this.typicalLayoutRect ? this.typicalLayoutRect.height : 22;
                var typicalWidth = this.typicalLayoutRect ? this.typicalLayoutRect.width : 71;
                var oldMaxW = Math.max(typicalWidth, this.maxElementWidth);
                if (contentJustify) {
                    for (var index = this.startIndex; index <= this.endIndex; index++) {
                        layoutElement = (this.target.getVirtualElementAt(index));
                        if (!layoutElement || !layoutElement.includeInLayout)
                            continue;
                        this.maxElementWidth = Math.max(this.maxElementWidth, layoutElement.preferredWidth);
                    }
                    justifyWidth = Math.ceil(Math.max(targetWidth, this.maxElementWidth));
                }
                var x = 0;
                var y = 0;
                var contentWidth = 0;
                var oldElementSize;
                var needInvalidateSize = false;
                for (var i = this.startIndex; i <= this.endIndex; i++) {
                    var exceesWidth = 0;
                    layoutElement = (this.target.getVirtualElementAt(i));
                    if (!layoutElement) {
                        continue;
                    }
                    else if (!layoutElement.includeInLayout) {
                        this.elementSizeTable[i] = 0;
                        continue;
                    }
                    if (justify) {
                        x = paddingL;
                        layoutElement.setLayoutBoundsSize(justifyWidth, NaN);
                    }
                    else {
                        exceesWidth = (targetWidth - layoutElement.layoutBoundsWidth) * hAlign;
                        exceesWidth = exceesWidth > 0 ? exceesWidth : 0;
                        x = paddingL + exceesWidth;
                    }
                    if (!contentJustify)
                        this.maxElementWidth = Math.max(this.maxElementWidth, layoutElement.preferredWidth);
                    contentWidth = Math.max(contentWidth, layoutElement.layoutBoundsWidth);
                    if (!needInvalidateSize) {
                        oldElementSize = isNaN(this.elementSizeTable[i]) ? typicalHeight : this.elementSizeTable[i];
                        if (oldElementSize != layoutElement.layoutBoundsHeight)
                            needInvalidateSize = true;
                    }
                    if (i == 0 && this.elementSizeTable.length > 0 && this.elementSizeTable[i] != layoutElement.layoutBoundsHeight)
                        this.typicalLayoutRect = null;
                    this.elementSizeTable[i] = layoutElement.layoutBoundsHeight;
                    y = this.getStartPosition(i);
                    layoutElement.setLayoutBoundsPosition(Math.round(x), Math.round(y));
                }
                contentWidth += paddingL + paddingR;
                contentHeight = this.getStartPosition(numElements) - gap + paddingB;
                this.target.setContentSize(Math.ceil(contentWidth), Math.ceil(contentHeight));
                if (needInvalidateSize || oldMaxW < this.maxElementWidth) {
                    this.target.invalidateSize();
                }
            };
            /**
             * 更新使用真实布局的显示列表
             */
            p.updateDisplayListReal = function (width, height) {
                var padding = isNaN(this._padding) ? 0 : this._padding;
                var paddingL = isNaN(this._paddingLeft) ? padding : this._paddingLeft;
                var paddingR = isNaN(this._paddingRight) ? padding : this._paddingRight;
                var paddingT = isNaN(this._paddingTop) ? padding : this._paddingTop;
                var paddingB = isNaN(this._paddingBottom) ? padding : this._paddingBottom;
                var gap = isNaN(this._gap) ? 0 : this._gap;
                var targetWidth = Math.max(0, width - paddingL - paddingR);
                var targetHeight = Math.max(0, height - paddingT - paddingB);
                // 获取水平布局参数
                var vJustify = this._verticalAlign == egret.VerticalAlign.JUSTIFY;
                var hJustify = this._horizontalAlign == egret.HorizontalAlign.JUSTIFY || this._horizontalAlign == egret.HorizontalAlign.CONTENT_JUSTIFY;
                var hAlign = 0;
                if (!hJustify) {
                    if (this._horizontalAlign == egret.HorizontalAlign.CENTER) {
                        hAlign = 0.5;
                    }
                    else if (this._horizontalAlign == egret.HorizontalAlign.RIGHT) {
                        hAlign = 1;
                    }
                }
                var count = this.target.numElements;
                var numElements = count;
                var x = paddingL;
                var y = paddingT;
                var i;
                var layoutElement;
                var totalPreferredHeight = 0;
                var totalPercentHeight = 0;
                var childInfoArray = [];
                var childInfo;
                var heightToDistribute = targetHeight;
                for (i = 0; i < count; i++) {
                    layoutElement = (this.target.getElementAt(i));
                    if (!layoutElement || !layoutElement.includeInLayout) {
                        numElements--;
                        continue;
                    }
                    this.maxElementWidth = Math.max(this.maxElementWidth, layoutElement.preferredWidth);
                    if (vJustify) {
                        totalPreferredHeight += layoutElement.preferredHeight;
                    }
                    else {
                        if (!isNaN(layoutElement.percentHeight)) {
                            totalPercentHeight += layoutElement.percentHeight;
                            childInfo = new ChildInfo();
                            childInfo.layoutElement = layoutElement;
                            childInfo.percent = layoutElement.percentHeight;
                            childInfo.min = layoutElement.minHeight;
                            childInfo.max = layoutElement.maxHeight;
                            childInfoArray.push(childInfo);
                        }
                        else {
                            heightToDistribute -= layoutElement.preferredHeight;
                        }
                    }
                }
                heightToDistribute -= (numElements - 1) * gap;
                heightToDistribute = heightToDistribute > 0 ? heightToDistribute : 0;
                var excessSpace = targetHeight - totalPreferredHeight - gap * (numElements - 1);
                var averageHeight;
                var largeChildrenCount = numElements;
                var heightDic = [];
                if (vJustify) {
                    if (excessSpace < 0) {
                        averageHeight = heightToDistribute / numElements;
                        for (i = 0; i < count; i++) {
                            layoutElement = this.target.getElementAt(i);
                            if (!layoutElement || !layoutElement.includeInLayout)
                                continue;
                            var preferredHeight = layoutElement.preferredHeight;
                            if (preferredHeight <= averageHeight) {
                                heightToDistribute -= preferredHeight;
                                largeChildrenCount--;
                                continue;
                            }
                        }
                        heightToDistribute = heightToDistribute > 0 ? heightToDistribute : 0;
                    }
                }
                else {
                    if (totalPercentHeight > 0) {
                        VerticalLayout.flexChildrenProportionally(targetHeight, heightToDistribute, totalPercentHeight, childInfoArray);
                        var roundOff = 0;
                        var length = childInfoArray.length;
                        for (i = 0; i < length; i++) {
                            childInfo = childInfoArray[i];
                            var childSize = Math.round(childInfo.size + roundOff);
                            roundOff += childInfo.size - childSize;
                            heightDic[childInfo.layoutElement.hashCode] = childSize;
                            heightToDistribute -= childSize;
                        }
                        heightToDistribute = heightToDistribute > 0 ? heightToDistribute : 0;
                    }
                }
                if (this._verticalAlign == egret.VerticalAlign.MIDDLE) {
                    y = paddingT + heightToDistribute * 0.5;
                }
                else if (this._verticalAlign == egret.VerticalAlign.BOTTOM) {
                    y = paddingT + heightToDistribute;
                }
                //开始对所有元素布局
                var maxX = paddingL;
                var maxY = paddingT;
                var dx = 0;
                var dy = 0;
                var justifyWidth = Math.ceil(targetWidth);
                if (this._horizontalAlign == egret.HorizontalAlign.CONTENT_JUSTIFY)
                    justifyWidth = Math.ceil(Math.max(targetWidth, this.maxElementWidth));
                roundOff = 0;
                var layoutElementHeight = NaN;
                var childHeight;
                for (i = 0; i < count; i++) {
                    var exceesWidth = 0;
                    layoutElement = (this.target.getElementAt(i));
                    if (!layoutElement || !layoutElement.includeInLayout)
                        continue;
                    layoutElementHeight = NaN;
                    if (vJustify) {
                        childHeight = NaN;
                        if (excessSpace > 0) {
                            childHeight = heightToDistribute * layoutElement.preferredHeight / totalPreferredHeight;
                        }
                        else if (excessSpace < 0 && layoutElement.preferredHeight > averageHeight) {
                            childHeight = heightToDistribute / largeChildrenCount;
                        }
                        if (!isNaN(childHeight)) {
                            layoutElementHeight = Math.round(childHeight + roundOff);
                            roundOff += childHeight - layoutElementHeight;
                        }
                    }
                    else {
                        layoutElementHeight = heightDic[layoutElement.hashCode];
                    }
                    if (hJustify) {
                        x = paddingL;
                        layoutElement.setLayoutBoundsSize(justifyWidth, layoutElementHeight);
                    }
                    else {
                        var layoutElementWidth = NaN;
                        if (!isNaN(layoutElement.percentWidth)) {
                            var percent = Math.min(100, layoutElement.percentWidth);
                            layoutElementWidth = Math.round(targetWidth * percent * 0.01);
                        }
                        layoutElement.setLayoutBoundsSize(layoutElementWidth, layoutElementHeight);
                        exceesWidth = (targetWidth - layoutElement.layoutBoundsWidth) * hAlign;
                        exceesWidth = exceesWidth > 0 ? exceesWidth : 0;
                        x = paddingL + exceesWidth;
                    }
                    layoutElement.setLayoutBoundsPosition(Math.round(x), Math.round(y));
                    dx = Math.ceil(layoutElement.layoutBoundsWidth);
                    dy = Math.ceil(layoutElement.layoutBoundsHeight);
                    maxX = Math.max(maxX, x + dx);
                    maxY = Math.max(maxY, y + dy);
                    y += dy + gap;
                }
                this.target.setContentSize(Math.ceil(maxX + paddingR), Math.ceil(maxY + paddingB));
            };
            /**
             * 为每个可变尺寸的子项分配空白区域
             * @method egret.gui.VerticalLayout.flexChildrenProportionally
             * @param spaceForChildren {number}
             * @param spaceToDistribute {number}
             * @param totalPercent {number}
             * @param childInfoArray {Array<any>}
             */
            VerticalLayout.flexChildrenProportionally = function (spaceForChildren, spaceToDistribute, totalPercent, childInfoArray) {
                var numChildren = childInfoArray.length;
                var done;
                do {
                    done = true;
                    var unused = spaceToDistribute - (spaceForChildren * totalPercent / 100);
                    if (unused > 0)
                        spaceToDistribute -= unused;
                    else
                        unused = 0;
                    var spacePerPercent = spaceToDistribute / totalPercent;
                    for (var i = 0; i < numChildren; i++) {
                        var childInfo = childInfoArray[i];
                        var size = childInfo.percent * spacePerPercent;
                        if (size < childInfo.min) {
                            var min = childInfo.min;
                            childInfo.size = min;
                            childInfoArray[i] = childInfoArray[--numChildren];
                            childInfoArray[numChildren] = childInfo;
                            totalPercent -= childInfo.percent;
                            if (unused >= min) {
                                unused -= min;
                            }
                            else {
                                spaceToDistribute -= min - unused;
                                unused = 0;
                            }
                            done = false;
                            break;
                        }
                        else if (size > childInfo.max) {
                            var max = childInfo.max;
                            childInfo.size = max;
                            childInfoArray[i] = childInfoArray[--numChildren];
                            childInfoArray[numChildren] = childInfo;
                            totalPercent -= childInfo.percent;
                            if (unused >= max) {
                                unused -= max;
                            }
                            else {
                                spaceToDistribute -= max - unused;
                                unused = 0;
                            }
                            done = false;
                            break;
                        }
                        else {
                            childInfo.size = size;
                        }
                    }
                } while (!done);
            };
            return VerticalLayout;
        })(gui.LayoutBase);
        gui.VerticalLayout = VerticalLayout;
        egret.registerClass(VerticalLayout,"egret.gui.VerticalLayout");
        var ChildInfo = (function () {
            function ChildInfo() {
                /**
                 * @member egret.ChildInfo#layoutElement
                 */
                this.layoutElement = null;
                /**
                 * @member egret.ChildInfo#size
                 */
                this.size = 0;
                /**
                 * @member egret.ChildInfo#percent
                 */
                this.percent = NaN;
                /**
                 * @member egret.ChildInfo#min
                 */
                this.min = NaN;
                /**
                 * @member egret.ChildInfo#max
                 */
                this.max = NaN;
            }
            var d = __define,c=ChildInfo;p=c.prototype;
            return ChildInfo;
        })();
        egret.registerClass(ChildInfo,"ChildInfo");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.PopUpManager
         * @classdesc
         * 窗口弹出管理器<p/>
         * 若项目需要自定义弹出框管理器，请实现IPopUpManager接口
         */
        var PopUpManager = (function () {
            /**
             * 构造函数
             * @method egret.gui.PopUpManager#constructor
             */
            function PopUpManager() {
            }
            var d = __define,c=PopUpManager;p=c.prototype;
            /**
             * 获取单例
             */
            PopUpManager.getImpl = function () {
                if (!PopUpManager._impl) {
                    PopUpManager._impl = new gui.PopUpManagerImpl();
                }
                return PopUpManager._impl;
            };
            d(PopUpManager, "modalColor"
                /**
                 * 模态遮罩的填充颜色
                 * @member egret.gui.PopUpManager#modalColor
                 */
                ,function () {
                    return PopUpManager.getImpl().modalColor;
                }
                ,function (value) {
                    PopUpManager.getImpl().modalColor = value;
                }
            );
            d(PopUpManager, "modalAlpha"
                /**
                 * 模态遮罩的透明度
                 * @member egret.gui.PopUpManager#modalAlpha
                 */
                ,function () {
                    return PopUpManager.getImpl().modalAlpha;
                }
                ,function (value) {
                    PopUpManager.getImpl().modalAlpha = value;
                }
            );
            /**
             * 弹出一个窗口。<br/>
             * @method egret.gui.PopUpManager.addPopUp
             * @param popUp {IVisualElement} 要弹出的窗口
             * @param modal {boolean} 是否启用模态。即禁用弹出窗口所在层以下的鼠标事件。默认false。
             * @param center {boolean} 是否居中窗口。等效于在外部调用centerPopUp()来居中。默认true。
             */
            PopUpManager.addPopUp = function (popUp, modal, center) {
                if (modal === void 0) { modal = false; }
                if (center === void 0) { center = true; }
                PopUpManager.getImpl().addPopUp(popUp, modal, center);
                gui.PopUpEvent.dispatchPopUpEvent(PopUpManager.getImpl(), gui.PopUpEvent.ADD_POPUP, popUp, modal);
            };
            /**
             * 移除由addPopUp()方法弹出的窗口。
             * @method egret.gui.PopUpManager.removePopUp
             * @param popUp {IVisualElement} 要移除的窗口
             */
            PopUpManager.removePopUp = function (popUp) {
                PopUpManager.getImpl().removePopUp(popUp);
                gui.PopUpEvent.dispatchPopUpEvent(PopUpManager.getImpl(), gui.PopUpEvent.REMOVE_POPUP, popUp);
            };
            /**
             * 将指定窗口居中显示
             * @method egret.gui.PopUpManager.centerPopUp
             * @param popUp {IVisualElement} 要居中显示的窗口
             */
            PopUpManager.centerPopUp = function (popUp) {
                PopUpManager.getImpl().centerPopUp(popUp);
            };
            /**
             * 将指定窗口的层级调至最前
             * @method egret.gui.PopUpManager.bringToFront
             * @param popUp {IVisualElement} 要最前显示的窗口
             */
            PopUpManager.bringToFront = function (popUp) {
                PopUpManager.getImpl().bringToFront(popUp);
                gui.PopUpEvent.dispatchPopUpEvent(PopUpManager.getImpl(), gui.PopUpEvent.BRING_TO_FRONT, popUp);
            };
            d(PopUpManager, "popUpList"
                /**
                 * 已经弹出的窗口列表
                 * @member egret.gui.PopUpManager.popUpList
                 */
                ,function () {
                    return PopUpManager.getImpl().popUpList;
                }
            );
            /**
             * 添加事件监听,参考PopUpEvent定义的常量。
             * @method egret.gui.PopUpManager.addEventListener
             * @param type {string}
             * @param listener {Function}
             * @param thisObject {any}
             * @param useCapture {boolean}
             * @param priority {number}
             */
            PopUpManager.addEventListener = function (type, listener, thisObject, useCapture, priority) {
                if (useCapture === void 0) { useCapture = false; }
                if (priority === void 0) { priority = 0; }
                PopUpManager.getImpl().addEventListener(type, listener, thisObject, useCapture, priority);
            };
            /**
             * 移除事件监听,参考PopUpEvent定义的常量。
             * @method egret.gui.PopUpManager.removeEventListener
             * @param type {string}
             * @param listener {Function}
             * @param thisObject {any}
             * @param useCapture {boolean}
             */
            PopUpManager.removeEventListener = function (type, listener, thisObject, useCapture) {
                if (useCapture === void 0) { useCapture = false; }
                PopUpManager.getImpl().removeEventListener(type, listener, thisObject, useCapture);
            };
            return PopUpManager;
        })();
        gui.PopUpManager = PopUpManager;
        egret.registerClass(PopUpManager,"egret.gui.PopUpManager");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.PopUpManagerImpl
         * @classdesc
         * 窗口弹出管理器实现类
         * @extends egret.EventDispatcher
         * @implements egret.gui.IPopUpManager
         */
        var PopUpManagerImpl = (function (_super) {
            __extends(PopUpManagerImpl, _super);
            /**
             * 构造函数
             * @method egret.gui.PopUpManagerImpl#constructor
             */
            function PopUpManagerImpl() {
                _super.call(this);
                this._popUpList = [];
                /**
                 * 模态窗口列表
                 */
                this.popUpDataList = [];
                this._modalColor = 0x000000;
                this._modalAlpha = 0.5;
                this.invalidateModalFlag = false;
                this.modalMask = null;
            }
            var d = __define,c=PopUpManagerImpl;p=c.prototype;
            d(p, "popUpList"
                /**
                 * 已经弹出的窗口列表
                 * @member egret.gui.PopUpManagerImpl#popUpList
                 */
                ,function () {
                    return this._popUpList.concat();
                }
            );
            /**
             * 根据popUp获取对应的popUpData
             */
            p.findPopUpData = function (popUp) {
                var list = this.popUpDataList;
                var length = list.length;
                for (var i = 0; i < length; i++) {
                    var data = list[i];
                    if (data.popUp == popUp)
                        return data;
                }
                return null;
            };
            /**
             * 弹出一个窗口。<br/>
             * @method egret.gui.PopUpManagerImpl#addPopUp
             * @param popUp {IVisualElement} 要弹出的窗口
             * @param modal {boolean} 是否启用模态。即禁用弹出窗口所在层以下的鼠标事件。默认false。
             * @param center {boolean} 是否居中窗口。等效于在外部调用centerPopUp()来居中。默认true。
             */
            p.addPopUp = function (popUp, modal, center) {
                if (modal === void 0) { modal = false; }
                if (center === void 0) { center = true; }
                var uiStage = gui.UIGlobals.uiStage;
                var data = this.findPopUpData(popUp);
                if (data) {
                    data.modal = modal;
                    popUp.removeEventListener(PopUpManagerImpl.REMOVE_FROM_UISTAGE, this.onRemoved, this);
                }
                else {
                    data = new PopUpData(popUp, modal);
                    this.popUpDataList.push(data);
                    this._popUpList.push(popUp);
                }
                uiStage.popUpContainer.addElement(popUp);
                if (center)
                    this.centerPopUp(popUp);
                if ("isPopUp" in popUp)
                    popUp.isPopUp = true;
                if (modal) {
                    this.invalidateModal();
                }
                popUp.addEventListener(PopUpManagerImpl.REMOVE_FROM_UISTAGE, this.onRemoved, this);
            };
            /**
             * 从舞台移除
             */
            p.onRemoved = function (event) {
                var index = 0;
                var list = this.popUpDataList;
                var length = list.length;
                for (var i = 0; i < length; i++) {
                    var data = list[i];
                    if (data.popUp == event.target) {
                        if ("isPopUp" in data.popUp)
                            (data.popUp).isPopUp = false;
                        data.popUp.removeEventListener(PopUpManagerImpl.REMOVE_FROM_UISTAGE, this.onRemoved, this);
                        this.popUpDataList.splice(index, 1);
                        this._popUpList.splice(index, 1);
                        this.invalidateModal();
                        break;
                    }
                    index++;
                }
            };
            d(p, "modalColor"
                /**
                 * 模态遮罩的填充颜色
                 * @member egret.gui.PopUpManagerImpl#modalColor
                 */
                ,function () {
                    return this._modalColor;
                }
                ,function (value) {
                    if (this._modalColor == value)
                        return;
                    this._modalColor = value;
                    this.invalidateModal();
                }
            );
            d(p, "modalAlpha"
                /**
                 * 模态遮罩的透明度
                 * @member egret.gui.PopUpManagerImpl#modalAlpha
                 */
                ,function () {
                    return this._modalAlpha;
                }
                ,function (value) {
                    if (this._modalAlpha == value)
                        return;
                    this._modalAlpha = value;
                    this.invalidateModal();
                }
            );
            /**
             * 标记一个UIStage的模态层失效
             */
            p.invalidateModal = function () {
                if (!this.invalidateModalFlag) {
                    this.invalidateModalFlag = true;
                    gui.UIGlobals.stage.addEventListener(egret.Event.ENTER_FRAME, this.validateModal, this);
                    gui.UIGlobals.stage.addEventListener(egret.Event.RENDER, this.validateModal, this);
                    gui.UIGlobals.stage.invalidate();
                }
            };
            p.validateModal = function (event) {
                this.invalidateModalFlag = false;
                gui.UIGlobals.stage.removeEventListener(egret.Event.ENTER_FRAME, this.validateModal, this);
                gui.UIGlobals.stage.removeEventListener(egret.Event.RENDER, this.validateModal, this);
                this.updateModal(gui.UIGlobals.uiStage);
            };
            /**
             * 更新窗口模态效果
             */
            p.updateModal = function (uiStage) {
                var popUpContainer = uiStage.popUpContainer;
                var found = false;
                for (var i = popUpContainer.numElements - 1; i >= 0; i--) {
                    var element = popUpContainer.getElementAt(i);
                    var data = this.findPopUpData(element);
                    if (data && data.modal) {
                        found = true;
                        break;
                    }
                }
                if (found) {
                    if (!this.modalMask) {
                        this.modalMask = new gui.Rect();
                        this.modalMask.touchEnabled = true;
                        this.modalMask.top = this.modalMask.left = this.modalMask.right = this.modalMask.bottom = 0;
                    }
                    this.modalMask.fillColor = this._modalColor;
                    this.modalMask.alpha = this._modalAlpha;
                    if (this.modalMask.parent == uiStage) {
                        if (popUpContainer.getElementIndex(this.modalMask) < i)
                            i--;
                        popUpContainer.setElementIndex(this.modalMask, i);
                    }
                    else {
                        popUpContainer.addElementAt(this.modalMask, i);
                    }
                }
                else if (this.modalMask && this.modalMask.parent == uiStage) {
                    popUpContainer.removeElement(this.modalMask);
                }
            };
            /**
             * 移除由addPopUp()方法弹出的窗口。
             * @method egret.gui.PopUpManagerImpl#removePopUp
             * @param popUp {IVisualElement} 要移除的窗口
             */
            p.removePopUp = function (popUp) {
                if (popUp && popUp.parent && this.findPopUpData(popUp)) {
                    if ("removeElement" in popUp.parent)
                        (popUp.parent).removeElement(popUp);
                    else if (popUp.parent instanceof gui.UIComponent)
                        (popUp.parent)._removeFromDisplayList(popUp);
                    else if (popUp instanceof egret.DisplayObject)
                        popUp.parent.removeChild(popUp);
                }
            };
            /**
             * 将指定窗口居中显示
             * @method egret.gui.PopUpManagerImpl#centerPopUp
             * @param popUp {IVisualElement} 要居中显示的窗口
             */
            p.centerPopUp = function (popUp) {
                popUp.top = popUp.bottom = popUp.left = popUp.right = NaN;
                popUp.verticalCenter = popUp.horizontalCenter = 0;
                var parent = popUp.parent;
                if (parent) {
                    if ("validateNow" in popUp)
                        popUp.validateNow();
                    popUp.x = (parent.width - popUp.layoutBoundsWidth) * 0.5;
                    popUp.y = (parent.height - popUp.layoutBoundsHeight) * 0.5;
                }
            };
            /**
             * 将指定窗口的层级调至最前
             * @method egret.gui.PopUpManagerImpl#bringToFront
             * @param popUp {IVisualElement} 要最前显示的窗口
             */
            p.bringToFront = function (popUp) {
                var data = this.findPopUpData(popUp);
                if (data && popUp.parent && "popUpContainer" in popUp.parent) {
                    var uiStage = (popUp.parent);
                    uiStage.popUpContainer.setElementIndex(popUp, uiStage.popUpContainer.numElements - 1);
                    this.invalidateModal();
                }
            };
            PopUpManagerImpl.REMOVE_FROM_UISTAGE = "removeFromUIStage";
            return PopUpManagerImpl;
        })(egret.EventDispatcher);
        gui.PopUpManagerImpl = PopUpManagerImpl;
        egret.registerClass(PopUpManagerImpl,"egret.gui.PopUpManagerImpl",["egret.gui.IPopUpManager","egret.IEventDispatcher"]);
        var PopUpData = (function () {
            /**
             * @method egret.PopUpData#constructor
             * @param popUp {IVisualElement}
             * @param modal {boolea}
             */
            function PopUpData(popUp, modal) {
                /**
                 * @member egret.PopUpData#popUp
                 */
                this.popUp = null;
                /**
                 * @member egret.PopUpData#modal
                 */
                this.modal = false;
                this.popUp = popUp;
                this.modal = modal;
            }
            var d = __define,c=PopUpData;p=c.prototype;
            return PopUpData;
        })();
        egret.registerClass(PopUpData,"PopUpData");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.OverrideBase
         * @classdesc
         * OverrideBase 类是视图状态所用的 override 类的基类。
         * @extends egret.HashObject
         * @implements egret.gui.IOverride
         */
        var OverrideBase = (function (_super) {
            __extends(OverrideBase, _super);
            function OverrideBase() {
                _super.call(this);
            }
            var d = __define,c=OverrideBase;p=c.prototype;
            p.initialize = function (parent) {
            };
            p.apply = function (parent) {
            };
            p.remove = function (parent) {
                if (parent === null) {
                }
            };
            /**
             * 从对象初始化，这是一个便利方法
             * @method egret.gui.OverrideBase#initializeFromObject
             * @param properties {any}
             * @returns {any}
             */
            p.initializeFromObject = function (properties) {
                for (var p in properties) {
                    this[p] = properties[p];
                }
                return this;
            };
            return OverrideBase;
        })(egret.HashObject);
        gui.OverrideBase = OverrideBase;
        egret.registerClass(OverrideBase,"egret.gui.OverrideBase",["egret.gui.IOverride"]);
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.AddItems
         * @classdesc
         * 添加显示元素
         * @extends egret.gui.OverrideBase
         */
        var AddItems = (function (_super) {
            __extends(AddItems, _super);
            /**
             * 构造函数
             * @method egret.gui.AddItems#constructor
             */
            function AddItems(target, propertyName, position, relativeTo) {
                _super.call(this);
                /**
                 * 要添加到的属性
                 * @member egret.gui.AddItems#propertyName
                 */
                this.propertyName = "";
                /**
                 * 添加的位置
                 * @member egret.gui.AddItems#position
                 */
                this.position = AddItems.LAST;
                /**
                 * 相对的显示元素的实例名
                 * @member egret.gui.AddItems#relativeTo
                 */
                this.relativeTo = null;
                /**
                 * 目标实例名
                 * @member egret.gui.AddItems#target
                 */
                this.target = null;
                this.target = target;
                this.propertyName = propertyName;
                this.position = position;
                this.relativeTo = relativeTo;
            }
            var d = __define,c=AddItems;p=c.prototype;
            /**
             * @method egret.gui.AddItems#initialize
             * @param parent {IStateClient}
             */
            p.initialize = function (parent) {
                var targetElement = (parent[this.target]);
                if (!targetElement || targetElement instanceof gui.SkinnableComponent)
                    return;
                //让UIAsset等素材组件立即开始初始化，防止延迟闪一下或首次点击失效的问题。
                if ("_initialize" in targetElement) {
                    try {
                        targetElement["_initialize"]();
                    }
                    catch (e) {
                    }
                }
            };
            /**
             * @method egret.gui.AddItems#apply
             * @param parent {IContainer}
             */
            p.apply = function (parent) {
                var index;
                var relative;
                try {
                    relative = (parent[this.relativeTo]);
                }
                catch (e) {
                }
                var targetElement = (parent[this.target]);
                var dest = (this.propertyName ? parent[this.propertyName] : parent);
                if (!targetElement || !dest)
                    return;
                switch (this.position) {
                    case AddItems.FIRST:
                        index = 0;
                        break;
                    case AddItems.LAST:
                        index = -1;
                        break;
                    case AddItems.BEFORE:
                        index = dest.getElementIndex(relative);
                        break;
                    case AddItems.AFTER:
                        index = dest.getElementIndex(relative) + 1;
                        break;
                }
                if (index == -1)
                    index = dest.numElements;
                dest.addElementAt(targetElement, index);
            };
            /**
             * @method egret.gui.AddItems#remove
             * @param parent {IContainer}
             */
            p.remove = function (parent) {
                var dest = this.propertyName == null || this.propertyName == "" ? parent : parent[this.propertyName];
                var targetElement = (parent[this.target]);
                if (!targetElement || !dest)
                    return;
                if (dest.getElementIndex(targetElement) != -1) {
                    dest.removeElement(targetElement);
                }
            };
            /**
             * 添加父级容器的底层
             * @constant egret.gui.AddItems.FIRST
             */
            AddItems.FIRST = "first";
            /**
             * 添加在父级容器的顶层
             * @constant egret.gui.AddItems.LAST
             */
            AddItems.LAST = "last";
            /**
             * 添加在相对对象之前
             * @constant egret.gui.AddItems.BEFORE
             */
            AddItems.BEFORE = "before";
            /**
             * 添加在相对对象之后
             * @constant egret.gui.AddItems.AFTER
             */
            AddItems.AFTER = "after";
            return AddItems;
        })(gui.OverrideBase);
        gui.AddItems = AddItems;
        egret.registerClass(AddItems,"egret.gui.AddItems");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        var InterruptionBehavior = (function () {
            function InterruptionBehavior() {
            }
            var d = __define,c=InterruptionBehavior;p=c.prototype;
            /**
             * 指定一个过渡（可中断另一个正在运行的过渡）在开始之前结束另一个过渡。
             * 通过对过渡中的所有效果调用 end() 方法来结束过渡。end() 方法导致所有效果到达结束状态。
             */
            InterruptionBehavior.END = "end";
            /**
             * 指定一个过渡（可中断另一个正在运行的过渡）在开始之前停止正在进行的其它过渡。
             * 通过对过渡中的所有效果调用 stop() 方法来停止过渡。
             */
            InterruptionBehavior.STOP = "stop";
            return InterruptionBehavior;
        })();
        gui.InterruptionBehavior = InterruptionBehavior;
        egret.registerClass(InterruptionBehavior,"egret.gui.InterruptionBehavior");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SetProperty
         * @classdesc
         * 设置属性
         * @extends egret.gui.OverrideBase
         */
        var SetProperty = (function (_super) {
            __extends(SetProperty, _super);
            /**
             * 构造函数
             * @method egret.gui.SetProperty#constructor
             */
            function SetProperty(target, name, value) {
                _super.call(this);
                /**
                 * 要修改的属性名
                 * @member egret.gui.SetProperty#name
                 */
                this.name = null;
                /**
                 * 目标实例名
                 * @member egret.gui.SetProperty#target
                 */
                this.target = null;
                /**
                 * 属性值
                 * @member egret.gui.SetProperty#value
                 */
                this.value = null;
                /**
                 * 旧的属性值
                 */
                this.oldValue = null;
                this.target = target;
                this.name = name;
                this.value = value;
            }
            var d = __define,c=SetProperty;p=c.prototype;
            /**
             * @method egret.gui.SetProperty#apply
             * @param parent {IContainer}
             */
            p.apply = function (parent) {
                var obj = this.target == null || this.target == "" ? parent : parent[this.target];
                if (obj == null)
                    return;
                this.oldValue = obj[this.name];
                this.setPropertyValue(obj, this.name, this.value, this.oldValue);
            };
            /**
             * @method egret.gui.SetProperty#remove
             * @param parent {IContainer}
             */
            p.remove = function (parent) {
                var obj = this.target == null || this.target == "" ? parent : parent[this.target];
                if (obj == null)
                    return;
                this.setPropertyValue(obj, this.name, this.oldValue, this.oldValue);
                this.oldValue = null;
            };
            /**
             * 设置属性值
             */
            p.setPropertyValue = function (obj, name, value, valueForType) {
                if (value === undefined || value === null)
                    obj[name] = value;
                else if (typeof (valueForType) == "number")
                    obj[name] = parseFloat(value);
                else if (typeof (valueForType) == "boolean")
                    obj[name] = this.toBoolean(value);
                else
                    obj[name] = value;
            };
            /**
             * 转成Boolean值
             */
            p.toBoolean = function (value) {
                if (typeof (value) == "string")
                    return value.toLowerCase() == "true";
                return value != false;
            };
            return SetProperty;
        })(gui.OverrideBase);
        gui.SetProperty = SetProperty;
        egret.registerClass(SetProperty,"egret.gui.SetProperty");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.SetStyle
         * @classdesc
         * 设置属性
         * @extends egret.gui.OverrideBase
         * @private
         */
        var SetStyle = (function (_super) {
            __extends(SetStyle, _super);
            /**
             * 构造函数
             * @method egret.gui.SetStyle#constructor
             */
            function SetStyle(target, name, value) {
                _super.call(this);
                this.target = target;
                this.name = name;
                this.value = value;
            }
            var d = __define,c=SetStyle;p=c.prototype;
            /**
             * @method egret.gui.SetStyle#apply
             * @param parent {IContainer}
             */
            p.apply = function (parent) {
                var obj = this.target == null || this.target == "" ? parent : parent[this.target];
                if (obj == null)
                    return;
                this.oldValue = obj["getStyle"](this.name);
                this.setStyleValue(obj, this.name, this.value, this.oldValue);
            };
            /**
             * @method egret.gui.SetStyle#remove
             * @param parent {IContainer}
             */
            p.remove = function (parent) {
                var obj = this.target == null || this.target == "" ? parent : parent[this.target];
                if (obj == null)
                    return;
                this.setStyleValue(obj, this.name, this.oldValue, this.oldValue);
                this.oldValue = null;
            };
            /**
             * 设置属性值
             */
            p.setStyleValue = function (obj, name, value, valueForType) {
                if (value === undefined) {
                    obj["clearStyle"](name);
                }
                else if (value === null)
                    obj["setStyle"](name, value);
                else if (typeof (valueForType) == "number")
                    obj["setStyle"](name, parseFloat(value));
                else if (typeof (valueForType) == "boolean")
                    obj["setStyle"](name, this.toBoolean(value));
                else
                    obj["setStyle"](name, value);
            };
            /**
             * 转成Boolean值
             */
            p.toBoolean = function (value) {
                if (typeof (value) == "string")
                    return value.toLowerCase() == "true";
                return value != false;
            };
            return SetStyle;
        })(gui.OverrideBase);
        gui.SetStyle = SetStyle;
        egret.registerClass(SetStyle,"egret.gui.SetStyle");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.State
         * @classdesc
         * State 类定义视图状态，即组件的特定视图。
         * @extends egret.HashObject
         */
        var State = (function (_super) {
            __extends(State, _super);
            /**
             * @method egret.gui.State#constructor
             * @param properties {any}
             */
            function State(name, overrides) {
                _super.call(this);
                /**
                 * 已经初始化标志
                 */
                this.initialized = false;
                /**
                 * 视图状态的名称。给定组件的状态名称必须唯一。必须设置此属性。
                 * @member egret.gui.State#name
                 */
                this.name = null;
                this.name = name;
                this.overrides = overrides;
            }
            var d = __define,c=State;p=c.prototype;
            /**
             * 初始化视图
             * @method egret.gui.State#initialize
             * @param parent {IStateClient}
             */
            p.initialize = function (parent) {
                if (!this.initialized) {
                    this.initialized = true;
                    for (var i = 0; i < this.overrides.length; i++) {
                        (this.overrides[i]).initialize(parent);
                    }
                }
            };
            return State;
        })(egret.HashObject);
        gui.State = State;
        egret.registerClass(State,"egret.gui.State");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        var Transition = (function () {
            function Transition() {
                /**
                 * 该字符串指定在应用过渡时要从中进行更改的视图状态。默认值为“*”，表示任何视图状态。
                 * <p>可以将该属性设置为空字符串“”，它对应于基本视图状态。</p>
                 */
                this.fromState = "*";
                /**
                 *  该字符串指定在应用过渡时要更改到的视图状态。默认值为“*”，表示任何视图状态。
                 *
                 *  <p>可以将该属性设置为空字符串“”，它对应于基本视图状态。</p>
                 */
                this.toState = "*";
                /**
                 * 设置为 true 以指定该过渡应用于正向和逆向视图状态更改。
                 * 因此，对于从视图状态 A 到视图状态 B 的更改以及从视图状态 B 到视图状态 A 的更改，使用该过渡。
                 */
                this.autoReverse = false;
                /**
                 * 该属性控制当前过渡中断时的行为方式。 InterruptionBehavior 类定义此属性的可能值。
                 * 默认值为end
                 */
                this.interruptionBehavior = gui.InterruptionBehavior.END;
            }
            var d = __define,c=Transition;p=c.prototype;
            return Transition;
        })();
        gui.Transition = Transition;
        egret.registerClass(Transition,"egret.gui.Transition");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @language en_US
         * Conduct mapping injection with class definition as the value.
         * @param whenAskedFor {any} whenAskedFor passes class definition or fully qualified name of the class as the key to map.
         * @param adapterClass {any} adapterClass passes the class as a value to be mapped, and its constructor function must be empty.
         * @version Egret 2.4
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 以类定义为值进行映射注入。
         * @param whenAskedFor {any} whenAskedFor 传递类定义或类完全限定名作为需要映射的键。
         * @param adapterClass {any} adapterClass 传递类作为需要映射的值，它的构造函数必须为空。
         * @version Egret 2.4
         * @platform Web,Native
         */
        function registerAdapter(whenAskedFor, adapterClass) {
            instance.mapClass(whenAskedFor, adapterClass);
        }
        gui.registerAdapter = registerAdapter;
        /**
         * @private
         * @param type
         * @returns {any}
         */
        function $getAdapter(whenAskedFor) {
            return instance.getInstance(whenAskedFor);
        }
        gui.$getAdapter = $getAdapter;
        /**
         * @language en_US
         * Injector
         * @version Egret 2.4
         * @platform Web,Native
         * @private
         */
        /**
         * @language zh_CN
         * 注入器
         * @version Egret 2.4
         * @platform Web,Native
         * @private
         */
        var Adapter = (function () {
            function Adapter() {
                /**
                 * @private
                 * 储存类的映射规则
                 */
                this.mapClassDic = {};
                /**
                 * @private
                 */
                this.mapValueDic = {};
            }
            var d = __define,c=Adapter;p=c.prototype;
            p.mapClass = function (whenAskedFor, instantiateClass, named) {
                if (named === void 0) { named = ""; }
                var requestName = this.getKey(whenAskedFor) + "#" + named;
                this.mapClassDic[requestName] = instantiateClass;
            };
            /**
             * @private
             * 获取完全限定类名
             */
            p.getKey = function (hostComponentKey) {
                if (typeof (hostComponentKey) == "string")
                    return hostComponentKey;
                return egret.getQualifiedClassName(hostComponentKey);
            };
            /**
             * @language en_US
             * Get a singleton mapped by the specified class. Note: This method always returns a globally unique instance, and will not create repeatedly.
             * @param clazz {any} Class definition or fully qualified name of the class
             * @param named {string} Optional. If this value is set when calling mapClass () mapping, the same character string needs to be import ed in order to obtain the corresponding singleton
             * @returns {any} Get a singleton mapped by the specified class
             * @version Egret 2.4
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 获取指定类映射的单例，注意:这个方法总是返回全局唯一的实例，不会重复创建。
             * @param clazz {any} 类定义或类的完全限定名
             * @param named {string} 可选参数，若在调用mapClass()映射时设置了这个值，则要传入同样的字符串才能获取对应的单例
             * @returns {any} 获取指定类映射的单例
             * @version Egret 2.4
             * @platform Web,Native
             */
            p.getInstance = function (clazz, named) {
                if (named === void 0) { named = ""; }
                var requestName = this.getKey(clazz) + "#" + named;
                if (this.mapValueDic[requestName])
                    return this.mapValueDic[requestName];
                var returnClass = (this.mapClassDic[requestName]);
                if (returnClass) {
                    var instance = new returnClass();
                    this.mapValueDic[requestName] = instance;
                    delete this.mapClassDic[requestName];
                    return instance;
                }
                egret.$error(1028, requestName);
            };
            return Adapter;
        })();
        gui.Adapter = Adapter;
        egret.registerClass(Adapter,"egret.gui.Adapter");
        /**
         * Resource单例
         */
        var instance = new Adapter();
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * @class egret.gui.LayoutUtil
         * @classdesc
         * 布局工具类
         */
        var LayoutUtil = (function () {
            function LayoutUtil() {
            }
            var d = __define,c=LayoutUtil;p=c.prototype;
            /**
             * 根据对象当前的xy坐标调整其相对位置属性，使其在下一次的父级布局中过程中保持当前位置不变。
             * @method egret.gui.LayoutUtil.adjustRelativeByXY
             * @param element {IVisualElement} 要调整相对位置属性的对象
             * @param parent {DisplayObjectContainer} element的父级容器。若不设置，则取element.parent的值。若两者的值都为空，则放弃调整。
             */
            LayoutUtil.adjustRelativeByXY = function (element, parent) {
                if (parent === void 0) { parent = null; }
                if (!element)
                    return;
                if (!parent)
                    parent = element.parent;
                if (!parent)
                    return;
                var x = element.x;
                var y = element.y;
                var h = element.layoutBoundsHeight;
                var w = element.layoutBoundsWidth;
                var parentW = parent.width;
                var parentH = parent.height;
                if (!isNaN(element.left)) {
                    element.left = x;
                }
                if (!isNaN(element.right)) {
                    element.right = parentW - x - w;
                }
                if (!isNaN(element.horizontalCenter)) {
                    element.horizontalCenter = x + w * 0.5 - parentW * 0.5;
                }
                if (!isNaN(element.top)) {
                    element.top = y;
                }
                if (!isNaN(element.bottom)) {
                    element.bottom = parentH - y - h;
                }
                if (!isNaN(element.verticalCenter)) {
                    element.verticalCenter = h * 0.5 - parentH * 0.5 + y;
                }
            };
            return LayoutUtil;
        })();
        gui.LayoutUtil = LayoutUtil;
        egret.registerClass(LayoutUtil,"egret.gui.LayoutUtil");
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        var rectangleCache = {};
        /**
         * 返回字符串所对应的全局唯一Rectangle对象。此方法主要为了减少scale9Grid属性的实例个数。
         * 参数的相同的九宫格数据使用此方法可以全局共享同一个Rectangle对象。
         * @param value {string} 以字符串形式表示Rectangle构造函数的四个参数:x，y，width，height。例如："7,7,46,46"。
         * @returns {string} 字符串对应的Rectangle实例。
         */
        function getScale9Grid(value) {
            if (rectangleCache[value]) {
                return rectangleCache[value];
            }
            if (!value) {
                return null;
            }
            var arr = value.split(",");
            var rect = new egret.Rectangle(parseInt(arr[0]), parseInt(arr[1]), parseInt(arr[2]), parseInt(arr[3]));
            rectangleCache[value] = rect;
            return rect;
        }
        gui.getScale9Grid = getScale9Grid;
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var egret;
(function (egret) {
    var gui;
    (function (gui) {
        /**
         * 设置键值对的简便方法。此方法仅供exmlc编译器内部使用。
         */
        function setProperties(target, keys, values) {
            var length = keys.length;
            for (var i = 0; i < length; i++) {
                var key = keys[i];
                target[key] = values[i];
            }
            return target;
        }
        gui.setProperties = setProperties;
    })(gui = egret.gui || (egret.gui = {}));
})(egret || (egret = {}));
